#!/bin/bash
#
# RIYOUHYOU_BEPPYOU_KAIGO.SEARCH
# 利用票別表（介護）　検索用CGI
#
# Written by K.Aoyama :20131129

#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/CAREPLAN/CGI/CAREPLAN.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv
#--------------------------------------------------------------

KYOUTSU_TBL=${home_dir}/TBL

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  rm -f $tmp-*
  exit 0
}
#--------------------------------------------------------------

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------

# テスト
kaigodo=2
kyufuwariai=90

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
curseirekiyear=$(date +%Y)
curmonth=$(date +%m)

# 対象年
[ -z "${hdTaishouYear}" -o "${hdTaishouYear}" = "_" ] && ${hdTaishouYear}=$curseirekiyear
# 対象月
[ -z "${hdTaishouMonth}" -o "${hdTaishouMonth}" = "_" ] && ${hdTaishouMonth}=$curmonth
# 介護度
[ -z "${kaigodo}" -o "${kaigodo}" = "_" ] && error_exit "介護度が不明です"

#--------------------------------------------------------------
# マスター取得
#--------------------------------------------------------------
# 介護度マスタを抽出
cat ${KYOUTSU_TBL}/CONFIG/KAIGODO_MASTER                  |
LANG=C sort -k1,1                                         > ${tmp}-base_kaigodo

kaigokijungendogaku=$(awk '$1=="'${kaigodo}'"{print $3}' ${tmp}-base_kaigodo)

# 地域単価を抽出
cat ${KYOUTSU_TBL}/CONFIG/KAIGOHOKEN_TIIKI_TANKA          |
LANG=C sort -k1,2                                         > ${tmp}-base_tiikitanka

# 事業所マスタを抽出
cat ${KYOUTSU_TBL}/JIGYOUSHO/JIGYOUSHO_MASTER             |
# 1:事業者コード 2:サービス事業者タイプ 3:地域区分 4:事業所名 5:割引率
self 1 4 7 3 9                                               |
LANG=C sort -k2,3 > ${tmp}-jigyousho_base

cat ${tmp}-jigyousho_base                                 |
# 1:事業者コード 2:サービス事業者タイプ	3:地域区分 4:地域単価 5:事業所名 6:割引率
join1 key=2/3 ${tmp}-base_tiikitanka -                    |
LANG=C sort -k1,3  |
self 1 4 5 6  > ${tmp}-jigyousho_master

cp -p ${tmp}-jigyousho_master ${work_dir}/jigyousho_master

# 各サービスコードマスタを抽出
# 訪問介護
cat ${KYOUTSU_TBL}/SERVICECODE/SERVICECODE_HOUMONKAIGO     |
self 2 3 4  > ${tmp}-servicecode_houmonkaigo

# 訪問看護
cat ${KYOUTSU_TBL}/SERVICECODE/SERVICECODE_HOUMONKANGO     |
self 2 3 4  > ${tmp}-servicecode_houmonkango

# 通所介護
cat ${KYOUTSU_TBL}/SERVICECODE/SERVICECODE_TSUSHOKAIGO     |
self 2 3 4  > ${tmp}-servicecode_tsushokaigo

# 通所リハビリ
cat ${KYOUTSU_TBL}/SERVICECODE/SERVICECODE_TSUSHORIHABIRI     |
self 2 3 4  > ${tmp}-servicecode_tsushorihabiri

cat ${tmp}-servicecode_houmonkaigo ${tmp}-servicecode_houmonkango ${tmp}-servicecode_tsushokaigo ${tmp}-servicecode_tsushorihabiri |
LANG=C sort -k1,2   > ${tmp}-servicecode

cp -p ${tmp}-servicecode ${work_dir}/servicecode



#########テスト##########
kyufuritsu=90;

# 空ファイルの作成
: > ${tmp}-riyouhyoubeppyou_record

# 利用票別表ファイルの取得
if [ -s ${pompa_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}/RIYOUHYOUBEPPYOU_RECORD_KAIGO ] ; then
cat ${pompa_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}/RIYOUHYOUBEPPYOU_RECORD_KAIGO   |
#--------------------------------------------------------------
# 利用者ID
awk '$2=="'${Riyoushaid}'"'   |
#--------------------------------------------------------------
# 日付
# --------------------------
#
awk '$3=="'${hdTaishouYear}'"&&$4=="'$hdTaishouMonth'"'  |
# --------------------------
#--------------------------------------------------------------
# 表示順番を整える
LANG=C sort -k1n,1n     |
# 表示順番項目を除く
delf 1                  |
awk '{print "n",$0}'    |
# 1:明細表示コード    2:利用者ID          3:対象年                4:対象月                5:事業者タイプ
# 6:事業者コード      7:事業者名          8:サービスコード        9:サービス名            10:サービス単位
# 11:割引パーセント   12:割引後単位       13:サービス回数         14:単位数*回数          15:種類限度額超単位
# 16:種類限度額内単位 17:区分基準限度額超 18:区分基準限度額内     19:地域単価             20:費用総額
# 21:給付率           22:介護保険内費用   23:介護保険内利用者負担 24:介護保険外利用者負担 25:有効フラグ
# 26:処理時刻         27:ユーザID
awk '{print $1,$2,$3,$4,$5,$6,$19,$7,$11,$8,$9,$10,$12,$13,$14,"_",$18,$17,$20,$22,$23,$24,$15,$16}'    |
# 1:明細表示コード                2:利用者ID              3:利用年          4:利用月  5:事業者サービス区分
# 6:事業者ID                  7:地域単価              8:事業所名        9:割引率  10:サービスコード
# 11:サービスコード名         12:単位                 13:単位（割引後） 14:回数   15:単位合計
# 16:付随費用                 17:基準内限度額対象単位 18:基準外対象単位 19:請求額 20:介護保険給付額
# 21:個人負担額（保険対象内） 22:個人負担額（全額） 23:種類限度額超 24:種類限度額内 25:給付率
tee $work_dir/riyouhyoubeppyou_record0   |
sm5 1 13 14 24          |
awk '{print $0,"'${kyufuritsu}'"}'   |
tee $work_dir/riyouhyoubeppyou_record1   |
self 2/25 1             |
awk '{print "l",$0}'    >  ${tmp}-riyouhyoubeppyou_record
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー１"

fi


if [ $(gyo ${tmp}-riyouhyoubeppyou_record) -eq 0 ] ; then

# 利用票別表ファイルが既に存在する場合はそちらを優先して取得
# 利用票ファイルの取得
cat ${pompa_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}/SERVICE_YOTEI_KAIGO   |
#--------------------------------------------------------------
# 利用者ID
awk '$2=="'${Riyoushaid}'"'   |
#--------------------------------------------------------------
# 日付
# --------------------------
# 
awk '$3=="'${hdTaishouYear}'"&&$4=="'$hdTaishouMonth'"'  |
# --------------------------
#--------------------------------------------------------------
# 1:利用者ID       2:利用年 3:利用月 4:事業者サービス区分 5:事業者ID
# 6:サービスコード 7:単位   8:回数   9:単位合計           10:付随費用
self 2 3 4 6 10 7 12 12 13 11 |
self 4 6 0                    |
LANG=C sort -k1,2             |
tee ${work_dir}/beppyou0      |
join1 key=1/2 ${tmp}-servicecode -  |
delf 1 2                      |
# 1:サービスコード名 2:利用者ID       3:利用年 4:利用月 5:事業者サービス区分
# 6:事業者ID         7:サービスコード 8:単位   9:回数   10:単位合計
# 11:付随費用
self 2 3 4 5 6 7 1 8 9 10 11  |
tee ${work_dir}/beppyou1 |
LANG=C sort -k5,5 |
join1 key=5 ${tmp}-jigyousho_master -   |
LANG=C sort -k1,5 |
awk '{if($8=="_"){$8=0};$12=int($11*(100-$8)/100);print $0}'      |
# 1:利用者ID 2:利用年    3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名  8:割引率    9:サービスコード     10:サービスコード名
# 11:単位    12:単位合計 13:付随費用 14:介護保険区分
tee ${work_dir}/beppyou2 |
# 1:利用者ID 2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率    9:サービスコード     10:サービスコード名
# 11:単位    12:回数    13:単位合計 14:付随費用
sm2 +count 1 11 12 13 |
tee ${work_dir}/beppyou3 |
LANG=C sort -k6nr,6nr    |
# 1:利用者ID        2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価        7:事業所名 8:割引率    9:サービスコード     10:サービスコード名
# 11:単位           12:回数    13:単位合計 14:付随費用          15:基準内限度額対象単位
# 16:基準外対象単位
# 区分基準限度単位数を超えた場合、地域単価が高いサービスから単位数を割り振る
awk 'BEGIN {gendogaku='${kaigokijungendogaku}'}{gendogaku=gendogaku-$13;if(gendogaku>0){kijunnaigendogaku=$13;kijungaigendogaku=0}else{kijunnaigendogaku=$13+gendogaku;if(kijunnaigendogaku<0){kijunnaigendogaku=0};kijungaigendogaku=$13-kijunnaigendogaku};print $0,kijunnaigendogaku,kijungaigendogaku}'    |
tee ${work_dir}/beppyou_gendo |
LANG=C sort -k1,7  |
# 介護保険対象は区分限度額内、利用者負担は10%＋区分限度額超の対象分。
##awk '{$17=int($13*$6);kaigotaisho=int($15*$6*(100-'${kyufuwariai}')/100);$18=int($15*$6)-kaigotaisho;if($18-int($18)>0){$18=$18+1};$19=kaigotaisho;$20=kaigotaisho+int($16*$6);$21=int($11*(100-$8)/100);print $0}'  |
awk '{$17=int($13*$6);kaigotaisho=int($15*$6*(100-'${kyufuwariai}')/100);$18=int($15*$6)-kaigotaisho;if($18-int($18)>0){$18=$18+1};$19=kaigotaisho;$20=int($16*$6);$21=int($11*(100-$8)/100);print $0,"n"}'  |
tee ${work_dir}/beppyou4 |
self 22 1/11 21 12/20   |
sm4 1 9 10 13 14 22 |
tee ${work_dir}/beppyou5 |
# 1:明細表示コード                2:利用者ID              3:利用年          4:利用月  5:事業者サービス区分
# 6:事業者ID                  7:地域単価              8:事業所名        9:割引率  10:サービスコード
# 11:サービスコード名         12:単位                 13:単位（割引後） 14:回数   15:単位合計
# 16:付随費用                 17:基準内限度額対象単位 18:基準外対象単位 19:請求額 20:介護保険給付額
# 21:個人負担額（保険対象内） 22:個人負担額（全額） 23:種類限度額超 24:種類限度額内 25:給付率
awk '{print $0,"0","0"}'  |
sm5 1 13 14 24          |
awk '{print $0,"'${kyufuritsu}'"}'   |
self 2/25 1             |
awk '{print "l",$0}'    >  ${tmp}-riyouhyoubeppyou_record
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

fi

cp ${tmp}-riyouhyoubeppyou_record ${work_dir}/riyouhyoubeppyou_record

# 利用票別表の単票項目の取得

: > $tmp-riyouhyoubeppyou
if [ -s ${pompa_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}/RIYOUHYOUBEPPYOU_KAIGO ] ; then
   # ヘッダ設定
   echo "CareManager" > $tmp-header
   cp -p $tmp-header $work_dir/header
   cat ${pompa_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}/RIYOUHYOUBEPPYOU_KAIGO  |
#--------------------------------------------------------------
# 利用者ID
   awk '$1=="'${Riyoushaid}'"'   |
#--------------------------------------------------------------
# 日付
# --------------------------
#
   awk '$2=="'${hdTaishouYear}'"&&$3=="'$hdTaishouMonth'"'  |
# --------------------------
   self 4                        |
   cat $tmp-header -             |
   tateyoko                      |
   awk '{print "b",$0}'          > $tmp-riyouhyoubeppyou
fi


cat ${tmp}-riyouhyoubeppyou_record $tmp-riyouhyoubeppyou

## 終了
rm -f $tmp-*
exit 0
