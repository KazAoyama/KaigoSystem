#!/bin/bash
#
# RIYOUHYOU_YOBO.TOUROKU : 利用票登録
#
# Usage : RIYOUHYOU_YOBO.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/CAREPLAN/CGI/CAREPLAN.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1


# デフォルト値セット
# 家族構成(追加形式)

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
# 基準年
[ -z "${hdTaishouYear}" -o "${hdTaishouYear}" = "_" ] && error_exit "対象年が不明です"
# 基準月
[ -z "${hdTaishouMonth}" -o "${hdTaishouMonth}" = "_" ] && error_exit "対象月が不明です"

#--------------------------------------------------------------

# 処理日付に余裕を持たせる（2014/06/30）
shorihiduke=$(mdate today | awk '{print substr($1,7,2)}')

if [ ${shorihiduke} -gt 10 ] ; then
teisyutunengetu=$(mdate month/+1)
else
teisyutunengetu=$(mdate month/+0)
fi

# サービス加算マスタを抽出
cat ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_ADD |
LANG=C sort -k1,1                          |
# 1:事業所ＩＤ 2:加算サービスコード 3:加算サービス名 4:集計単位 5:計算単位
# 6:単位数
delf NF-2/NF                               > $tmp-service_add_master
# 集計単位によって分ける
cat $tmp-service_add_master                |
awk '$4=="m"'                     |
tee $tmp-kijungai_monthly                  |
delf NF                                    > $tmp-service_add_master_monthly
cat $tmp-service_add_master                |
awk '$4=="d"&&$8=="0"'                     |
tee $tmp-kijungai_daily                    |
delf NF                                    > $tmp-service_add_master_taishougai_daily
cat $tmp-service_add_master                |
awk '$4=="d"&&$8=="1"'                     |
tee $tmp-kijunnai_daily                    |
delf NF                                    > $tmp-service_add_master_taishounai_daily

# 限度額対象か否かを判断
cat $tmp-kijungai_monthly $tmp-kijungai_daily  |
awk '{print $2,"g"}'                       > $tmp-kijungai
cat $tmp-kijunnai_daily                    |
awk '{print $2,"n"}'                       > $tmp-kijunnai

cat $tmp-kijungai $tmp-kijunnai |
LANG=C sort -k1,1                          > $tmp-gendohantei

cp $tmp-gendohantei $work_dir/gendohantei


# 利用票別表表レコード
seq $numRiyouhyou  |
while read riyouhyounum ; do
   rnum=$((riyouhyounum-1))
   jigyoushatype=$(nameread hdServiceJigyoushaType$rnum $namedata | head -1)
   jigyoushaid=$(nameread hdServiceJigyoushaID$rnum $namedata | head -1)
   jigyousha=$(nameread hdServiceJigyousha$rnum $namedata | head -1)
   serviceid=$(nameread hdServiceServiceID$rnum $namedata | head -1)
   service=$(nameread hdServiceService$rnum $namedata | head -1)
   servicetani=$(nameread hdServiceTani$rnum $namedata | head -1)
   waribikipercent=$(nameread hdServiceWaribikiPercent$rnum $namedata | head -1)
   waribikitani=$(nameread hdServiceWaribikiTani$rnum $namedata | head -1)
   kaisu=$(nameread hdServiceKaisu$rnum $namedata | head -1)
   tanikaisu=$(nameread hdServiceTaniKaisu$rnum $namedata | head -1)
   shuruichou=$(nameread SyuruiChou$rnum $namedata | head -1)
   shuruinai=$(nameread hdServiceShuruiKijunnai$rnum $namedata | head -1)
   kubunchou=$(nameread KubunChou$rnum $namedata | head -1)
   kubunnai=$(nameread hdServiceKubunKijunnai$rnum $namedata | head -1)
   tanitanka=$(nameread hdServiceTaniTanka$rnum $namedata | head -1)
   fullcost=$(nameread hdServiceFullCost$rnum $namedata | head -1)
   kyufuritsu=$(nameread hdServiceKyufuritsu$rnum $namedata | head -1)
   hokencost=$(nameread hdServiceHokenCost$rnum $namedata | head -1)
   hoken=$(nameread hdServiceHoken$rnum $namedata | head -1)
   hokengai=$(nameread hdServiceHokengai$rnum $namedata | head -1)
   meisaicode=$(nameread meisaiCode$rnum $namedata | head -1)
   
# 1:利用者ID          2:対象年                3:対象月                4:事業者タイプ      5:事業者コード
# 6:事業者名          7:サービスコード        8:サービス名            9:サービス単位      10:割引パーセント
# 11:割引後単位       12:サービス回数         13:単位数*回数          14:種類限度額超単位 15:種類限度額内単位
# 16:区分基準限度額超 17:区分基準限度額内     18:地域単価             19:費用総額         20:給付率
# 21:介護保険内費用   22:介護保険内利用者負担 23:介護保険外利用者負担 24:有効フラグ       25:処理時刻
# 26:ユーザID
   echo "$Riyoushaid" "$hdTaishouYear" "$hdTaishouMonth" "$jigyoushatype" "$jigyoushaid" "$jigyousha" \
"$serviceid" "$service" "$servicetani" "$waribikipercent" "$waribikitani" "$kaisu" "$tanikaisu" \
"$shuruichou" "$shuruinai" "$kubunchou" "$kubunnai" "$tanitanka" "$fullcost" "$kyufuritsu" "$hokencost" \
"$hoken" "$hokengai" "$meisaicode" "1" "${sdaytime}" "${USER_ID}" |
   tee $tmp-seikyu_riyouhyoubeppyou_record_work1                  |
   sed 's/(//g' |
   sed 's/)//g'  >> ${tmp}-riyouhyoubeppyou_record_work

   cat $tmp-seikyu_riyouhyoubeppyou_record_work1 >> $tmp-seikyu_riyouhyoubeppyou_record_work
done

# 表示の順番を変更しないようにするため、表示順を付与
rank ${tmp}-riyouhyoubeppyou_record_work   > ${tmp}-riyouhyoubeppyou_record_input

cp ${tmp}-riyouhyoubeppyou_record_input ${work_dir}/riyouhyoubeppyou_record

cat $tmp-seikyu_riyouhyoubeppyou_record_work    |
rank                                       |
delf NF-2/NF                               |
self 8 0                                   |
LANG=C sort -k1,1                          |
tee $work_dir/hanteimae                    |
join2 +n key=1 $tmp-gendohantei |
# 1:サービスコード      2:限度額判定フラグ   3:順番          4:利用者ID              5:利用年
# 6:利用月              7:事業者サービス区分 8:事業者ID      9:事業所名              10:サービ>スコード
# 11:サービスコード名   12:単位              13:割引率       14:単位（割引後）       15:回数
# 16:単位合計           17:種類限度額超      18:種類限度額内 19:基準内限度額対象単位 20:基準外>対象単位
# 21:地域単価           22:請求額            23:給付率       24:介護保険給付額       25:個人負>担額（保険対象内）
# 26:個人負担額（全額） 27:明細コード
delf 1                 |
self 2/NF 1            |
# 1:順番              2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID          7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率           12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内     17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率           22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# 26:限度額判定フラグ
awk '{print $0,"000000000"}'   |
# 1:順番              2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID          7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率           12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内     17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率           22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# 26:限度額判定フラグ(g:限度額対象外 n:限度額対象内) 27:請求確定フラグ（固定０）
LANG=C sort -k1,1      |
awk '{print $0,"1","'${sdaytime}'","'${USER_ID}'"}' > ${tmp}-seikyu_riyouhyoubeppyou_record_input

cp ${tmp}-seikyu_riyouhyoubeppyou_record_input ${tmp}-riyouhyoubeppyou_record2_input

# 利用票別表単票
echo "$Riyoushaid" "$hdTaishouYear" "$hdTaishouMonth" "$CareManager" "1" "${sdaytime}" "${USER_ID}" > $tmp-riyouhyou_beppyou_input

# 請求用に単票データを作成
cp $tmp-riyouhyou_beppyou_input $tmp-riyouhyou_beppyou2_input

# 利用票が実績確定されているかどうかを確認
kakuteiflg="0"

: > $tmp-base_yobo
if [ -s ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid}/RIYOUHYOU_BASE_YOBO ] ; then
#--------------------------------------------------------------
# ファイルの取得
cat ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid}/RIYOUHYOU_BASE_YOBO |
#--------------------------------------------------------------
# 利用者ID
awk '$1=="'${Riyoushaid}'"'   |
# 対象年月
# --------------------------
awk '$2=="'${hdTaishouYear}'"&&$3=="'${hdTaishouMonth}'"'    |
awk '$5=="1"' > $tmp-base_yobo
fi

[ $(gyo $tmp-base_yobo) -eq 1 ] && kakuteiflg="1"

# 本日の日付
curday=$(mdate ${hdTaishouYear}${hdTaishouMonth}"01" | self 1)

# 今月の最初の日付
firstday=$(mdate ${hdTaishouYear}${hdTaishouMonth}m | tateyoko | head -1)
# 今月の最後の日付
lastday=$(mdate ${hdTaishouYear}${hdTaishouMonth}m | tateyoko | tail -1)

#--------------------------------------------------------------
# マスター取得
#--------------------------------------------------------------
# 介護保険情報
# 1:利用者ID            2:介護度              3:保険者名                    4:認定年和暦              5:認定年
# 6:認定月              7:認定日              8:認定年月日西暦              9:認定有効期間開始年和暦  10:認定有効期間開始年
# 11:認定有効期間開始月 12:認定有効期間開始日 13:認定有効期間開始年月日西暦     14:認定有効期間>終了年和暦 15:認定有効期間終了年
# 16:認定有効期間終了月 17:認定有効期間終了日 18:認定有効期間終了年月日西暦
#self 1 3 5 14/28 ${home_dir}/CAREPLAN/TMP/RIYOUSHA_KAIGOHOKEN   |
self 1 3 5 14/28 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN   |
awk '$1=="'$Riyoushaid'"'   >     $tmp-riyousha_kaigohoken_master

cat $tmp-riyousha_kaigohoken_master                           |
awk '$13<="'${curday}'"&&$18>="'${curday}'"'                  |
# 1:利用者ID               2:介護度 3:保険者名 4:認定年月日 5:有効期間開始年月日
# 6:認定有効期間終了年月日
self 1/3 8 13 18                        |
LANG=C sort -k5,6                       |
getlast 1 1                             > $tmp-cur_riyousha_kaigohoken

# 月初めの介護度を取得
cat $tmp-riyousha_kaigohoken_master                           |
awk '$13<="'${firstday}'"&&$18>="'${firstday}'"'              |
self 1/3 8 13 18                        |
LANG=C sort -k5,6                       |
getlast 1 1                             > $tmp-first_riyousha_kaigohoken

# 月終わりの介護度を取得
cat $tmp-riyousha_kaigohoken_master                           |
awk '$13<="'${lastday}'"&&$18>="'${lastday}'"'              |
self 1/3 8 13 18                        |
LANG=C sort -k5,6                       |
getlast 1 1                             > $tmp-last_riyousha_kaigohoken

prekaigodo=$(self 2 $tmp-first_riyousha_kaigohoken)
curkaigodo=$(self 2 $tmp-cur_riyousha_kaigohoken)
postkaigodo=$(self 2 $tmp-last_riyousha_kaigohoken)


flg="0"
if [ ${prekaigodo} -eq ${postkaigodo} ] ; then
   kaigodo=$curkaigodo
elif [ ${prekaigodo} -gt ${postkaigodo}  ] ; then
   kaigodo=$prekaigodo
   flg="1"
else
   kaigodo=$postkaigodo
   flg="1"
fi
# 介護度マスタを抽出
cat ${home_dir}/TBL/CONFIG/KAIGODO_MASTER                  |
awk '$4<="'$curday'"&&$5>"'$curday'"{print $1,$2,$3}'     |
LANG=C sort -k1,1                                         > ${tmp}-base_kaigodo

kaigokijungendogaku=$(awk '$1=="'${kaigodo}'"{print $3}' ${tmp}-base_kaigodo)

# 介護度が変更されたときは基準限度額の90%
if [ "$flg" = "1" ] ; then
  echo "$kaigokijungendogaku" |
#  lcalc '$1*0.9' |
  lcalc '$1*1' |
  marume 1.0 > $tmp-kaigokijungendogaku
  kaigokijungendogaku=$(self 1 $tmp-kaigokijungendogaku)
fi

# 請求のために介護限度額を計算してあげる
echo "$Riyoushaid" "${hdTaishouYear}" "${hdTaishouMonth}" "$kaigodo" "$kaigokijungendogaku" "1" "${sdaytime}" "${USER_ID}" > $tmp-kaigodo_info_input

cp $tmp-kaigodo_info_input $tmp-kaigodo_info2_input


#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
GETSUGAKU_RIYOU_YOBO/${Riyoushaid}/RIYOUHYOUBEPPYOU_RECORD_YOBO   RIYOUHYOUBEPPYOU_RECORD_YOBO
GETSUGAKU_RIYOU_YOBO/${Riyoushaid}/RIYOUHYOUBEPPYOU_YOBO   RIYOUHYOUBEPPYOU_YOBO
GETSUGAKU_RIYOU_YOBO/${Riyoushaid}/KAIGODO_INFO   KAIGODO_INFO
FIN

input_detail_dir=RIYOUHYOUBEPPYOU_YOBO/${Riyoushaid}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
if [ "$kakuteiflg" = "0" ] ; then
cat <<- FIN > $tmp-koushin_pompa
riyouhyou_beppyou RIYOUHYOUBEPPYOU_YOBO 3 6 7 ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
kaigodo_info KAIGODO_INFO 3 7 8 ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
FIN
else
cat <<- FIN > $tmp-koushin_pompa
riyouhyou_beppyou RIYOUHYOUBEPPYOU_YOBO 3 6 7 ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
kaigodo_info KAIGODO_INFO 3 7 8 ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
riyouhyou_beppyou2 RIYOUHYOUBEPPYOU_YOBO 3 6 7 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${teisyutunengetu} ${input_dir}
kaigodo_info2 KAIGODO_INFO 3 7 8 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${teisyutunengetu} ${input_dir}
FIN
fi

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
if [ "$kakuteiflg" = "0" ] ; then
cat <<- FIN > $tmp-add_pompa
riyouhyoubeppyou_record RIYOUHYOUBEPPYOU_RECORD_YOBO 4 27 28 ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
FIN
else
cat <<- FIN > $tmp-add_pompa
riyouhyoubeppyou_record RIYOUHYOUBEPPYOU_RECORD_YOBO 4 27 28 ${pompa_dir}/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
riyouhyoubeppyou_record2 RIYOUHYOUBEPPYOU_RECORD_YOBO 4 29 30 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${teisyutunengetu} ${input_dir}
FIN
fi


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 入替版作成
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$2!="'${Riyoushaid}'"||$3!="'${hdTaishouYear}'"||$4!="'${hdTaishouMonth}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done

/home/hands/E-LIFE/KEIRI/CGI/KAIGOSEIKYU_KYOTAKU.SAIKAKUTEI ${Riyoushaid} ${shisetsu} ${teisyutunengetu} ${hdTaishouYear}${hdTaishouMonth}

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
