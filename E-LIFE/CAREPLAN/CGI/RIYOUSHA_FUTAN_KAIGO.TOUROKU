#!/bin/bash
#
# RIYOUSHA_FUTAN_KAIGO.TOUROKU : アセスメント登録
#
# Usage : RIYOUSHA_FUTAN_KAIGO.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/CAREPLAN/CGI/CAREPLAN.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d%H%M%S).$$ ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1


# デフォルト値セット


#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
# 基準年
[ -z "${RiyouFutanYear}" -o "${RiyouFutanYear}" = "_" ] && error_exit "対象年が不明です"
# 基準月
[ -z "${RiyouFutanMonth}" -o "${RiyouFutanMonth}" = "_" ] && error_exit "対象月が不明です"

#--------------------------------------------------------------

# データ作成

# 目標データ
seq $FUTANNUM  |
while read futannum ; do
   fnum=$((futannum-1))
   dataid=$(nameread DataID$fnum $namedata | head -1)
   kyoukyusha=$(nameread Kyoukyusha$fnum $namedata | head -1)
   costnaiyou=$(nameread CostNaiyou$fnum $namedata | head -1)
   tanka=$(nameread Tanka$fnum $namedata | head -1)
   kaisu=$(nameread kaisu$fnum $namedata | head -1)
   cost=$(nameread Cost$fnum $namedata | head -1)
# 1:利用者ID   2:対象年    3:対象月 4:ID     5:供給者
# 6:コスト内容 7:単価      8:回数   9:コスト 10:有効フラグ
# 11:更新時刻  12:ユーザID
   echo "$Riyoushaid" "$RiyouFutanYear" "$RiyouFutanMonth" "$dataid" \
"$kyoukyusha" "$costnaiyou" "$tanka" "$kaisu" "$cost" \
"1" "${sdaytime}" "${USER_ID}" >> ${tmp}-riyou_futan_work1
done


cat ${tmp}-riyou_futan_work1 |
awk '$4=="_"'                    > ${tmp}-riyou_new

cat ${tmp}-riyou_futan_work1 |
awk '$4!="_"'                    > ${tmp}-riyou_upd

new_riyou_num=$(gyo ${tmp}-riyou_new)

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_riyou_num -gt 0 ] ; then
last_no="${new_riyou_num}"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/RIYOUSHA_FUTAN_KAIGO/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/RIYOUSHA_FUTAN_KAIGO/${Riyoushaid}/RIYOUSHA_FUTAN_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/RIYOUSHA_FUTAN_KAIGO/${Riyoushaid}/RIYOUSHA_FUTAN_ID ] || echo "000001" > ${kanri_dir}/RIYOUSHA_FUTAN_KAIGO/${Riyoushaid}/RIYOUSHA_FUTAN_ID
# 超えてたらリセット
[ ${new_last_no} -gt 999999 ] && echo "000001" > ${kanri_dir}/RIYOUSHA_FUTAN_KAIGO/${Riyoushaid}/RIYOUSHA_FUTAN_ID
get_no ${last_no} ${kanri_dir}/RIYOUSHA_FUTAN_KAIGO/${Riyoushaid}/RIYOUSHA_FUTAN_ID > $tmp-id_riyouall

fi
#---------------------------------------------------------------

ycat $tmp-id_riyouall ${tmp}-riyou_new      |
self 2/4 1 6/NF                                     > ${tmp}-riyou_new2

cat ${tmp}-riyou_upd ${tmp}-riyou_new2     |
LANG=C sort -k1,3                                   > ${tmp}-riyou_input

cp -p ${tmp}-riyou_input ${tmp}-seikyu_input


cp -p $tmp-riyou_input $work_dir/riyou_input

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}/RIYOUSHA_FUTAN_KAIGO   RIYOUSHA_FUTAN_KAIGO
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
riyou RIYOUSHA_FUTAN_KAIGO 4 11 12 ${pompa_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid} ${input_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}
seikyu RIYOUSHA_FUTAN_KAIGO 4 11 12 ${data_dir}/SEIKYU/KYOTAKU/${RiyouFutanYear}${RiyouFutanMonth} ${input_dir}/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'$Riyoushaid'"||$2!="'$hdKeikakuSakuseiDate'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
