#!/bin/bash
#
# SHIEN_KEIKAKU1.DISPLAY : 支援計画書1表示
#
# Usage : SHIEN_KEIKAKU1.DISPLAY
#
# Written by K.Aoyama(HANDS.LAB)

# ログ
source /home/hands/E-LIFE/CAREPLAN/CGI/CAREPLAN.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv


rm -f $tmp-*

# ディレクトリ設定
test_tbl_dir="${home_dir}/TEST/TBL"
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

# 変数の定義
namedata=$1
result_data=$2
opt_data=$3
today="$(date +%Y%m%d)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu
echo ${Riyoushaid} > ${tmp}-riyoushaid

# ログインUSER名と施設の取得（仮）
self 1 2 ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
tee $tmp-user_mst                                  |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst

cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

# 施設と従業員の紐付け
# 1:施設ID 2:ユーザID 3: 4: 5:
cp $tmp-user_mst $work_dir/user
cp $tmp-shisetsu $work_dir/shisetsu
# 退職者対応
awk '$(NF-2)!="9"' ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_KIHON    |
#awk '$4<="'$today'"&&"'$today'"<=$5'               |
LANG=C sort -k1,1                                   |
self 1                                             > $tmp-yuko-jyuugyouin

# ケアマネ抽出
#cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU |
# 施設で絞込み + 特別所属（20140602）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU ${home_dir}/TBL/JYUUGYOUIN_MASTER/EXTRA_USER_SHISETSU |
LANG=C sort -k2,2                                   |
join1 key=2 ${tmp}-shisetsu                         |
awk '$6=="1"{print $1}'                             |
LANG=C sort -k1,1                                   |
join1 key=1 $tmp-user_mst                           |
join0 key=1 $tmp-yuko-jyuugyouin                    |
self 1 2                                            > $tmp-caremanager_list

# 元号
cat ${home_dir}/TBL/ZEIRITSU_GENGOU_MASTER/GENGOU  |
LANG=C sort -k3,3nr                                |
awk '$5!="9"{print $2,substr($3,1,4)-1}'        > $tmp-gengou_mst

# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou



[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------
moveScreen=""
#--------------------------------------------------------------
### モードによる表示の分岐
case "${MODE}" in

  # 初期表示
  init | to_reset)
    if [ "$(gyo ${result_data})" != 0 ] ; then
      cat ${result_data}        > $tmp-listdata
    else
    # 空のリストデータを作成する
      : > $tmp-listdata
    fi
  ;;

  # 検索結果
#  search)
#    if [ "$(gyo ${result_data})" != 0 ] ; then
#      cat ${result_data}        |
      # 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終>更新日時
      # 6:最終更新者
#      LANG=C sort -k6,6nr       |
#      self 1 2 3 4 5            |
#      rank                      |
#      head -10                  > $tmp-listdata
#    else
#      : > $tmp-listdata
#    fi
#  ;;

  # 更新
  regist)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
    if [ "$(gyo ${opt_data})" != 0 ] ; then
      cat ${opt_data}        > $tmp-listdata
    else
    # 空のリストデータを作成する
      : > $tmp-listdata
    fi
  ;;
  # 削除
  delete)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="削除完了"
      moveScreen="javascript:document.frmBack.submit();"
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
    # 空のリストデータを作成する
    : > $tmp-listdata
  ;;
esac

#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
fi
#--------------------------------------------------------------

dispShokaiSakuseiDate=""
#--------------------------------------------------------------
if [ -s ${data_dir}/CAREPLAN/CAREPLAN_YOBO/${Riyoushaid}/TODOKEDEBI ]; then
  # 初回作成日の取得
  cat ${data_dir}/CAREPLAN/CAREPLAN_YOBO/${Riyoushaid}/TODOKEDEBI |
  #--------------------------------------------------------------
  # 利用者ID
  awk '$1=="'${Riyoushaid}'"{print $2,$3}'   |
  awk '{print $2}'                > $tmp-shokai_sakuseidate
  dispShokaiSakuseiDate=$(self 1 $tmp-shokai_sakuseidate)
fi

#--------------------------------------------------------------
#if [ -s ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid}/SHIEN_KEIKAKU1 ]; then
  # 初回作成日の取得
#  cat ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid}/SHIEN_KEIKAKU1 |
  #--------------------------------------------------------------
  # 利用者ID
#  awk '$1=="'${Riyoushaid}'"{print $2,$3}'   |
#  LANG=C sort -k1,1                       |
#  getfirst 1 1                            |
#  awk '{print $2}'                > $tmp-shokai_sakuseidate
#  dispShokaiSakuseiDate=$(self 1 $tmp-shokai_sakuseidate)
#fi


cp -p $tmp-listdata $work_dir/listdata_shien

# 基本チェックデータ取得
awk '$1=="k"' $tmp-listdata    |
delf 1           > $tmp-listdata_shien

# 総合リストデータ取得
awk '$1=="l"{print $4,$5,$6,$7}' $tmp-listdata    > $tmp-sougoulist

# チェックリストデータ取得
awk '$1=="c"{print $2,$3}' $tmp-listdata    > $tmp-checklist


#--------------------------------------------------------
# 必要な値の取得
eval $(name-source $tmp-listdata_shien)
eval $(name-source $tmp-checklist)
#--------------------------------------------------------

# 日付の設定
[ -z "${hdKeikakuSakuseiDate}" -o "${hdKeikakuSakuseiDate}" = "_" ] && hdKeikakuSakuseiDate=$(mdate today | self 1)

dispKeikakuSakuseiDate=$(echo $hdKeikakuSakuseiDate | awk '$1!="" {print "\""substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2)"\""}')

#curday=${hdKeikakuSakuseiDate}

# 検索日付がなかったら本日の日付
[ -z "${hdkensakudate}" -o "${hdkensakudate}" = "_" ] && hdkensakudate=$(mdate today | self 1)
# 計画作成は認定前に行われる可能性があるため、基準日を設定(2014/6/2)
curday=${hdkensakudate}


# 入居者情報(仮)
# 介護保険情報
# 1:利用者ID            2:介護度              3:保険者名                    4:認定年和暦              5:認定年
# 6:認定月              7:認定日              8:認定年月日西暦              9:認定有効期間開始年和暦  10:認定有効期間開始年
# 11:認定有効期間開始月 12:認定有効期間開始日 13:認定有効期間開始年月日西暦     14:認定有効期間終了年和暦 15:認定有効期間終了年
# 16:認定有効期間終了月 17:認定有効期間終了日 18:認定有効期間終了年月日西暦
self 1 3 5 14/28 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN   |
awk '$13<="'${curday}'"&&$18>="'${curday}'"'                  |
getlast 1 1                                                   |
# 1:利用者ID            2:介護度 3:保険者名               4:認定年和暦         5:認定年
# 6:認定月              7:認定日 8:認定有効期間終了年和暦 9:認定有効期間終了年 10:認定有効期間終了月
# 11:認定有効期間終了日
self 1/7 14/17                        > $tmp-riyousha_kaigohoken
cp $tmp-riyousha_kaigohoken $work_dir/riyousha_kaigohoken

# 元号マスタ
self 1/4 ${home_dir}/TBL/ZEIRITSU_GENGOU_MASTER/GENGOU                  > $tmp-gengou_master
self 1 2 $tmp-gengou_master                        > $tmp-gengou_master2

cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KIHON          |
join1 key=1 ${tmp}-riyoushaid                      |
# 1:利用者ID 2:利用者名 3:誕生日和暦 4:誕生日年 5:誕生日月
# 6:誕生日
self 1 2 5 6 7 8                                  |
LANG=C sort -k3,3                                  |
# 1:利用者ID 2:利用者名 3:誕生日和暦 4:和暦名 5:和暦開始
# 6:和暦終了 7:誕生日年 8:誕生日月   9:誕生日
join1 key=3 $tmp-gengou_master -        |
# 1:利用者ID 2:利用者名 3:和暦名 4:誕生日年 5:誕生日月
# 6:誕生日
self 1 2 4 7 8 9                                   |
# 1:利用者ID 2:利用者名 3:生年月日
awk '{print $1,$2,$3$4"年"$5"月"$6"日"}'            |
tee $work_dir/riyousha_work1                             |
# 1:利用者ID            2:介護度    3:保険者名               4:認定年和暦         5:認定年
# 6:認定月              7:認定日    8:認定有効期間終了年和暦 9:認定有効期間終了年 10:認定有効期間終了月
# 11:認定有効期間終了日 12:利用者名 13:生年月日
join2 +"###BLANK###" key=1 $tmp-riyousha_kaigohoken               |
tee $work_dir/riyousha_work2                             |
LANG=C sort -k4,4                                  |
# 1:利用者ID            2:介護度              3:保険者名  4:認定年和暦             5:和暦名
# 6:認定年              7:認定月              8:認定日    9:認定有効期間終了年和暦 10:認定有効期間終了年
# 11:認定有効期間終了月 12:認定有効期間終了日 13:利用者名 14:生年月日
join2 +"###BLANK###" key=4 $tmp-gengou_master2 -                  |
tee $work_dir/riyousha_work3                             |
LANG=C sort -k9,9                                  |
# 1:利用者ID             2:介護度              3:保険者名            4:認定年和暦             5:和暦名
# 6:認定年               7:認定月              8:認定日              9:認定有効期間終了年和暦 10:和暦名
# 11:認定有効期間終了>年 12:認定有効期間終了月 13:認定有効期間終了日 14:利用者名              15:生年月日
join2 +"###BLANK###" key=9 $tmp-gengou_master2 -                  |
tee $work_dir/riyousha_work4                             |
# 1:利用者名 2:生年月日 3:認定年月日 4:認定有効期間終了年月日 5:介護度
# 6:保険者名
awk '{print $14,$15,$5$6"年"$7"月"$8"日",$10$11"年"$12"月"$13"日",$2,$3}'  > ${tmp}-riyousha_kihon
Riyoushamei=$(self 1 ${tmp}-riyousha_kihon)

# 保存内容反映かどうか
haneiflg="_"
if [ -s ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid}/SHIEN_SAVE_CHECK ]; then
  cat ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid}/SHIEN_SAVE_CHECK |
  awk '$1=="'${Riyoushaid}'"&&$2=="'$hdKeikakuSakuseiDate'"{print $3}'  > $tmp-savecheck
  haneiflg=$(self 1 $tmp-savecheck)
fi

savecheck="checked"
# 初回のみチェックリストのデフォルトをセットする
if [ "$haneiflg" != "1" ] ; then
  if [ "$(gyo $tmp-checklist)" != "0" ] ; then
  cat $tmp-checklist |
  awk '$1=="C2"{print $2}'   > $tmp-undou
  cat $tmp-checklist |
  awk '$1=="C3"{print $2}'   > $tmp-eiyou
  cat $tmp-checklist |
  awk '$1=="C4"{print $2}'   > $tmp-kouku
  cat $tmp-checklist |
  awk '$1=="C5"{print $2}'   > $tmp-tojikomori
  cat $tmp-checklist |
  awk '$1=="C6"{print $2}'   > $tmp-monowasure
  cat $tmp-checklist |
  awk '$1=="C7"{print $2}'   > $tmp-utu
  undoucheck=$(self 1 $tmp-undou | getlast 1 1)
  eiyoucheck=$(self 1 $tmp-eiyou | getlast 1 1)
  koukucheck=$(self 1 $tmp-kouku | getlast 1 1)
  tojikomoricheck=$(self 1 $tmp-tojikomori | getlast 1 1)
  monowasurecheck=$(self 1 $tmp-monowasure | getlast 1 1)
  utucheck=$(self 1 $tmp-utu | getlast 1 1)
  if [ $undoucheck -ge 3 ] ; then
    Undoufusoku="1"
  else
    Undoufusoku=""
  fi
  if [ $eiyoucheck -eq 2 ] ; then
    EiyouKaizen="1"
  else
    EiyouKaizen=""
  fi
  if [ $koukucheck -ge 2 ] ; then
    Koukunai="1"
  else
    Koukunai=""
  fi
  if [ $tojikomoricheck -eq 2 ] ; then
    Tojikomori="1"
  else
    Tojikomori=""
  fi
  if [ $monowasurecheck -eq 3 ] ; then
    Monowasure="1"
  else
    Monowasure=""
  fi
  if [ $utucheck -ge 3 ] ; then
    Utu="1"
  else
    Utu=""
  fi
  fi
  savecheck="@";
fi


# 支援事業者情報を基本情報から取得
self 1 3 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_MASTER |
LANG=C sort -k1,1                                          > $tmp-houkatsu_mst
cat ${data_dir}/UNEI/RIYOUSHA/HOUKATSU_RIYOUSHA_STATUS   |
awk '$(NF-2)!="9"'               |
awk '$2=="'$Riyoushaid'"&&$4=="027"&&($5<="'$hdKeikakuSakuseiDate'"&&"'$hdKeikakuSakuseiDate'"<=$6){print $1}'   |
getlast 1 1 |
join1 key=1 $tmp-houkatsu_mst > $tmp-shienjigyousha

ShienJigyousha=$(self 2 $tmp-shienjigyousha)

[ -z "$Kaigodo" -o "$Kaigodo" = "_" ] && Kaigodo=$(self 5 ${tmp}-riyousha_kihon | getlast 1 1)

echo "CAREPLAN_MENU.CGI" > $tmp-cgi
# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
awk '$2=="0000"||$2=="'$shisetsu'"'         |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -k7,7                                          |
join0 key=7 $tmp-cgi                                       > ${tmp}-kengenlist

cat << FIN | sed 's/ _$/ @/g' > $tmp-calsed
###RIYOUSHAID### $Riyoushaid
###USERID### $USER_ID
###RIYOUSHAMEI### $Riyoushamei
###KEIKAKUSAKUSEIDATE### $dispKeikakuSakuseiDate
###HDKEIKAKUSAKUSEIDATE### $hdKeikakuSakuseiDate
###SHOKAISAKUSEIDATE### $dispShokaiSakuseiDate
###SHOKAISAKUSEI### $ShokaiSakusei
###SHOUKAISAKUSEI### $ShoukaiSakusei
###KEIZOKUSAKUSEI### $KeizokuSakusei
###NINTEI### $Nintei
###KAIGODO### $Kaigodo
###TANTOUSHA### $Tantousha
###CHKITAKU### $chkItaku
###KYOUKYUSHA### $Kyoukyusha
###SHIENJIGYOUSHA### $ShienJigyousha
###IYOKU0### $Iyoku0
###KADAIFLG0### $KadaiFlg0
###ASSESSMENTJOUKYOU0### $AssessmentJoukyou0
###RYOUIKIKADAI0### $RyouikiKadai0
###IYOKU1### $Iyoku1
###KADAIFLG1### $KadaiFlg1
###ASSESSMENTJOUKYOU1### $AssessmentJoukyou1
###RYOUIKIKADAI1### $RyouikiKadai1
###IYOKU2### $Iyoku2
###KADAIFLG2### $KadaiFlg2
###ASSESSMENTJOUKYOU2### $AssessmentJoukyou2
###RYOUIKIKADAI2### $RyouikiKadai2
###IYOKU3### $Iyoku3
###KADAIFLG3### $KadaiFlg3
###ASSESSMENTJOUKYOU3### $AssessmentJoukyou3
###RYOUIKIKADAI3### $RyouikiKadai3
###UNDOUFUSOKU### $Undoufusoku
###EIYOUKAIZEN### $EiyouKaizen
###KOUKUNAI### $Koukunai
###TOJIKOMORI### $Tojikomori
###MONOWASURE### $Monowasure
###UTU### $Utu
###RYUITEN### $Ryuiten
###C2### $C2
###C3### $C3
###C4### $C4
###C5### $C5
###C6### $C6
###C7### $C7
###SAVECHECK### $savecheck
###PASSWORD### $password
###SHISETSUID### $shisetsu
###SELECT_SHISETSU### $select_shisetsu
###MOVE### $moveScreen
###HDKENSAKUDATE### $hdkensakudate
###HDSHISETSUKENSAKU### $hdShisetsuKensaku
###HDCAREMANAGERKENSAKU### $hdCaremanagerKensaku
FIN


# 訪問介護サービス事業所マスタ
cat ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER   |
# 1:ID          2:事業所名  3:電話番某      4:住所   5:金融コード
# 6:支店コード  7:口座区分  8:口座番号      9:口座名 10:郵便番号
# 11:有効フラグ 12:処理時刻 13:ユーザコード
awk '$11!="9"'                                      |
LANG=C sort -k1,1                                   |
self 1 2 3                                 > $tmp-kyotaku_master

#-----------------------------------------------------------
# 登録・印刷ボタンの表示
# 施設名はログインユーザーの権限のある施設を取得
self 9 $tmp-kengenlist |
LANG=C sort -k1,1      |
tail -1                > $tmp-dispkengen

# 権限がない人は新規登録や出力が出来ない
if [ $(cat $tmp-dispkengen) = "3" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### @"   >> $tmp-calsed
elif [ $(cat $tmp-dispkengen) = "2" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
else
  echo "###SHINKITOUROKUDISP### none" >> $tmp-calsed
  echo "###TOUROKUDISP### none" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
fi

cat $tmp-calsed      |
sed 's/\\n/###KAIGYO###/g'     >  $tmp-calsed_kaigyozumi

# HTMLの作成
cat ${html_dir}/SHIEN_KEIKAKU1.html |
calsed -f $tmp-calsed_kaigyozumi - |
mojihame -l###USER__NAME### - ${tmp}-usermei |
mojihame -l###SHISETSU_TAISHOU### - ${tmp}-shisetsu_taishou |
mojihame -l###RIYOUSHAKIHON### - ${tmp}-riyousha_kihon |
mojihame -l###KYOTAKUMASTER### - ${tmp}-kyotaku_master          |
mojihame -h###SOUGOUDATA### - $tmp-sougoulist    |
mojihame -l###CHECKLIST### - $tmp-checklist      |
mojihame -l###GENGOU### - $tmp-gengou_mst |
mojihame -l###CAREMANAGER### - $tmp-caremanager_list  |
sed 's/###KAIGYO###/\n/g'     |
sed 's/###SPACE###/ /g'       |
sed 's/###BLANK###//g'       |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
cat -
#--------------------------------------------------------------
#formhame -d"_" - ${namedata}

rm -f ${tmp}-*
exit 0
