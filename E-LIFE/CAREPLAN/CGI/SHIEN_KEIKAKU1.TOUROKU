#!/bin/bash
#
# SHIEN_KEIKAKU1.TOUROKU : アセスメント登録
#
# Usage : SHIEN_KEIKAKU1.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/CAREPLAN/CGI/CAREPLAN.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d%H%M%S).$$ ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)

#--- 日付 ---
sday=$(date +%Y%m%d)

# 引数設定
namedata=$1


# デフォルト値セット
ShokaiSakusei="_"
ShoukaiSakusei="_"
KeizokuSakusei="_"
Undoufusoku="_"
EiyouKaizen="_"
Koukunai="_"
Tojikomori="_"
Monowasure="_"
Utu="_"
KadaiFlg0="_"
KadaiFlg1="_"
KadaiFlg2="_"
KadaiFlg3="_"
Nintei="_"
saveCheck="_"
ShokaiSakuseiDate="_"
hdShokaiSakuseiDate="_"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
# 作成年月日
[ -z "${hdKeikakuSakuseiDate}" -o "${hdKeikakuSakuseiDate}" = "_" ] && error_exit "作成年月日が不明です"

#--------------------------------------------------------------

yukoflg="1"

if [ "$MODE" = "delete" ] ; then
   yukoflg="9"
fi

# データ作成
# 基本情報
# 1:利用者ID           2:作成年月日(西暦) 3:作成年月日(和暦)    4:初回作成フラグ     5:紹介作成フラグ
# 6:継続作成フラグ     7:認定フラグ       8:介護度              9:サービス作成者     10:委託フラグ
# 11:サービス事業者    12:初回作成日      13:支援事業者         14:意欲1             15:課題フラグ1
# 16:アセスメント領域1 17:課題1           18:意欲2              19:課題フラグ2       20:アセスメント領域2
# 21:課題2             22:意欲3           23:課題フラグ3        24:アセスメント領域3 25:課題3
# 26:意欲4             27:課題フラグ4     28:アセスメント領域4  29:課題4             30:運度不足チェック
# 31:栄養改善チェック  32:口腔内チェック  33:閉じこもりチェック 34:物忘れチェック    35:うつチェック
# 36:36.留意点         37:有効フラグ      38:処理日             39:ユーザID
echo "$Riyoushaid" "$hdKeikakuSakuseiDate" "$KeikakuSakuseiDate" \
"$ShokaiSakusei" "$ShoukaiSakusei" "$KeizokuSakusei" "$Nintei" "$Kaigodo" \
"$Tantousha" "$chkItaku" "$Kyoukyusha" "$ShokaiSakuseiDate" "$ShienJigyousha" \
"$Iyoku0" "$KadaiFlg0" "$AssessmentJoukyou0" "$RyouikiKadai0" \
"$Iyoku1" "$KadaiFlg1" "$AssessmentJoukyou1" "$RyouikiKadai1" \
"$Iyoku2" "$KadaiFlg2" "$AssessmentJoukyou2" "$RyouikiKadai2" \
"$Iyoku3" "$KadaiFlg3" "$AssessmentJoukyou3" "$RyouikiKadai3" \
"$Undoufusoku" "$EiyouKaizen" "$Koukunai" "$Tojikomori" "$Monowasure" \
"$Utu" "$Ryuiten" "$yukoflg" "${sdaytime}" "${USER_ID}" > ${tmp}-shien_input

# チェックデータ保存
# 1:利用者ID 2:作成年月日(西暦) 3:保存チェックフラグ 4:有効フラグ 5:処理日
# 6:ユーザID
echo "$Riyoushaid" "$hdKeikakuSakuseiDate" "$saveCheck" "$yukoflg" "${sdaytime}" "${USER_ID}" > $tmp-checksave_input 

# 支援計画書作成日付データ
# 1:利用者ID   2:作成年月日(西暦) 3:作成年月日(和暦) 4:サービス作成者 5:サービス事業者
# 6:支援事業者 7:有効フラグ       8:処理日           9:ユーザID
echo "$Riyoushaid" "$hdKeikakuSakuseiDate" "$KeikakuSakuseiDate" \
"$Tantousha" "$Kyoukyusha" "$ShienJigyousha" "$yukoflg" "${sdaytime}" \
"${USER_ID}" > ${tmp}-shien_date_input

cp -p $tmp-shien_input $work_dir/shien_input

# 届出日作成
: > ${tmp}-careplan_todokedebi_input
#if [ "$ShokaiSakusei" = "1" -a "$ShokaiSakuseiDate" != "_" -a "$hdShokaiSakuseiDate" != "_" ] ; then
# 要望（初回作成日）2014/6/13
if [ "$ShokaiSakuseiDate" != "_" -a "$hdShokaiSakuseiDate" != "_" ] ; then
echo "$Riyoushaid" "$hdShokaiSakuseiDate" "$ShokaiSakuseiDate" \
"$Tantousha" "$Kyoukyusha" "$yukoflg" "${sdaytime}" \
"${USER_ID}" > ${tmp}-careplan_todokedebi_input
fi

# 総合リスト作成

seq $SOUNUM |
while read sougounum ; do
  snum=$((sougounum-1))
  dataid=$(nameread DataID$snum $namedata | head -1)
  sougou=$(nameread Sougou$snum $namedata | head -1)
  teian=$(nameread Teian$snum $namedata | head -1)
  ikou=$(nameread Ikou$snum $namedata | head -1)
# 1:利用者ID 2:計画作成日(西暦) 3:レコードID 4:総合アセスメント 5:提案
# 6:意向     7:有効フラグ       8:処理日     9:ユーザID
# 2014/5/3 課題削除対応
  #yukoflg="1"
  [ -z "$sougou" ] && sougou="_"
  [ -z "$teian" ] && teian="_"
  [ -z "$ikou" ] && ikou="_"
  if [ "$sougou" = "_" -a "$teian" = "_" -a "$ikou" = "_" ] ; then
    if [ -z "$dataid" -o "$dataid" = "_" ] ; then
      :
    else
      yukoflg="9"
      echo "$Riyoushaid" "$hdKeikakuSakuseiDate" "$dataid" "$sougou" "$teian" \
"$ikou" "${yukoflg}" "${sdaytime}" "${USER_ID}" >> ${tmp}-shien_sougou_work1
    fi
  else
    echo "$Riyoushaid" "$hdKeikakuSakuseiDate" "$dataid" "$sougou" "$teian" \
"$ikou" "${yukoflg}" "${sdaytime}" "${USER_ID}" >> ${tmp}-shien_sougou_work1
  fi

done

cp -p $tmp-shien_sougou_work1 $work_dir/shien_work1

# ID採番
cat ${tmp}-shien_sougou_work1 |
awk '$3=="_"'                    > ${tmp}-sougou_new

cat ${tmp}-shien_sougou_work1 |
awk '$3!="_"'                    > ${tmp}-sougou_upd

new_sougou_num=$(gyo ${tmp}-sougou_new)

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_sougou_num -gt 0 ] ; then
last_no="${new_sougou_num}"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/SHIEN_KEIKAKU1/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/SHIEN_KEIKAKU1/${Riyoushaid}/SOUGOU_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/SHIEN_KEIKAKU1/${Riyoushaid}/SOUGOU_ID ] || echo "00001" > ${kanri_dir}/SHIEN_KEIKAKU1/${Riyoushaid}/SOUGOU_ID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/SHIEN_KEIKAKU1/${Riyoushaid}/SOUGOU_ID
get_no ${last_no} ${kanri_dir}/SHIEN_KEIKAKU1/${Riyoushaid}/SOUGOU_ID > $tmp-id_sougouall

fi
#---------------------------------------------------------------

ycat $tmp-id_sougouall ${tmp}-sougou_new      |
self 2 3 1 5/NF                                     > ${tmp}-sougou_new2

cat ${tmp}-sougou_upd ${tmp}-sougou_new2     |
LANG=C sort -k1,3                                   > ${tmp}-sougou_input


#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
CAREPLAN_YOBO/${Riyoushaid}/SHIEN_KEIKAKU1   SHIEN_KEIKAKU1
CAREPLAN_YOBO/${Riyoushaid}/CAREPLAN_DATE    CAREPLAN_DATE
CAREPLAN_YOBO/${Riyoushaid}/SHIEN_SOUGOU    SHIEN_SOUGOU
CAREPLAN_YOBO/${Riyoushaid}/SHIEN_SAVE_CHECK    SHIEN_SAVE_CHECK
CAREPLAN_YOBO/${Riyoushaid}/TODOKEDEBI    TODOKEDEBI
FIN

input_detail_dir=SHIEN_KEIKAKU1/${Riyoushaid}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
shien SHIEN_KEIKAKU1 2 38 39 ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid} ${input_dir}
shien_date CAREPLAN_DATE 2 8 9 ${apdata_dir}/CAREPLAN_YOBO/${Riyoushaid} ${input_dir}
sougou SHIEN_SOUGOU 3 8 9 ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid} ${input_dir}
checksave SHIEN_SAVE_CHECK 2 5 6 ${pompa_dir}/CAREPLAN_YOBO/${Riyoushaid} ${input_dir}
careplan_todokedebi TODOKEDEBI 1 7 8 ${apdata_dir}/CAREPLAN_YOBO/${Riyoushaid} ${input_dir}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'$Riyoushaid'"||$2!="'$hdKeikakuSakuseiDate'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
