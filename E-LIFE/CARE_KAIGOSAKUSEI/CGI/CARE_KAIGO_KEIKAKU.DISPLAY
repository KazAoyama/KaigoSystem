#!/bin/bash
#
# CARE_KAIGO_KEIKAKU.DISPLAY : 居宅サービス計画書1表示
#
# Usage : CARE_KAIGO_KEIKAKU.DISPLAY
#
# Written by Jun Aoyagi

# ログ
source /home/hands/E-LIFE/CARE_KAIGOSAKUSEI/CGI/CARE_KAIGOSAKUSEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv



rm -f $tmp-*

# ディレクトリ設定
test_tbl_dir="${home_dir}/TEST/TBL"
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

# 変数の定義
namedata=$1
checkfile=$2
result_data=$3
today="$(date +%Y%m%d)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu
echo ${Riyoushaid} > ${tmp}-riyoushaid

# SHISETSU_RIYOSHA_STATUSの準備
awk '$(NF-2)!=9' ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
# 1:施設id 2:建屋 3:フロア 4:ユニット 5:部屋番号 6:利用者id
join0 key=1 $tmp-shisetsu                                    |
# ケアだけ。
join0 key=2 <(echo "02")                                     |
awk '$8>="'${today}'"'                   > $tmp-riyosha_status
# ユニットマスタの準備
awk '$(NF-2)!=9' ${home_dir}/TBL/SHISETSU_MASTER/UNIT_NAME   |
self 1 2                                                     > $tmp-unit_master

# 利用者マスタの準備
awk '$(NF-2)!=9' ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER   |
self 1 2 3       > $tmp-riyosha_master


[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------

if [ "$MODE" = "init" ];then
# nameをクリアする
  dispFloor=$(self 3 $tmp-riyosha_status |
          LANG=C sort -u | head -n1)
  dispUnit=$(awk '$3=="'${dispFloor}'"{print $4}' $tmp-riyosha_status |
         LANG=C sort -u | head -n1)
else
  [ -z "${dispFloor}" -o "${dispFloor}" = "_" ] && dispFloor=${floor}
  [ -z "${dispUnit}" -o "${dispUnit}" = "_" ] && dispUnit=${unit}
fi

# 利用者名の取得
if [ -n "${Riyoushaid}" -a "${Riyoushaid}" != "_" ];then
  cat $tmp-riyosha_status                                           |
# 1:施設id 2:建屋 3:フロア 4:ユニット 5:部屋番号 6:利用者id
  awk '$3=="'${dispFloor}'" && $4=="'${dispUnit}'" && $5=="'${room_select}'"'                 |
  self 6                                                            |
  LANG=C sort -k1,1                                                 |
  join1 key=1 $tmp-riyosha_master                                   |
  LANG=C sort -k3,3 |
  delf 3 |
  awk '{print $0,"'${Riyoushaid}'"}'                              |
# 1:RIYOSHA_CODE 2:RIYOSHA_NAME 3:riyosha_name
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'   |
  LANG=C sort -k1,2 -u                                             |
  sed 's/###SPACE###/　/g'                                         > ${tmp}-riyosha_name
else
  echo '_ 選択してください' > $tmp-riyosha_header
  cat $tmp-riyosha_status                                           |
# 1:施設id 2:建屋 3:フロア 4:ユニット 5:部屋番号 6:利用者id
  awk '$3=="'${dispFloor}'" && $4=="'${dispUnit}'" && $5=="'${room_select}'"'                 |
  self 6                                                            |
  LANG=C sort -k1,1                                                 |
  join1 key=1 $tmp-riyosha_master                                   |
  LANG=C sort -k3,3 |
  awk '{print $1,$2,""}'                                               |
  cat $tmp-riyosha_header -                                         |
  sed 's/###SPACE###/　/g'                                          > ${tmp}-riyosha_name
fi
# フロアの取得
if [ -n "${dispFloor}" -a "${dispFloor}" != "_" ];then
# 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  self 3 $tmp-riyosha_status                                   |
  LANG=C sort -u -k1,1n                                        |
  awk '{print $0,"'${dispFloor}'"}'                            |
# 1:FLOOR_CODE 2:floor_name
  awk '{if($1==$2){print $1,$1"F","selected"}else{print $1,$1"F",""}}'   > ${tmp}-floor_name
else
# 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  self 3 $tmp-riyosha_status                                   |
  LANG=C sort -u -k1,1n                                        |
  awk '{print $1,$1"F"}'                                       > ${tmp}-floor_name
fi

# ユニットの取得
if [ -n "${dispUnit}" -a "${dispUnit}" != "_" ];then
# 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  awk '$3=="'${dispFloor}'"' $tmp-riyosha_status               |
  self 4                                                       |
# 1:UNIT_CODE 2:UNIT_NAME
  LANG=C sort -u -k1,1                                         |
  join1 key=1 $tmp-unit_master                                 |
  awk '{print $0,"'${dispUnit}'"}'                                 |
# 1:UNTI_CODE 2:unit_name
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'   > ${tmp}-unit_name
else
# 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  self 4 $tmp-riyosha_status                                   |
# 1:UNIT_CODE 2:UNIT_NAME
  LANG=C sort -u -k1,1                                         |
  join1 key=1 $tmp-unit_master                                 > $tmp-unit_name
fi

  # room
echo "---" > $tmp-room_select
cat $tmp-riyosha_status                            |
if [ -z "${dispFloor}" -o "${dispFloor}" = "_" ] ; then
   cat -
else
   awk '$3=="'${dispFloor}'"'
fi |
if [ -z "${dispUnit}" -o "${dispUnit}" = "_" ] ; then
   cat -
else
   awk '$4=="'${dispUnit}'"'
fi |
self 5                                                       |
cat $tmp-room_select - |
awk '{print $1,$1,"'${room_select}'"}'                       |
awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'   > $tmp-room



# ログインUSER名と施設の取得（仮）
awk '$(NF-2)!=9' ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
tee $tmp-user_mst                                  |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst


cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

# 施設と従業員の紐付け
# 1:施設ID 2:ユーザID 3: 4: 5:
cp $tmp-user_mst $work_dir/user
cp $tmp-shisetsu $work_dir/shisetsu

# 退職者対応
awk '$(NF-2)!=9' ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_KIHON    |
LANG=C sort -k1,1                                   |
self 1                                             > $tmp-yuko-jyuugyouin

# ケアマネ抽出
#cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU |
# 施設で絞込み + 特別所属（20140602）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU ${home_dir}/TBL/JYUUGYOUIN_MASTER/EXTRA_USER_SHISETSU |
LANG=C sort -k2,2                                   |
join1 key=2 ${tmp}-shisetsu                         |
awk '$(NF-3)!="_"{print $1}'                             |
LANG=C sort -k1,1                                   |
join1 key=1 $tmp-user_mst                           |
join0 key=1 $tmp-yuko-jyuugyouin                   > $tmp-caremanager_list

# 元号
cat ${home_dir}/TBL/ZEIRITSU_GENGOU_MASTER/GENGOU  |
LANG=C sort -k3,3nr                                |
awk '$5!="9"{print $2,substr($3,1,4)-1}'        > $tmp-gengou_mst

# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou





[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------
moveScreen=""
#--------------------------------------------------------------
### モードによる表示の分岐
case "${MODE}" in

  # 初期表示
  init | to_refresh)
    if [ "$(gyo ${result_data})" != 0 ] ; then
      cat ${result_data} > $tmp-listdata
    else
      : > $tmp-listdata
    fi
  ;;

  # 検索結果
  search)
    if [ "$(gyo ${result_data})" != 0 ] ; then
      cat ${result_data} > $tmp-listdata
    else
      : > $tmp-listdata
    fi
  ;;

  # 更新
  regist)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
    : > $tmp-listdata
  ;;
  # 削除
  delete)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="削除完了"
      moveScreen="javascript:document.frmBack.submit();"
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
    : > $tmp-listdata
  ;;
esac


# 届出日取得
# 初回作成日は一回でも作るとそれが残り続けるので、クリアしても
# 残る。
#--------------------------------------------------------------
dispShokaiSakuseiDate=""
#--------------------------------------------------------------
if [ -s ${data_dir}/CARE_KAIGOSAKUSEI/SHISETSU_CAREPLAN/${Riyoushaid}/TODOKEDEBI ]; then
  # 初回作成日の取得
  cat ${data_dir}/CARE_KAIGOSAKUSEI/SHISETSU_CAREPLAN/${Riyoushaid}/TODOKEDEBI |
  #--------------------------------------------------------------
  # 利用者ID
  awk '$1=="'${Riyoushaid}'"{print $2,$3}'   |
  awk '{print "\""$2"\""}'                > $tmp-shokai_sakuseidate
  dispShokaiSakuseiDate=$(self 1 $tmp-shokai_sakuseidate)
fi




#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
fi
#--------------------------------------------------------------

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${tmp}-listdata)
#--------------------------------------------------------

# 日付の設定
[ -z "${hdKeikakuSakuseiDate}" -o "${hdKeikakuSakuseiDate}" = "_" ] && hdKeikakuSakuseiDate=$(mdate today | self 1)

KeikakuSakuseiDate=$(echo "${hdKeikakuSakuseiDate}" | awk '{print substr($1,1,4)"-"substr($1,5,2)"-"substr($1,7,2)}')

curday=${hdKeikakuSakuseiDate}

# 計画作成日は支援認定前に作られることが多いので、検索日付をセット（2014/6/2）
# 指摘により計画作成日の１ヶ月後に変更（2014/7/14）
# １ヵ月後をなしに
#echo "$hdKeikakuSakuseiDate" > $tmp-KeikakuSakuseiDate
#hdKeikakuSakuseiMonth=$(awk '{print substr($1,1,6)}' $tmp-KeikakuSakuseiDate)
#curday=$(mdate ${hdKeikakuSakuseiMonth}m/+0)$(awk '{print substr($1,7,2)}' $tmp-KeikakuSakuseiDate)

# 入居者情報(仮)
# 介護保険情報
# 1:利用者ID            2:介護度              3:保険者名                    4:認定年和暦              5:認定年
# 6:認定月              7:認定日              8:認定年月日西暦              9:認定有効期間開始年和暦  10:認定有効期間開始年
# 11:認定有効期間開始月 12:認定有効期間開始日 13:認定有効期間開始年月日西暦     14:認定有効期間終了年和暦 15:認定有効期間終了年
# 16:認定有効期間終了月 17:認定有効期間終了日 18:認定有効期間終了年月日西暦
self 1 3 5 14/28 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN   |
#self 1 3 5 14/28 ${home_dir}/CAREPLAN/TMP/RIYOUSHA_KAIGOHOKEN   |
awk '$13<="'${curday}'"&&$18>="'${curday}'"'                  |
getlast 1 1                                                   |
# 1:利用者ID               2:介護度 3:保険者名 4:認定年月日 5:有効期間開始年月日
# 6:認定有効期間終了年月日
self 1/3 8 13 18                        > $tmp-riyousha_kaigohoken

# 元号マスタ
awk '$(NF-2)!="9"' ${home_dir}/TBL/ZEIRITSU_GENGOU_MASTER/GENGOU       |
self 1/4                                           > $tmp-gengou_master
self 1 2 $tmp-gengou_master                        > $tmp-gengou_master2

cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KIHON          |
join1 key=1 ${tmp}-riyoushaid                      |
# 1:利用者名 2:誕生日和暦 3:誕生日年 4:誕生日月 5:誕生日
# 6:住所
self 2 5 6 7 8 14                                  |
LANG=C sort -k2,2                                  |
# 1:利用者名 2:誕生日和暦 3:和暦名 4:和暦開始 5:和暦終了
# 6:誕生日年 7:誕生日月   8:誕生日 9:住所
join1 key=2 $tmp-gengou_master -        |
# 1:利用者名 2:和暦名 3:誕生日年 4:誕生日月 5:誕生日
# 6:住所
self 1 3 6 7 8 9                                   |
awk '{print $1,$2$3"年"$4"月"$5"日",$6}'                       > ${tmp}-riyousha_kihon
Riyoushamei=$(self 1 ${tmp}-riyousha_kihon)
Birthdate=$(self 2 ${tmp}-riyousha_kihon)

# 住所
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN   |
awk '$23<="'${curday}'"&&$28>="'${curday}'"&&$1=="'$Riyoushaid'"'        |
getlast 1 1                                         |
self 13                                             > $tmp-jusho

dispJusho=$(self 1 $tmp-jusho)

# 介護保険関連情報設定
cat $tmp-riyousha_kaigohoken                       |
join1 key=1 ${tmp}-riyoushaid                      |
delf 1                                             |
# 1:介護度 2:保険者名 3:認定年月日 4:認定開始期間年月日 5:認定終了期間年月日
awk '{print $1,$2,substr($3,1,4)"/"substr($3,5,2)"/"substr($3,7,2),substr($4,1,4)"/"substr($4,5,2)"/"substr($4,7,2),substr($5,1,4)"/"substr($5,5,2)"/"substr($5,7,2)}'     > ${tmp}-riyousha_kaigo


dispKeikakuSakuseiDate=$(echo $hdKeikakuSakuseiDate | awk '$1!=""{print "\""substr($1,1,4)"-"substr($1,5,2)"-"substr($1,7,2)"\""}')
# 変更日手入力可対応（2014/6/13）
if [ "$MODE" = "regist" ] ; then
  if [ -z "$hdKeikakuHenkouDate" -o "$hdKeikakuHenkouDate" = "_" ] ; then
    dispKeikakuHenkouDate=$(echo $hdKeikakuSakuseiDate | awk '$1!=""{print "\""substr($1,1,4)"-"substr($1,5,2)"-"substr($1,7,2)"\""}')
    KeikakuHenkouDate=$(echo $hdKeikakuSakuseiDate)
  else
    dispKeikakuHenkouDate=$(echo $hdKeikakuHenkouDate | awk '$1!=""{print "\""substr($1,1,4)"-"substr($1,5,2)"-"substr($1,7,2)"\""}')
    KeikakuHenkouDate=$(echo $hdKeikakuHenkouDate)
  fi
else
  if [ -z "$KeikakuHenkouDate" -o "$KeikakuHenkouDate" = "_" ] ; then
    KeikakuHenkouDate=$(echo $hdKeikakuSakuseiDate)
  fi

  dispKeikakuHenkouDate=$(echo $KeikakuHenkouDate | awk '$1!=""{print "\""substr($1,1,4)"-"substr($1,5,2)"-"substr($1,7,2)"\""}')
  KeikakuHenkouDate=$(echo $KeikakuHenkouDate)
fi

# 和暦変換（変更日）
cat $tmp-gengou_master |
awk '$3<="'$hdKeikakuSakuseiDate'"&&"'$hdKeikakuSakuseiDate'"<=$4' |
awk '{print $2,"'$hdKeikakuSakuseiDate'",substr($3,1,4)-1}'    |
awk '{print $1,substr($2,1,4)-$3,int(substr($2,5,2)),int(substr($2,7,2))}'  |
awk '{print $1$2"年"$3"月"$4"日"}'                          > $tmp-sakusei_date

warekiKeikakuSakuseiDate=$(cat $tmp-sakusei_date)


# 仮ＣＧＩ設定
echo "KAIGO_KANGO_YOUYAKU.CGI" > $tmp-cgi
# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
awk '$2=="0000"||$2=="'$shisetsu'"'         |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -k7,7                                          |
join0 key=7 $tmp-cgi                                       > ${tmp}-kengenlist

select_riyosha_id=${Riyoushaid}
[ -z "${select_riyosha_id}" -o "${select_riyosha_id}" = "_" ] && select_riyosha_id=$(self 1 $tmp-riyosha_name | head -1)

if [ "${MODE}" != "to_refresh" ] ; then
awk '$(NF-2)!="9"{print $2}' ${pompa_dir}/SHISETSU_CAREPLAN/${select_riyosha_id}/CARE_KAIGO_KEIKAKU |
LANG=C sort -k1r,1r |
awk '{if($1=="'${Rireki}'"){print $1,substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2),"selected"}else{print $1,substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2),""};}' > $tmp-rireki
else
  :> $tmp-rireki
fi

cat << FIN | sed 's/ _$/ @/g' > $tmp-calsed
###RIYOUSHAID### $Riyoushaid
###USERID### $userid
###RIYOUSHAMEI### $Riyoushamei
###BIRTHDATE### $Birthdate
###KEIKAKUSAKUSEIDATE### $dispKeikakuSakuseiDate
###WAREKIKEIKAKUSAKUSEIDATE### $warekiKeikakuSakuseiDate
###HDKEIKAKUSAKUSEIDATE### $hdKeikakuSakuseiDate
###SHOKAISAKUSEIDATE### $dispShokaiSakuseiDate
###NINTEI### $Nintei
###JUSHO### $dispJusho
###SHOKAISAKUSEI### $ShokaiSakusei
###SHOUKAISAKUSEI### $ShoukaiSakusei
###KEIZOKUSAKUSEI### $KeizokuSakusei
###SLSERVICEJIGYOUSHA### $slServiceJigyousha
###SLSERVICESAKUSEISHA### $slServiceSakuseisha
###YOKAIGOJOUTAIKUBUN### $YoukaigoJoutaiKubun
###RIYOUSHAIKOU### $RiyoushaIkou
###SHINSAKAIIKEN### $ShinsakaiIken
###SOUGOUHOUSHIN### $SougouHoushin
###SLSANTEIRIYU### $slSanteiRiyu
###TXTSANTEISONOTA### $txtSanteiSonota
###KEIKAKUHENKOUDATE### $dispKeikakuHenkouDate
###HDKEIKAKUHENKOUDATE### $KeikakuHenkouDate
###PASSWORD### $password
###SHISETSUID### $shisetsu
###SELECT_SHISETSU### $select_shisetsu
###MOVE### $moveScreen
###HDSHISETSUKENSAKU### $hdShisetsuKensaku
###HDCAREMANAGERKENSAKU### $hdCaremanagerKensaku
FIN

# 訪問介護サービス事業所マスタ
cat ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER   |
# 1:ID          2:事業所名  3:電話番某      4:住所   5:金融コード
# 6:支店コード  7:口座区分  8:口座番号      9:口座名 10:郵便番号
# 11:有効フラグ 12:処理時刻 13:ユーザコード
awk '$11!="9"'                                      |
LANG=C sort -k1,1                                   |
self 1 2 4                                 > $tmp-kyotaku_master

#-----------------------------------------------------------
# 登録・印刷ボタンの表示
# 施設名はログインユーザーの権限のある施設を取得
self 9 $tmp-kengenlist |
LANG=C sort -k1,1      |
tail -1                > $tmp-dispkengen

#############################
####　テスト設定
#############################
echo "3" > $tmp-dispkengen

# 権限がない人は新規登録や出力が出来ない
if [ $(cat $tmp-dispkengen) = "3" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### @"   >> $tmp-calsed
elif [ $(cat $tmp-dispkengen) = "2" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
else
  echo "###SHINKITOUROKUDISP### none" >> $tmp-calsed
  echo "###TOUROKUDISP### none" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
fi

cat ${checkfile} >> $tmp-calsed

cat $tmp-calsed      |
sed 's/\\n/###KAIGYO###/g'     >  $tmp-calsed_kaigyozumi

# HTMLの作成
cat ${html_dir}/CARE_KAIGO_KEIKAKU1.html ${home_dir}/KYOUTSU/HTML/MENUBAR.html ${html_dir}/CARE_KAIGO_KEIKAKU2.html |
calsed -f $tmp-calsed_kaigyozumi - |
mojihame -l###USER__NAME### - ${tmp}-usermei |
mojihame -l###SHISETSU_TAISHOU### - ${tmp}-shisetsu_taishou |
mojihame -l###UNIT_NAME### - ${tmp}-unit_name |
mojihame -l###FLOOR_NAME### - ${tmp}-floor_name |
mojihame -l###ROOM_NAME### - ${tmp}-room |
mojihame -l###RIYOSHA_NAME### - ${tmp}-riyosha_name |
mojihame -l###RIREKI_SELECT### - ${tmp}-rireki |
mojihame -l###KAIGOHOKEN### - ${tmp}-riyousha_kaigo  |
mojihame -l###KYOTAKUMASTER### - $tmp-kyotaku_master |
mojihame -l###GENGOU### - $tmp-gengou_mst |
mojihame -l###CAREMANAGER### - $tmp-caremanager_list  |
sed 's/###KAIGYO###/\n/g'     |
sed 's/###SPACE###/ /g'       |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
cat -
#--------------------------------------------------------------
#formhame -d"_" - ${namedata}

rm -f ${tmp}-*
exit 0
