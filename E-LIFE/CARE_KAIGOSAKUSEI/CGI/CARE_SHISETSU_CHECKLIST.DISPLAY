#!/bin/bash
#
# CARE_SHISETSU_CHECKLIST.DISPLAY : チェックリスト表示
#
# Usage : CARE_SHISETSU_CHECKLIST.DISPLAY
#
# Written by R.suzuki(HANDS.LAB) Date:2015/09/23

# ログ
source /home/hands/E-LIFE/CARE_KAIGOSAKUSEI/CGI/CARE_KAIGOSAKUSEI.INI &> /dev/null
source /home/hands/E-LIFE/CARE_KAIGOSAKUSEI/CGI/CARE_SHISETSU_CHECKLIST.GET_RIYOSHA.func &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*

# ディレクトリ設定
test_tbl_dir="${home_dir}/TEST/TBL"
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

# 変数の定義
namedata=$1
checkfile=$2
result_data=$3
opt_data=$4
today="$(date +%Y%m%d)"


#--------------------------------------------------------
# 前提処理のCGIがエラーの場合、メッセージ取得
#--------------------------------------------------------
# 

ichiran_disp=1

result=$(awk '$1=="result"{print $2}' ${result_data})
if [ "${result}" = "ng" ] ; then
     message=$(awk '$1=="message"{print $2}' ${result_data})
     ichiran_disp=0
fi



#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu
echo ${Riyoushaid} > ${tmp}-riyoushaid


: <<'#__COMENTOUT_DEL2__'

# 権限でボタンの使用可否
cat /home/hands/E-LIFE/SYSTEM_SETTEI/POMPA/KENGEN_KANRI/USER_KENGEN/${userid}.USER_KENGEN |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
awk '$2=="0000" || $2=="'${shisetsu}'"'                                                    |
#awk '$7=="CARE_SHISETSU_CHECKLIST.CGI"{print $1,$9}'                                                                |
awk '$7=="CAREPLAN_MENU.CGI"{print $1,$9}'                                                                |

LANG=C sort -u -k2,2n                                                                       |
getlast 1 1                                                                                |
self 2                                                                                     > $tmp-btn_kengen

[ "$(cat $tmp-btn_kengen)" = "3" -o "$(cat $tmp-btn_kengen)" = "2" ] && echo "###BTN_SEIGYO###" " " >> $tmp-calsed
[ "$(cat $tmp-btn_kengen)" = "1" -o "$(cat $tmp-btn_kengen)" = "0" ] && echo "###BTN_SEIGYO###" "none" >> $tmp-calsed

[ "$(cat $tmp-btn_kengen)" = "3" ] && echo "###PRINT_BTN_SEIGYO###" " " >> $tmp-calsed
[ "$(cat $tmp-btn_kengen)" = "2" -o "$(cat $tmp-btn_kengen)" = "1" ] && echo "###PRINT_BTN_SEIGYO###" "none" >> $tmp-calsed

#__COMENTOUT_DEL2__


# ログインUSER名と施設の取得（仮）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst

cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

## 元号
# cat ${home_dir}/TBL/ZEIRITSU_GENGOU_MASTER/GENGOU  |
# LANG=C sort -k3,3nr                                |
# awk '$5!="9"{print $2,substr($3,1,4)-1}'        > $tmp-gengou_mst

# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou

# SHISETSU_TATEYA_FLOOR_ROOMのマスタ準備
echo $shisetsu > $tmp-shisetsu

: <<'#__COMENTOUT__'
# ユニットマスタの準備
awk '$(NF-2)!=9' ${tbl_dir}/SHISETSU_MASTER/UNIT_NAME        |
self 1 2                                                     > $tmp-unit_master

# 利用者マスタの準備
awk '$(NF-2)!=9' ${riyosha_dir}/RIYOUSHA_MASTER              |
self 1 2                                                     > $tmp-riyosha_master
awk '$(NF-2)!=9' ${riyosha_dir}/RIYOUSHA_MASTER              |
self 1 2 3                                                   > $tmp-riyosha_master_kana



# SHISETSU_RIYOSHA_STATUSの準備
awk '$1=="'$shisetsu'" && $(NF-2)!=9' ${riyosha_dir}/SHISETSU_RIYOUSHA_STATUS     |
# 1:施設id 2:建屋 3:フロア 4:ユニット 5:部屋番号 6:利用者id
#join0 key=1 $tmp-shisetsu                                    |
#if [ $shisetsu = "0001" ];then
#  join0 key=2 <(echo "02")
#else
#  join0 key=2 <(echo "00")
#fi |
#施設ケアなのでケア棟だけを対象
join0 key=2 <(echo "02") |
awk '$8>="'${today}'"'                > $tmp-riyosha_status

echo "_ 選択してください"                                           > $tmp-riyousya_hedder
if [ -n "${riyosha_name}" -a "${riyosha_name}" != "_" ];then
  cat $tmp-riyosha_status                                           |
# 1:施設id 2:建屋 3:フロア 4:ユニット 5:部屋番号 6:利用者id
  awk '$4=="'${unit}'"'                                             |
  self 6                                                            |
  LANG=C sort -k1,1                                                |
  join1 key=1 $tmp-riyosha_master_kana                                   |
  LANG=C sort -k3,3                                               |
  delf 3 |
  cat $tmp-riyousya_hedder -                                        |
  awk '{print $0,"'${riyosha_name}'"}'                              |
  # 1:RIYOSHA_CODE 2:RIYOSHA_NAME 3:riyosha_name
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'    |
  sed 's/###SPACE###/　/g'                                          > ${tmp}-riyosha_name
else
  cat $tmp-riyosha_status                                           |
  # 1:施設id 2:建屋 3:フロア 4:ユニット 5:部屋番号 6:利用者id
  awk '$4=="'${unit}'"'                                             |
  self 6                                                            |
  LANG=C sort -k1,1                                                |
  join1 key=1 $tmp-riyosha_master_kana                            |
  LANG=C sort -k3,3 |
  delf 3 |
  awk '{print $0,""}'                                               |
  cat $tmp-riyousya_hedder -                                        |
  sed 's/###SPACE###/　/g'>                                         ${tmp}-riyosha_name
fi
# フロアの取得
if [ -n "${floor}" -a "${floor}" != "_" ];then
  self 3 $tmp-riyosha_status                                   |
  LANG=C sort -u -k1,1n                                        |
  awk '{print $0,"'${floor}'"}'                                |
  # 1:FLOOR_CODE 2:floor_name
  awk '{if($1==$2){print $1,$1"F","selected"}else{print $1,$1"F",""}}'   > ${tmp}-floor_name
else
  # 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  self 3 $tmp-riyosha_status                                   |
  LANG=C sort -u -k1,1n                                        |
  awk '{print $1,$1"F"}'                                       > ${tmp}-floor_name
fi

# ユニットの取得
if [ -n "${unit}" -a "${unit}" != "_" ];then
  # 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  awk '$3=="'${floor}'"' $tmp-riyosha_status                   |
  self 4                                                       |
  # 1:UNIT_CODE 2:UNIT_NAME
  LANG=C sort -u -k1,1                                        |
  join1 key=1 $tmp-unit_master                                 |
  awk '{print $0,"'${unit}'"}'                                 |
  # 1:UNTI_CODE 2:unit_name
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'   > ${tmp}-unit_name
else
  # 1:施設id 2:建屋id 3:フロア 4:ユニットid 5:居室 6・・・
  self 4 $tmp-riyosha_status                                   |
  # 1:UNIT_CODE 2:UNIT_NAME
  LANG=C sort -u -k1,1                                        |
  join1 key=1 $tmp-unit_master                                 > $tmp-unit_name
fi

# 居室
echo "---" > $tmp-room_header
cat $tmp-riyosha_status                                   |
# 1:施設コード 2:建屋   3:フロア 4:ユニット   5:居室
# 6:利用者ID   7:入居日 8:退去日 9:有効フラグ 10:更新日
# 11:更新者
awk '$3=="'${floor}'"&&$4=="'${unit}'"{print $5}'         |
LANG=C sort -u                                            |
cat $tmp-room_header - |
awk '{print $1,$1,"'${room_select}'"}'                          |
awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,"@"}}' > $tmp-room_select


# 本日の日付
curday=$(mdate today | self 1)

# 介護保険情報
# 1:利用者ID            2:介護度              3:保険者名                    4:認定年和暦              5:認定年
# 6:認定月              7:認定日              8:認定年月日西暦              9:認定有効期間開始年和暦  10:認定有効期間開始年
# 11:認定有効期間開始月 12:認定有効期間開始日 13:認定有効期間開始年月日西暦     14:認定有効期間終了年和暦 15:認定有効期間終了年
# 16:認定有効期間終了月 17:認定有効期間終了日 18:認定有効期間終了年月日西暦
self 1 3 5 14/28 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN   |
#self 1 3 5 14/28 ${home_dir}/CAREPLAN/TMP/RIYOUSHA_KAIGOHOKEN   |
awk '$13<="'${curday}'"&&$18>="'${curday}'"'                  |
# 1:利用者ID               2:介護度 3:保険者名 4:認定年月日 5:有効期間開始年月日
# 6:認定有効期間終了年月日
self 1/3 8 13 18                        > $tmp-riyousha_kaigohoken

cp $tmp-riyousha_kaigohoken $work_dir/riyousha_kaigohoken

#__COMENTOUT__


# 元号マスタ
self 1/4 ${home_dir}/TBL/ZEIRITSU_GENGOU_MASTER/GENGOU                  > $tmp-gengou_master
self 1 2 $tmp-gengou_master                        > $tmp-gengou_master2

cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KIHON          |
join1 key=1 ${tmp}-riyoushaid                      |
# 1:利用者名 2:誕生日和暦 3:誕生日年 4:誕生日月 5:誕生日
# 6:住所
self 2 5 6 7 8 14                                  |
LANG=C sort -k2,2                                  |
# 1:利用者名 2:誕生日和暦 3:和暦名 4:和暦開始 5:和暦終了
# 6:誕生日年 7:誕生日月   8:誕生日 9:住所
join1 key=2 $tmp-gengou_master -        |
# 1:利用者名 2:和暦名 3:誕生日年 4:誕生日月 5:誕生日
# 6:住所
self 1 3 6 7 8 9                                   |
awk '{print $1,$2$3"年"$4"月"$5"日",$6}'                       > ${tmp}-riyousha_kihon
Riyoushamei=$(self 1 ${tmp}-riyousha_kihon)



[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------


: <<'#__COMENTOUT__DEL3'
#######################################################################################
# formhame前の実態参照変換
calsed "&" "&amp;" ${namefile}                      |
calsed "<" "&lt;"                                   |
calsed ">" "&gt;"                                   |
calsed "\"" "&quot;"                                |
# formhame前にキーワードが　"_"　のみの場合、消去
awk '{if($1~/SEARCH_WORD/){if($2~/^_$/){$2=""};}print}'  |
# formhame前にキーワードが検索ボックスの空白を "_"から" "に戻す
awk '{if($1~/SEARCH_WORD/){gsub(/_/," ",$2)};print}'     > $tmp-namefile

#######################################################################################

#######################################################################################
# namefileの再構成

cat <<- FIN > ${tmp}-namefile
MODE ${MODE}
FIN
#######################################################################################
#__COMENTOUT__DEL3





#--------------------------------------------------------------
### モードによる表示の分岐
case "${MODE}" in

  # 初期表示
  init | to_reset)
    if [ "$(gyo ${result_data})" != 0 ] ; then
       cat $result_data > $tmp-listdata
    else
    # 空のリストデータを作成する
       : > $tmp-listdata
    fi
  ;;

  # 検索結果
  search | search_room)
    if [ "$(gyo ${result_data})" != 0 ] ; then
      cat ${result_data}        > $tmp-listdata
     # 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
     # 6:最終更新者
#      LANG=C sort -k6,6nr       |
#      self 1 2 3 4 5            |
#      rank                      |
#      head -10                  > $tmp-listdata
    else
      : > $tmp-listdata
    fi
  ;;

  # 更新
  regist)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
    
    if [ "$(gyo ${opt_data})" != 0 ] ; then
      cat ${opt_data} > $tmp-listdata
    else
     : > $tmp-listdata
    fi
  ;;
esac

#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
fi
#--------------------------------------------------------------

# 基本チェックデータ取得
awk '$1=="k"' $tmp-listdata    |
delf 1           > $tmp-listdata_kihon

# チェックリストデータ取得
awk '$1=="l"{print $4,$5,$6,$7,$8,$9}' $tmp-listdata    > $tmp-listdata_list

if [ "$(gyo $tmp-listdata_list)" = "0" ] ; then
    cat ${home_dir}/TBL/CONFIG/CHECKLIST_CARE_SHISETSU_KOUMOKU           |
# 1:チェックリストID 2:チェック内容 3:チェックカテゴリ値 4:YES時の値 5:No時の値
    awk '{print $0,"_"}'                                > $tmp-listdata_list
fi

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source $tmp-listdata_kihon)
#--------------------------------------------------------

[ -z "${KihonCheckListShinchou}" -o "${KihonCheckListShinchou}" = "_" ] && KihonCheckListShinchou=@
[ -z "${KihonCheckListTaiju}" -o "${KihonCheckListTaiju}" = "_" ] && KihonCheckListTaiju=@
[ -z "${KihonCheckListBMI}" -o "${KihonCheckListBMI}" = "_" ] && KihonCheckListBMI=0
[ -z "${hdKinyubi}" -o "${hdKinyubi}" = "_" ] && hdKinyubi=$(mdate today | self 1)
# 日付表示処理
#[ -z "${Kinyubi}" -o "${Kinyubi}" = "_" ] && Kinyubi=$(mdate today | self 1 | awk '{print substr($1,1,4),substr($1,5,2),substr($1,7,2)}' | 1bai 2 3 | awk '{print $1"年"$2"月"$3"日"}')
if [ -z "${Kinyubi}" -o "${Kinyubi}" = "_" ]  ; then
   Kinyubi=$(mdate today | self 1 | awk '{print substr($1,1,4),substr($1,5,2),substr($1,7,2)}'  | awk '{print $1"-"$2"-"$3}')
else
:
   Kinyubi=$(echo ${Kinyubi} | sed 's/\//-/g')
fi

#dispKinyubi=$(echo $hdKinyubi | awk '{print substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2)}')


#echo "CARE_SHISETSU_CHECKLIST.CGI" > $tmp-cgi
#暫定値
echo "CAREPLAN_MENU.CGI" > $tmp-cgi
# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
awk '$2=="0000"||$2=="'$shisetsu'"'         |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -k7,7                                          |
join0 key=7 $tmp-cgi                                       > ${tmp}-kengenlist


#--------------------------------------------------------------
#過去履歴一覧
# チェックリスト基本ファイルの取得

if [ "$riyosha_name" != ""  -a  "$riyosha_name" != "_" ] ; then

  if [  -e ${pompa_dir}/CHECKLIST/${Riyoushaid}/KIHONCHECK_CARE_SHISETSU ] ; then

    # 利用者ID
    awk '$1=="'${riyosha_name}'"'  ${pompa_dir}/CHECKLIST/${Riyoushaid}/KIHONCHECK_CARE_SHISETSU   |
    # 1:作成日（西暦） 2:作成日（和暦）
    self 2 3                 |
    LANG=C sort -k1,1nr         |
#  rank                        |
    # 1:作成日（西暦） 2:作成日（和暦）3:選択状態
    awk '{print $0,$1=="'$hdKinyubi'"?"selected":"" }'            > ${tmp}-checklist_rireki

  else
    : > ${tmp}-checklist_rireki
  fi

else
  : > ${tmp}-checklist_rireki

  ichiran_disp=0
fi

#利用者検索プルダウン作成
if [ -n "${riyosha_name}" -a "${riyosha_name}" != "_" ];then
  userlist_type="riyosha_name"
elif [ -n "${floor}" -a "${floor}" != "_" ];then
  userlist_type="floor"
elif [ -n "${unit}" -a "${unit}" != "_" ];then
  userlist_type="unit"
else
  userlist_type="init"
fi


#青山部品に変更
setRiyoushaData  $namedata $userlist_type
if [ $? != "0"  ] ;then

cat <<- FIN > $tmp-html2
<script type="text/javascript" language="javascript">
alert('${message}');
</script>
FIN

fi
#. ${home_dir}/COMMON/COMMON_002.func
#青山部品に変更


#if [ -f $tmp-riyosha ] ; then
#  Riyoushaid=$(awk '$3=="selected"' $tmp-riyosha | self 1 )
#else
#  Riyoushaid=""
#fi


cat << FIN | sed 's/ _$/ @/g' >> $tmp-calsed
###DROPDOWN_ACTIVE11### active
###LI_CARE_KAIGOSAKUSEI8### active
###RIYOUSHAID### $Riyoushaid
###RIYOUSHAMEI### $Riyoushamei
###KINYUBI### $Kinyubi
###HDKINYUBI### $hdKinyubi
###SHINCHOU###  $KihonCheckListShinchou
###TAIJU###     $KihonCheckListTaiju
###BMI###       $KihonCheckListBMI
###HDKEIKAKUSAKUSEIDATE###   $hdKeikakuSakuseiDate
###KEIKAKUSAKUSEIDATE### $KeikakuSakuseiDate
###USERID### $userid
###SHISETSUID### $shisetsu
###PASSWORD### $password
###SELECT_SHISETSU### $select_shisetsu
###HDKENSAKUDATE### $hdkensakudate
###HDSHISETSUKENSAKU### $hdShisetsuKensaku
###HDCAREMANAGERKENSAKU### $hdCaremanagerKensaku
###MODE### $MODE
FIN

#-----------------------------------------------------------
# 登録・印刷ボタンの表示
# 施設名はログインユーザーの権限のある施設を取得
self 9 $tmp-kengenlist |
LANG=C sort -k1,1      |
tail -1                > $tmp-dispkengen

# 権限がない人は新規登録や出力が出来ない
if [ $(cat $tmp-dispkengen) = "3" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### @"   >> $tmp-calsed
elif [ $(cat $tmp-dispkengen) = "2" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
else
  echo "###SHINKITOUROKUDISP### none" >> $tmp-calsed
  echo "###TOUROKUDISP### none" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
fi

#初期表示、利用者未選択時は一覧非表示
if [ "$ichiran_disp" = "0" ] ;then
  echo "###ICHIRANDISP### none"   >> $tmp-calsed
else
  echo "###ICHIRANDISP### @"   >> $tmp-calsed
fi


cat  ${checkfile} >> ${tmp}-calsed

cat $tmp-calsed      |
sed 's/\\n/###KAIGYO###/g'     >  $tmp-calsed_kaigyozumi





# HTMLの作成

cat ${html_dir}/CARE_SHISETSU_CHECKLIST1.html ${kyoutsu_dir}/MENUBAR.html ${html_dir}/CARE_SHISETSU_CHECKLIST2.html   |
calsed -f $tmp-calsed_kaigyozumi - |

mojihame -l###USER__NAME### - ${tmp}-usermei |
mojihame -l###SHISETSU_TAISHOU### - ${tmp}-shisetsu_taishou |
#mojihame -l###UNIT_NAME### - ${tmp}-unit_name |
#mojihame -l###FLOOR_NAME### - ${tmp}-floor_name |
#mojihame -l###ROOM_NAME### - ${tmp}-room_select |
#mojihame -l###RIYOSHA_NAME### - ${tmp}-riyosha_name |

#mojihame -l###KINKYU_RENRAKUSAKI### - ${tmp}-renrakusaki |
mojihame -l###USER_SHISETSU_NAME### - ${tmp}-user_shisetsu |
#mojihame -l###GENGOU### - $tmp-gengou_mst |
mojihame -l###CHECKLISTDATA### - $tmp-listdata_list  |
#過去履歴一覧
mojihame -l###CHECKLIST_RIREKI### - ${tmp}-checklist_rireki |
#利用者検索パーツ作成
mojihame -l###FLOOR_NAME### - $tmp-floor      |
mojihame -l###UNIT_NAME###  - $tmp-unit       |
mojihame -l###ROOM_NAME###  - $tmp-room       |
mojihame -l###RIYOSHA_NAME###  - $tmp-riyosha |



sed 's/###KAIGYO###/\n/g'     |
sed 's/###SPACE###/ /g'       |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
cat -
#--------------------------------------------------------------
#formhame -d"_" - ${namedata}

#rm -f ${tmp}-*
exit 0
