#!/bin/bash
#
# POP_WEEKPLAN_DAILYSERVICE_INPUT.TOUROKU : アセスメント登録
#
# Usage : POP_WEEKPLAN_DAILYSERVICE_INPUT.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/CARE_KAIGOSAKUSEI/CGI/CARE_KAIGOSAKUSEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
# 新ロック処理
source /home/hands/E-LIFE/COMMON/COMMON_001.func &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d).$$ ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
# 新ロック処理対応
  unlock_func  $tmp-target-table
#  cat $tmp-target-table |
#  while read table base ;do
#    rm -f $tmplock_dir/$table/$base.lock
#  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1


# デフォルト値セット
# 週間計画データ
DAILYSERVICE_ID="_"
TaishouYear="_"
TaishouMonth="_"
YOUBI="_"
START="_"
END="_"
NAIYOU="_"
DELETE="_"


#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
# 計画作成日
[ -z "${hdKeikakuSakuseiDate}" -o "${hdKeikakuSakuseiDate}" = "_" ] && error_exit "ケアプラン作成日が不明です"

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ -z "${DAILYSERVICE_ID}" -o "${DAILYSERVICE_ID}" = "_" ] ; then
last_no="1"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/WEEKPLAN/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/WEEKPLAN/${Riyoushaid}/DAILYSERVICE_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/WEEKPLAN/${Riyoushaid}/DAILYSERVICE_ID ] || echo "00001" > ${kanri_dir}/WEEKPLAN/${Riyoushaid}/DAILYSERVICE_ID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/WEEKPLAN/${Riyoushaid}/DAILYSERVICE_ID
get_no ${last_no} ${kanri_dir}/WEEKPLAN/${Riyoushaid}/DAILYSERVICE_ID > $tmp-id_all

# この場合取得するのは一つなのでそのまま変数に
DAILYSERVICE_ID=$(cat $tmp-id_all)
fi
#---------------------------------------------------------------

#--------------------------------------------------------------

# データ作成
# 削除の場合
yukoflg="1"
[ "$DELETE" = "1" ] && yukoflg="9"

# 1:利用者ID 2:ケアプラン作成日 3:データID 4:サービス開始時刻 5:内容
#echo "$Riyoushaid" "$TaishouYear" "$TaishouMonth" "$DAILYSERVICE_ID" "$START_DAILY" "$NAIYOU_DAILY" > ${tmp}-weekly_data
echo "$Riyoushaid" "$hdKeikakuSakuseiDate" "$DAILYSERVICE_ID" "$START_DAILY" "$NAIYOU_DAILY" > ${tmp}-weekly_data

# 1:ログインユーザ 2:更新日時
echo "$yukoflg" "${sdaytime}" "${USER_ID}" > ${tmp}-format

ycat ${tmp}-weekly_data ${tmp}-format > ${tmp}-weekly_data_input



#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
SHISETSU_CAREPLAN/${Riyoushaid}/WEEKPLAN_DAILYSERVICE   WEEKPLAN_DAILYSERVICE 1
FIN

input_detail_dir=WEEKPLAN/${Riyoushaid}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
weekly_data WEEKPLAN_DAILYSERVICE 3 7 8 ${pompa_dir}/SHISETSU_CAREPLAN/${Riyoushaid} ${input_dir}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
# 新ロック処理対応
filelock_func $tmp-target-table 1 3 10
#エラー時処理　※ロックファイル未作成なのでここではロック解除しない。
[ $? -ne 0 ] && error_exit "ロック処理失敗"

#cat $tmp-target-table |
#while read table base ;do
#   mkdir -p $tmplock_dir/$table
#   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
#   [ $? -ne 0 ] && :> $tmp-err
#   [ -e $tmp-err ] && break;
#: ; done

#[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'$Riyoushaid'"||$2!="'$hdShokaiSakuseidate'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
# 新ロック処理対応
unlock_func  $tmp-target-table
#cat $tmp-target-table |
#while read table base ;do
#  rm -f $tmplock_dir/$table/$base.lock
#: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
