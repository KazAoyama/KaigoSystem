#!/bin/bash
#
# POP_KOJINJYOUHOU_SHOUSAI_KAIGOHOKEN.TOUROKU
# 個人情報詳細　口座POPUP
#
# Written by E.Okuda 2013/12/16

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/UNEI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d%H%M%S"); set -xv

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/UNEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
pompa_dir="${app_dir}/POMPA/RIYOUSHA"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/UNEI/KANRI/RIYOUSHA"
data_dir="/DATA/E-LIFE/UNEI/RIYOUSHA"
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "result ng"
  echo "message ${message}"
  rm -f $tmp-*
  exit 1
}

function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
#eval $(name-source ${namedata})
name-source $namedata > $tmp-source
source $tmp-source
#--------------------------------------------------------------
#--------------------------------------------------------------
# 利用者番号
  MODE="$(nameread "MODE" ${namedata})"
  RIYOUSHAID="$(nameread "RIYOUSHAID" ${namedata})"
  RIYOUSHAKYOTAKUID="$(nameread "RIYOUSHAKYOTAKUID" ${namedata})"

  HokenShurui="$(nameread  "HokenShurui" $namedata)"
  HokenName="$(nameread  "HokenName" $namedata)"
  HokenshaBangou="$(nameread  "HokenshaBangou" $namedata)"
  KigouBangou="$(nameread  "KigouBangou" $namedata)"
  JyukyuushaBangou="$(nameread  "JyukyuushaBangou" $namedata)"
  ShikakuGengou="$(nameread  "ShikakuGengou" $namedata)"
  ShikakuYear="$(nameread  "ShikakuYear" $namedata)"
  ShikakuMonth="$(nameread  "ShikakuMonth" $namedata)"
  ShikakuDay="$(nameread  "ShikakuDay" $namedata)"
  YuukoukigenToGengou="$(nameread  "YuukoukigenToGengou" $namedata)"
  YuukoukigenToYear="$(nameread  "YuukoukigenToYear" $namedata)"
  YuukoukigenToMonth="$(nameread  "YuukoukigenToMonth" $namedata)"
  YuukoukigenToDay="$(nameread  "YuukoukigenToDay" $namedata)"
  HukushiIryouName="$(nameread  "HukushiIryouName" $namedata)"
  [ -z "${HokenName}" -o "${HokenName}" = "_" ] && HokenName="_"

#----------------------
# モードの区分け
#-----------------------
case "${MODE}" in
   touroku)

# 入力データのチェック
#
  [ -z "${RIYOUSHAID}" -o "${RIYOUSHAID}" = "_" ] && error_exit "利用者データが異常です。"
  [ -z "${HokenShurui}" -o "${HokenShurui}" = "_" ] && error_exit "保険種類を選択してください。"
#  [ -z "${HokenName}" -o "${HokenName}" = "_" ] && error_exit "医療保健名を入力してください。"
# [ -z "${HokenshaBangou}" -o "${HokenshaBangou}" = "_" ] && error_exit "保険者番号を入力してください。"
# [ -z "${KigouBangou}" -o "${KigouBangou}" = "_" ] && error_exit "記号番号を入力してください。"
#  [ -z "${JyukyuushaBangou}" -o "${JyukyuushaBangou}" = "_" ] && error_exit "受給者番号を入力してください。"

# 保険番号チェック
  echo "${HokenshaBangou}"  |
  awk '$1!="_"{print $0}'   |
  awk '$1!~/^[0-9]*$/' > $tmp-hokenshabangou_error
  
 [ -s $tmp-hokenshabangou_error ] && error_exit "保険者番号の値が不正です。(数字で入力してください。)"
#--------------------------------------------------------------
# 年月日

 [ "${ShikakuYear}" = "0" ] && error_exit "資格取得日に0年は入力できません。"
 [ "${ShikakuMonth}" = "0" ] && error_exit "資格取得日に0月は入力できません。"
 [ "${ShikakuDay}" = "0" ] && error_exit "資格取得日に0日は入力できません。"
 [ "${YuukoukigenToYear}" = "0" ] && error_exit "有効期限(至)に0年は入力できません。"
 [ "${YuukoukigenToMonth}" = "0" ] && error_exit "有効期限(至)に0月は入力できません。"
 [ "${YuukoukigenToDay}" = "0" ] && error_exit "有効期限(至)に0日は入力できません。"

 echo "${ShikakuYear}"   |
 awk '$1!="_"{print $0}' |
 awk '$1!~/^[0-9]*$/{print $0}'   > $tmp-shikaku_year_error

 echo "${ShikakuMonth}"  |
 awk '$1!="_"{print $0}' |
 awk '$1!~/^[0-9]*$/{print $0}'   > $tmp-shikaku_month_error
 echo "${ShikakuMonth}"  |
 awk '$1>12{print $0}'   |
 awk '$1!="_"{print $0}' > $tmp-shikaku_month_error2

 echo "${ShikakuDay}"    |
 awk '$1!="_"{print $0}' |
 awk '$1!~/^[0-9]*$/{print $0}'   > $tmp-shikaku_day_error
 echo "${ShikakuDay}"    |
 awk '$1>31{print $0}'          |
 awk '$1!="_"{print $0}'        > $tmp-shikaku_day_error2

 echo "${YuukoukigenToYear}" |
 awk '$1!="_"{print $0}' |
 awk '$1!~/^[0-9]*$/{print $0}'   > $tmp-yuukou_year_error

 echo "${YuukoukigenToMonth}" |
 awk '$1!="_"{print $0}'      |
 awk '$1!~/^[0-9]*$/{print $0}'   > $tmp-yuukou_month_error
 echo "${YuukoukigenToMonth}"  |
 awk '$1>12{print $0}'         |
 awk '$1!="_"{print $0}'       > $tmp-yuukou_month_error2

 echo "${YuukoukigenToDay}" |
 awk '$1!="_"{print $0}'    |
 awk '$1!~/^[0-9]*$/{print $0}'   > $tmp-yuukou_day_error
 echo "${YuukoukigenToDay}"    |
 awk '$1>31{print $0}'         |
 awk '$1!="_"{print $0}'       > $tmp-yuukou_day_error2

  [ -s $tmp-shikaku_year_error ] && error_exit "資格取得日の年号の値が不正です。"
  [ -s $tmp-shikaku_month_error ] && error_exit "資格取得日の月の値が不正です。"
  [ -s $tmp-shikaku_month_error2 ] && error_exit "資格取得日の月の値が不正です。"
  [ -s $tmp-shikaku_day_error ] && error_exit "資格取得日の日の値が不正です。"
  [ -s $tmp-shikaku_day_error2 ] && error_exit "資格取得日の日の値が不正です。"
  [ -s $tmp-yuukou_year_error ] && error_exit "有効期限(至)の年号の値が不正です。"
  [ -s $tmp-yuukou_month_error ] && error_exit "有効期限(至)の月の値が不正です。"
  [ -s $tmp-yuukou_month_error2 ] && error_exit "有効期限(至)の月の値が不正です。"
  [ -s $tmp-yuukou_day_error ] && error_exit "有効期限(至)の日の値が不正です。"
  [ -s $tmp-yuukou_day_error2 ] && error_exit "有効期限(至)の日の値が不正です。"
#---------------------
# 準備
#---------------------
if [ ! -z "${ShikakuYear}" -a "${ShikakuYear}" != "_" -a ! -z "${ShikakuMonth}" -a "${ShikakuMonth}" != "_" -a ! -z "${ShikakuDay}" -a "${ShikakuDay}" != "_" ] ; then
  
  [ ! -z "${ShikakuMonth}" -o "${ShikakuMonth}" != "_" ] && ShikakuMonth_Maezero="$(echo ${ShikakuMonth} | maezero 1.2)"
  [ ! -z "${ShikakuDay}" -o "${ShikakuDay}" != "_" ] && ShikakuDay_Maezero="$(echo ${ShikakuDay} | maezero 1.2)"


  cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/GENGOU |
  awk '$1=="'${ShikakuGengou}'"{print substr($3,1,4)}' |
  awk '{print $1+"'${ShikakuYear}'"-1}'     |
# 1:西暦年号
  awk '{print $1"'${ShikakuMonth_Maezero}'""'${ShikakuDay_Maezero}'"}' > $tmp-shikaku

  ShikakuSeireki="$(cat $tmp-shikaku | head -1 |self 1)"  

  isdate "${ShikakuSeireki}" |
  echo $?                    > $tmp-shikaku_check

   [ -s $tmp-shikaku_check -a $(cat $tmp-shikaku_check) = "1" ] && error_exit "資格取得日に存在しない年月日が入力されています。"

else
  ShikakuGengou="99"
  ShikakuSeireki="99999999"
fi

if [ ! -z "${YuukoukigenToYear}" -a "${YuukoukigenToYear}" != "_" -a ! -z "${YuukoukigenToMonth}" -a "${YuukoukigenToMonth}" != "_" -a ! -z "${YuukoukigenToDay}" -a "${YuukoukigenToDay}" != "_" ] ; then

    [ ! -z "${YuukoukigenToMonth}" -o "${YuukoukigenToMonth}" != "_" ] && YuukoukigenToMonth_Maezero="$(echo ${YuukoukigenToMonth} | maezero 1.2)"
  [ ! -z "${YuukoukigenToDay}" -o "${YuukoukigenToDay}" != "_" ] && YuukoukigenToDay_Maezero="$(echo ${YuukoukigenToDay} | maezero 1.2)"

  cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/GENGOU |
  awk '$1=="'${YuukoukigenToGengou}'"{print substr($3,1,4)}' |
  awk '{print $1+"'${YuukoukigenToYear}'"-1}'     |
# 1:西暦年号
  awk '{print $1"'${YuukoukigenToMonth_Maezero}'""'${YuukoukigenToDay_Maezero}'"}' > $tmp-yuukoukigen

  YuukouSeireki="$(cat $tmp-yuukoukigen | head -1 |self 1)"

  isdate "${YuukouSeireki}" |
  echo $?                    > $tmp-yuukou_check

   [ -s $tmp-yuukou_check -a $(cat $tmp-yuukou_check) = "1" ] && error_exit "有効期限(至)に存在しない年月日が入力されています。"

else
  YuukoukigenToGengou="99"
  YuukouSeireki="99999999"
fi

  [ "${ShikakuSeireki}" -gt "${YuukouSeireki}" ] && error_exit "資格取得日は有効期限(至)より前の日付を入力してください。"
#--------------------------------------------------------------

  # 連絡先IDが空(新規)の場合
  if [ -z "${IRYOUHOKENID}" -o "${IRYOUHOKENID}" = "_" ] ; then

  ## 連絡先IDの発番 ##i
   # 今回取得するID数
    last_no="1"

    mkdir -p ${kanri_dir}/RIYOUSHA_IRYOUHOKEN_ID
    [ -e ${kanri_dir}/RIYOUSHA_IRYOUHOKEN_ID/${RIYOUSHAID} ] || echo "001" > ${kanri_dir}/RIYOUSHA_IRYOUHOKEN_ID/${RIYOUSHAID}
    get_no ${last_no} ${kanri_dir}/RIYOUSHA_IRYOUHOKEN_ID/${RIYOUSHAID} > $tmp-riyousha_iryouhoken_id
    riyousha_iryouhoken_id="$(cat $tmp-riyousha_iryouhoken_id)"

  else
    riyousha_iryouhoken_id="$(echo "${IRYOUHOKENID}")"
  fi

#--------------------------------------------------------------
# 作成テーブル  利用者医療保健テーブル
#--------------------------------------------------------------

  ##########################
  # 1:利用者医療保健テーブル
  ##########################

  # 追加データの作成
  echo "${RIYOUSHAID}" "${riyousha_iryouhoken_id}" "${HokenShurui}" "${HokenName}" "${HokenshaBangou}" "${KigouBangou}" "${JyukyuushaBangou}" "${ShikakuGengou}" "${ShikakuYear}" "${ShikakuMonth}" "${ShikakuDay}" "${ShikakuSeireki}" "${YuukoukigenToGengou}" "${YuukoukigenToYear}" "${YuukoukigenToMonth}" "${YuukoukigenToDay}" "${YuukouSeireki}" "${HukushiIryouName}" "1" "${cur_time}" "${USERID}" > $tmp-riyousha_iryouhoken_input
# 1:利用者(入居者)ID  2:利用者医療保健ID    3:種類                4:医療保健名称      5:保険者番号
# 6:記号番号          7:受給者番号          8:資格取得日：元号    9:資格取得日：年    10:資格取得日：月
# 11:資格取得日：日   12:資格取得日：西暦   13:有効期限(至)：元号 14:有効期限(至)：年 15:有効期限(至)：月
# 16:有効期限(至)：日 17:有効期限(至)：西暦 18:福祉医療名         19:有効フラグ       20:更新日
# 21:USERID

#cp $tmp-* /home/hands/work/okuda

  [ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit
;;

  sakujyo)

  ##########################
  # 1:利用者医療保健テーブル
  ##########################

  cat ${pompa_dir}/RIYOUSHA_IRYOUHOKEN |
  awk '$1=="'${RIYOUSHAID}'"&&$2=="'${IRYOUHOKENID}'"{print $0}' |
  delf NF-2 NF-1 NF  |
  awk '{print $0,"9","'${cur_time}'","'${USERID}'"}'  > $tmp-riyousha_iryouhoken_input

;;
esac

### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------

#--------------------------------------------------------------

# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RIYOUSHA/RIYOUSHA_IRYOUHOKEN RIYOUSHA_IRYOUHOKEN
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
riyousha_iryouhoken RIYOUSHA_IRYOUHOKEN 2 20 21 ${pompa_dir} ${input_dir} 
FIN

#--------------------------------------------------------------

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_dir}/${file_name} ${pompa_dir}/back/${file_name}.${today}
done

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/RIYOUSHA

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/RIYOUSHA/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
: ;done
#--------------------------------------------------------------
 cp -p ${pompa_dir}/RIYOUSHA_IRYOUHOKEN ${data_dir}/RIYOUSHA_IRYOUHOKEN
  echo "result ok"

## 終了
rm -f $tmp-*
exit 0
