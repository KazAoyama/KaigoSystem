#!/bin/bash
#
# POP_KOJINJYOUHOU_SHOUSAI_RENRAKUSAKI.TOUROKU
# 個人情報詳細　口座POPUP
#
# Written by E.Okuda 2013/12/16

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/UNEI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d%H%M%S"); set -xv

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/UNEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
pompa_dir="${app_dir}/POMPA/RIYOUSHA"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/UNEI/KANRI/RIYOUSHA"
data_dir="/DATA/E-LIFE/UNEI/RIYOUSHA"
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "result ng"
  echo "message ${message}"
  rm -f $tmp-*
  exit 1
}

function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
#eval $(name-source ${namedata})
name-source $namedata > $tmp-source
source $tmp-source
#--------------------------------------------------------------
#--------------------------------------------------------------
# 利用者番号
  MODE="$(nameread "MODE" ${namedata})"
  RIYOUSHAID="$(nameread "RIYOUSHAID" ${namedata})"
  RENRAKUSAKIID="$(nameread "RENRAKUSAKIID" ${namedata})"
  RenrakuShimei="$(nameread "RenrakuShimei" ${namedata} | sed 's/ /　/g' | sed 's/_/　/g' | sed 's/^　//g')"
  RenrakuYuubinbangou=$(nameread     "RenrakuYuubinbangou"      $namedata | sed 's/ /###SPACE###/g')
  RenrakuTel1=$(nameread     "RenrakuTel1"      $namedata | sed 's/ //g')
  RenrakuTel2=$(nameread     "RenrakuTel2"      $namedata | sed 's/ //g')

 echo "${RenrakuYuubinbangou}" |
 awk '$1!="_"{print $0}'       |
 sed 's/-//1' |
 awk '$1!~/^[0-9]*$/{print $0}'  > $tmp-yuubin_error

 echo "${RenrakuTel1}" |
 awk '$1!="_"{print $0}'       |
 sed 's/-//1' |
 sed 's/-//1' |
 awk '$1!~/^[0-9]*$/{print $0}'  > $tmp-tel1_error

 echo "${RenrakuTel2}" |
 awk '$1!="_"{print $0}'       |
 sed 's/-//1' |
 sed 's/-//1' |
 awk '$1!~/^[0-9]*$/{print $0}'  > $tmp-tel2_error

# 入力データのチェック
#
  [ -z "${RIYOUSHAID}" -o "${RIYOUSHAID}" = "_" ] && error_exit "利用者データが異常です。"
  [ -z "${RenrakuShimei}" -o "${RenrakuShimei}" = "_" ] && error_exit "連絡先氏名を入力してください。"
  [ -s $tmp-yuubin_error ] && error_exit "郵便番号の値は数字と「-」のみ有効です。"
  [ -s $tmp-tel1_error ] && error_exit "電話番号の値は数字と「-」のみ有効です。"
  [ -s $tmp-tel2_error ] && error_exit "電話番号の値は数字と「-」のみ有効です。"

#--------------------------------------------------------------
#--------------------------------------------------------------

# モードの区分け
#-----------------------
case "${MODE}" in
   touroku)

  # 連絡先IDが空(新規)の場合
  if [ -z "${RENRAKUSAKIID}" -o "${RENRAKUSAKIID}" = "_" ] ; then

  ## 連絡先IDの発番 ##i
   # 今回取得するID数
    last_no="1"

    mkdir -p ${kanri_dir}/RIYOUSHA_RENRAKUSAKI_ID
    [ -e ${kanri_dir}/RIYOUSHA_RENRAKUSAKI_ID/${RIYOUSHAID} ] || echo "001" > ${kanri_dir}/RIYOUSHA_RENRAKUSAKI_ID/${RIYOUSHAID}
    get_no ${last_no} ${kanri_dir}/RIYOUSHA_RENRAKUSAKI_ID/${RIYOUSHAID} > $tmp-renrakusaki_id
    renrakusaki_id="$(cat $tmp-renrakusaki_id)"

  else
    renrakusaki_id="$(echo "${RENRAKUSAKIID}")"
  fi

i

#--------------------------------------------------------------
# 作成テーブル  利用者連絡先テーブル
#--------------------------------------------------------------

 RenrakuShimeikana=$(nameread     "RenrakuShimeikana" $namedata | sed 's/ /　/g' | sed 's/_/　/g' | sed 's/^　//g' | zen)
 RenrakuSeibetu=$(nameread     "RenrakuSeibetu"      $namedata | sed 's/ //g' | sed 's/_//g')
 RenrakuZokugara=$(nameread     "RenrakuZokugara"      $namedata)
 ZokugaraBikou=$(nameread     "ZokugaraBikou"      $namedata | sed 's/ /###SPACE###/g' | sed 's/\\n/###KAIGYO###/g')
 YuusenJyuni=$(nameread     "YuusenJyuni"      $namedata)
 RenrakuEmail=$(nameread     "RenrakuEmail"      $namedata | sed 's/ /###SPACE###/g')
 RenrakuJyuusho=$(nameread     "RenrakuJyuusho"      $namedata | sed 's/ /###SPACE###/g')
 RenrakuKinmusaki=$(nameread     "RenrakuKinmusaki"      $namedata | sed 's/ /###SPACE###/g')
 SonotaSeikyuusaki=$(nameread     "SonotaSeikyuusaki"      $namedata)
 SonotaMimotohikitori=$(nameread     "SonotaMimotohikitori"      $namedata)
 SonotaHenreikin=$(nameread     "SonotaHenreikin"      $namedata)
 SonotaDairinin=$(nameread     "SonotaDairinin"      $namedata)
 RenrakuBikou=$(nameread     "RenrakuBikou"      $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
 Hannei=$(nameread     "Hannei"      $namedata)


  [ -z "${RenrakuShimeikana}" ] && RenrakuShimeikana="_"
  [ -z "${SonotaSeikyuusaki}" -o "${SonotaSeikyuusaki}" = "_" ] && SonotaSeikyuusaki="0"
  [ -z "${SonotaMimotohikitori}" -o "${SonotaMimotohikitori}" = "_" ] && SonotaMimotohikitori="0"
  [ -z "${SonotaHenreikin}"  -o "${SonotaHenreikin}" = "_" ] && SonotaHenreikin="0"
  [ -z "${SonotaDairinin}" -o "${SonotaDairinin}" = "_" ] && SonotaDairinin="0"
  [ "${RenrakuZokugara}" != "999" ] && ZokugaraBikou="_"
  [ -z "${Hannei}" -o "${Hannei}" = "_" ] && Hannei="0"

  ##########################
  # 1:利用者連絡先テーブル
  ##########################

  # 追加データの作成
  echo "${RIYOUSHAID}" "${renrakusaki_id}" "${RenrakuShimei}" "${RenrakuShimeikana}" "${RenrakuSeibetu}" "${RenrakuZokugara}" "${ZokugaraBikou}" "${YuusenJyuni}" "${RenrakuTel1}" "${RenrakuTel2}" "${RenrakuEmail}" "${RenrakuYuubinbangou}" "${RenrakuJyuusho}" "${RenrakuKinmusaki}" "${SonotaSeikyuusaki}" "${SonotaMimotohikitori}" "${SonotaHenreikin}" "${SonotaDairinin}" "${RenrakuBikou}" "${Hannei}" "_" "_" "_" "1" "${cur_time}" "${USERID}" > $tmp-riyousha_renrakusaki_input
# 1:利用者(入居者)ID 2:連絡先ＩＤ     3:連絡先氏名     4:連絡先氏名カナ 5:連絡先性別
# 6:連絡先続柄       7:連絡先続柄備考 8:連絡先優先順位 9:電話番号1      10:電話番号2
# 11:E-mail          12:郵便番号      13:住所          14:勤務先        15:請求書送先
# 16:身元引受人      17:返還金受取人  18:代理人        19:備考          20:緊急個人データ反映
# 21:備考1           22:備考2         23:備考3         24:削除フラグ    25:更新日
# 26:UserID

#cp $tmp-* /home/hands/work/okuda

  [ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit
;;

  sakujyo)

  ##########################
  # 1:利用者連絡先テーブル
  ##########################

  cat ${pompa_dir}/RIYOUSHA_RENRAKUSAKI |
  awk '$1=="'${RIYOUSHAID}'"&&$2=="'${RENRAKUSAKIID}'"{print $0}' |
  delf NF-2 NF-1 NF  |
  awk '{print $0,"9","'${cur_time}'","'${USERID}'"}'  > $tmp-riyousha_renrakusaki_input

;;
esac

### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------

#--------------------------------------------------------------

# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RIYOUSHA_RENRAKUSAKI RIYOUSHA_RENRAKUSAKI
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
riyousha_renrakusaki RIYOUSHA_RENRAKUSAKI 2 25 26 ${pompa_dir} ${input_dir} 
FIN

#--------------------------------------------------------------

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_dir}/${file_name} ${pompa_dir}/back/${file_name}.${today}
done

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
 # エラー（ロックに失敗）
  error_unlock "ロック処理失敗"
 ## error_exit ではなく error_unlock である点に注意！
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/RIYOUSHA

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/RIYOUSHA/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
: ;done
#--------------------------------------------------------------
 cp -p ${pompa_dir}/RIYOUSHA_RENRAKUSAKI ${data_dir}/RIYOUSHA_RENRAKUSAKI

  echo "result ok"

## 終了
rm -f $tmp-*
exit 0
