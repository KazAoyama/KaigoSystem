#!/bin/bash
#
# HOUMONKAIGO_RENRAKU_TSUIKA.RENDO : 申し送りからの連絡ノート連動
#
# Usage : HOUMONKAIGO_RENRAKU_TSUIKA.RENDO
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/HOUMONKAIGO/CGI/HOUMONKAIGO.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
# エラーの場合はスルーする。
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 0
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

# ディレクトリ設定
tbl_dir="${home_dir}/TBL"
user_data_dir="/DATA/E-LIFE/UNEI/RIYOUSHA"


#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
# 1:利用者 2:作成日 3:申送り種別 4:時刻 5:対象 6:項目 7:記入者 8:日誌共有 9:支援経過共有 10:内容
# 11:色 12:登録日時 13:ID
namedata=$1

cp $namedata $work_dir/namedata_moushi_renraku

relStaff=$(self 1 $namedata)
setInputDate=$(self 2 $namedata)
inputTime=$(self 4 $namedata)
relShisetsu=$(awk '{print $14$15}' $namedata)
HoumonkaigoRenrakuDetail=$(self 10 $namedata | sed 's/<br>/\\n/g')
ShuseiId=$(self 13 $namedata)
kdataid="_"
relJigyousho="_"
relAitesaki="_"
userid=$(self 7.1.5 $namedata)


# デフォルト値セット
checkMoushiokuri="off"
checkKaigoShienKeika="off"

cat ${user_data_dir}/JIGYOUSHO_RIYOUSHA_STATUS |
awk '$2=="'$relStaff'"' |
LANG=C sort -k3,4       |
tail -1                 |
self 1                  > $tmp-user_shisetsu

shisetsu=$(self 1 $tmp-user_shisetsu)


#--------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"
# 施設
[ -z "${shisetsu}" -o "${shisetsu}" = "_" ] && error_exit "施設が不明です"


:> $tmp-moushiokuri_kizon
if [ -s ${pompa_dir}/HOUMONKAIGO_RENRAKU/${shisetsu}/HOUMONKAIGO_RENRAKU_JIKOU ] ; then
   cat ${pompa_dir}/HOUMONKAIGO_RENRAKU/${shisetsu}/HOUMONKAIGO_RENRAKU_JIKOU |
   awk '$10=="'$ShuseiId'"' |
   LANG=C sort -k20,20      |
   tail -1                  > $tmp-moushiokuri_kizon
fi

if [ "$(gyo $tmp-moushiokuri_kizon)" = "0" ] ; then
#--------------------------------------------------------------
# 連絡事項ＩＤがない場合（登録）ならデータIDをふる
### 連絡事項IDの発番
# 今回取得するID数
last_no="1"
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/HOUMONKAIGO/$shisetsu/HOUMONKAIGO_RENRAKU_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

# ディレクトリ作成
mkdir -p ${kanri_dir}/HOUMONKAIGO/$shisetsu

[ -e ${kanri_dir}/HOUMONKAIGO/$shisetsu/HOUMONKAIGO_RENRAKU_ID ] || echo "000000001" > ${kanri_dir}/HOUMONKAIGO/$shisetsu/HOUMONKAIGO_RENRAKU_ID
# 超えてたらリセット
[ ${new_last_no} -gt 999999999 ] && echo "000000001" > ${kanri_dir}/HOUMONKAIGO/$shisetsu/HOUMONKAIGO_RENRAKU_ID
get_no ${last_no} ${kanri_dir}/HOUMONKAIGO/$shisetsu/HOUMONKAIGO_RENRAKU_ID > $tmp-id_all

# この場合取得するのは一つなのでそのまま変数に
HoumonkaigoRenrakuID=$(cat $tmp-id_all)

hdKakuninsha="_"
hdMoushiokuri="_"
hdKaigoShien="_"

#---------------------------------------------------------------

# データ作成
# 連絡事項データ
# 1:施設            2:ID            3:登録日付 4:登録時間           5:対象者
# 6:施設ID          7:連絡事項詳細  8:確認者   9:申し送り反映フラグ 10:申し送りID
# 11:介護支援経過ID 12:連絡先事業所 13:相手先  14:予備１            15:予備２
# 16:予備３         17:予備４       18:予備５  19:有効フラグ        20:処理時間
# 21:ユーザID
if [ -z "$HoumonkaigoRenrakuDetail" -o "$HoumonkaigoRenrakuDetail" = "_" ] ; then 
  if [ -z "${HoumonkaigoRenrakuID}" -o "${HoumonkaigoRenrakuID}" = "_" ] ; then 
    : > $tmp-renraku_input
  else
    echo "$shisetsu" "$HoumonkaigoRenrakuID" "$setInputDate" "$inputTime" "$relStaff" "$relShisetsu" "$HoumonkaigoRenrakuDetail" \
"_" "$checkKaigoShienKeika" "${ShuseiId}" "${kdataid}" "${relJigyousho}" "${relAitesaki}" "_" "_" "_" "_" "_" "9" "${sdaytime}" "${userid}"  > $tmp-renraku_input
  fi
else
  echo "$shisetsu" "$HoumonkaigoRenrakuID" "$setInputDate" "$inputTime" "$relStaff" "$relShisetsu" "$HoumonkaigoRenrakuDetail" \
"_" "$checkKaigoShienKeika" "${ShuseiId}" "${kdataid}" "${relJigyousho}" "${relAitesaki}" "_" "_" "_" "_" "_" "1" "${sdaytime}" "${userid}"  > $tmp-renraku_input
fi

else

  if [ -z "$HoumonkaigoRenrakuDetail" -o "$HoumonkaigoRenrakuDetail" = "_" ] ; then
     calsed_HoumonkaigoRenrakuDetail=$(echo $HoumonkaigoRenrakuDetail | sed 's/\\n/<br>/g')
     cat $tmp-moushiokuri_kizon |
     awk '{print $1,$2,"'$setInputDate'","'$inputTime'","'$relStaff'",$6,"'$calsed_HoumonkaigoRenrakuDetail'","_",$9,$10,$11,$12,$13,"_","_","_","_","_","9","'${sdaytime}'","'${userid}'"}' |
     sed 's/<br>/\\n/g' > $tmp-renraku_input
  else
     calsed_HoumonkaigoRenrakuDetail=$(echo $HoumonkaigoRenrakuDetail | sed 's/\\n/<br>/g')
     cat $tmp-moushiokuri_kizon |
     awk '{print $1,$2,"'$setInputDate'","'$inputTime'","'$relStaff'",$6,"'$calsed_HoumonkaigoRenrakuDetail'","_",$9,$10,$11,$12,$13,"_","_","_","_","_","1","'${sdaytime}'","'${userid}'"}' |
     sed 's/<br>/\\n/g' > $tmp-renraku_input
  fi

fi

cp $tmp-renraku_input $work_dir/houmonkaigo_renraku_input

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
HOUMONKAIGO_RENRAKU/${shisetsu}/HOUMONKAIGO_RENRAKU_JIKOU HOUMONKAIGO_RENRAKU_JIKOU
FIN

input_detail_dir=HOUMONKAIGO_RENRAKU_JIKOU/${shisetsu}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
renraku HOUMONKAIGO_RENRAKU_JIKOU 2 20 21 ${pompa_dir}/HOUMONKAIGO_RENRAKU/${shisetsu} ${input_dir}
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi



cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
   

#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'${shisetsu}'"||$2!="'${ScheduleID}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
