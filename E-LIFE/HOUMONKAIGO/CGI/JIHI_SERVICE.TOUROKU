#!/bin/bash
#
# JIHI_SERVICE.TOUROKU : 自費サービス登録
#
# Usage : JIHI_SERVICE.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/HOUMONKAIGO/CGI/HOUMONKAIGO.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*

# テスト
test_tbl_dir="${home_dir}/TEST/TBL"


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)

dirdate=$(date +%Y%m%d | self 1)

# 引数設定
namedata=$1


# デフォルト値セット

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"
# 時間帯チェック
ServiceTimeFrom_kakunin=$(echo $ServiceTimeFrom | awk '{print substr($1,1,2)substr($1,4,2)}')
ServiceTimeTo_kakunin=$(echo $ServiceTimeTo | awk '{print substr($1,1,2)substr($1,4,2)}')
[ "$ServiceTimeFrom_kakunin" -gt "$ServiceTimeTo_kakunin" ] && error_exit "時間帯を確認して下さい"
#--------------------------------------------------------------
# 処理日付に余裕を持たせる（2014/06/30）
#shorihiduke=$(date +%Y%m%d | awk '{print substr($1,7,2)}')

# 提出年月
#if [ ${shorihiduke} -gt 10 ] ; then
#tesisyutunengetu=$(mdate month/+1)
#else
#tesisyutunengetu=$(mdate month/+0)
#fi

# 当月の次の月が提出年月
tesisyutunengetu=$(mdate ${hdTaishouNengappi}m/+1)

#######################################################
# マスタ
#######################################################
# 科目
self 2 3 ${home_dir}/TBL/CONFIG/JIHI_SERVICE_KOUMOKU |
LANG=C sort -k1,1 > $tmp-koumoku_master
# 従業員マスタ
# ログインUSER名と施設の取得（仮）
#self 1 2 ${test_tbl_dir}/STAFF_NAME > $tmp-staff_master
self 1 2 ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  > $tmp-staff_master
cp $tmp-koumoku_master $work_dir/koumoku_master
cp $tmp-staff_master $work_dir/staff_master

# データ作成
# ID
echo ${dataCsvServiceID} |
sed 's/,/ /g'    > $tmp-service_id
# 実施日
echo ${dataCsvServiceDate} |
sed 's/,/ /g'    > $tmp-service_date
# 開始時間
echo ${dataCsvServiceTimeFrom} |
sed 's/,/ /g'    > $tmp-service_time_from
# 終了時間
echo ${dataCsvServiceTimeTo} |
sed 's/,/ /g'    > $tmp-service_time_to
# 項目
echo ${dataCsvServiceKoumoku} |
sed 's/,/ /g'    > $tmp-service_koumoku
# 内容
echo ${dataCsvServiceNaiyou} |
sed 's/,/ /g'    > $tmp-service_naiyou
# 単位時間
echo ${dataCsvServiceTaniTime} |
sed 's/,/ /g'    > $tmp-service_tani_time
# 費用
echo ${dataCsvServiceFee} |
sed 's/,/ /g'    > $tmp-service_fee
# 担当者
echo ${dataCsvServiceTantousha} |
sed 's/,/ /g'    > $tmp-service_tantousha
# 担当者
echo ${dataCsvServiceFeeTanka} |
sed 's/,/ /g'    > $tmp-service_tanka
# 担当者
echo ${dataCsvServiceZeiritsu} |
sed 's/,/ /g'    > $tmp-service_zeiritsu

cat $tmp-service_id $tmp-service_date $tmp-service_time_from $tmp-service_time_to $tmp-service_koumoku $tmp-service_naiyou $tmp-service_tani_time $tmp-service_fee $tmp-service_tantousha $tmp-service_tanka $tmp-service_zeiritsu |
tateyoko         |
# 1:利用者ID  2:対象年月日 3:ID    4:実施日付    5:開始時間
# 6:終了時間  7:項目       8:内容  9:単位時間    10:費用
# 11:担当者   12:単価      13:税率 14:有効フラグ 15:処理時間
# 16:ユーザID
awk '{print "'${Riyoushaid}'","'$hdTaishouNengappi'",$0,"1","'${sdaytime}'","'${userid}'"}' > $tmp-jihi1

cp $tmp-jihi1 $work_dir/jihi1

cat $tmp-jihi1           |
awk '$3=="_"'                           > $tmp-jihi_new

cat $tmp-jihi1           |
awk '$3!="_"'                           > $tmp-jihi_upd

# 項目がない場合
if [ -z "${dataCsvServiceFee}" -o "${dataCsvServiceFee}" = "_" ] ;then
  new_jihi_num=0
else
  new_jihi_num=$(gyo $tmp-jihi_new)
fi

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_jihi_num -gt 0 ] ; then
last_no="${new_jihi_num}"
# ディレクトリを作成
mkdir -p ${kanri_dir}/JIHI_SERVICE/${Riyoushaid}
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/JIHI_SERVICE/${Riyoushaid}/JihiServiceID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/JIHI_SERVICE/${Riyoushaid}/JihiServiceID ] || echo "0000001" > ${kanri_dir}/JIHI_SERVICE/${Riyoushaid}/JihiServiceID
# 超えてたらリセット
[ ${new_last_no} -gt 9999999 ] && echo "0000001" > ${kanri_dir}/JIHI_SERVICE/${Riyoushaid}/JihiServiceID
get_no ${last_no} ${kanri_dir}/JIHI_SERVICE/${Riyoushaid}/JihiServiceID > $tmp-id_all

fi

#---------------------------------------------------------------

ycat $tmp-id_all $tmp-jihi_new             |
self 2 3 1 5/NF                                  > ${tmp}-jihi_new2

cat $tmp-jihi_upd ${tmp}-jihi_new2  |
LANG=C sort -k1,2          > ${tmp}-jihi_input

cp ${tmp}-jihi_input $work_dir/jihi_input

cat ${tmp}-jihi_input              |
# 1:施設ID    2:利用者ID  3:対象年月日 4:ID    5:実施日付
# 6:開始時間  7:終了時間  8:項目       9:内容  10:単位時間
# 11:費用     12:担当者   13:単価      14:税率 15:有効フラグ
# 16:処理時間 17:ユーザID
awk '{print "'${shisetsu}'",$0}'   |
# 1:施設ID    2:対象年月日 3:利用者ID 4:実施日付               5:開始時間
# 6:終了時間  7:項目       8:内容     9:単位時間               10:単価
# 11:税率     12:費用      13:担当者  14:請求確定フラグ(0固定) 15:有効フラグ
# 16:処理時間 17:ユーザID
self 1 3 2 5 6 7 8 9 10 13 14 11 12 15 16 17 |
LANG=C sort -k7,7                            |
tee $work_dir/seikyu1                        |
join2 key=7 $tmp-koumoku_master              |
self 1/6 8/NF                                |
LANG=C sort -k13,13                          |
join1 key=13 $tmp-staff_master               |
self 1/12 14/NF                              |
awk '{print $0,"0"}'                         |
self 1/13 NF 14/NF-1                         > $tmp-jihi_seikyu_input

cp $tmp-jihi_seikyu_input $tmp-jihi_seikyu2_input
cp $tmp-jihi_seikyu_input $work_dir/seikyu_input


if [ -z "${dataCsvServiceFee}" -o "${dataCsvServiceFee}" = "_" ] ;then
   :> $tmp-jihi_seikyu_input
   :> $tmp-jihi_seikyu2_input
   :> ${tmp}-jihi_input
fi

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
JIHI_SERVICE/${Riyoushaid}/${hdTaishouNengappi} JIHI_SERVICE
JIHI_SERVICE/${Riyoushaid}/${hdTaishouNengappi} SEIKYU_JIHI_SERVICE
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
jihi JIHI_SERVICE 3 15 16 ${pompa_dir}/JIHI_SERVICE/${Riyoushaid}/${hdTaishouNengappi} ${input_dir}/${dirdate}/JIHI_SERVICE
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
jihi_seikyu SEIKYU_JIHI_SERVICE 3 16 17 ${pompa_dir}/JIHI_SERVICE/${Riyoushaid}/${hdTaishouNengappi} ${input_dir}/${dirdate}/JIHI_SERVICE
jihi_seikyu2 SEIKYU_JIHI_SERVICE 3 16 17 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${tesisyutunengetu} ${input_dir}/${dirdate}/JIHI_SERVICE
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '{$14="9"; print $0}' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'${shisetsu}'"||$2!="'${hdTaishouNengappi}'"||$3!="'${Riyoushaid}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  #if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  #fi
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
