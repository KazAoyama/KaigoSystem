#!/bin/bash
#
# KOBETSU_ENJO_KEIKAKU.TOUROKU : アセスメント登録
#
# Usage : KOBETSU_ENJO_KEIKAKU.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/HOUMONKAIGO/CGI/HOUMONKAIGO.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)

#--- 日付 ---
sday=$(date +%Y%m%d)

# 引数設定
namedata=$1


# デフォルト値セット
##############################################################

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------
# テスト

txtareaMitorizu="@"

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
# 作成年月日
[ -z "${hdSakuseiDate}" -o "${hdSakuseiDate}" = "_" ] && error_exit "作成年月日が不明です"
# 居室番号
input_res=$(/home/hands/E-LIFE/KYOUTSU/CGI/INPUT_CHECK.CGI $Kyoshitsu 9)
[ "${input_res}" != "OK" ] && error_exit $input_res
#--------------------------------------------------------------

allyukoflg="1"
# データ作成
# 基本情報
# 1:利用者ID    2:作成年月日(西暦) 3:作成年月日(和暦) 4:利用者氏名 5:要介護度
# 6:施設        7:居室             8:見取り図         9:現疾患     10:特記事項
# 11:有効フラグ 12:処理日          13:ユーザID
[ "$MODE" = "delete" ] && allyukoflg="9"
echo "$Riyoushaid" "$hdSakuseiDate" "$SakuseiDate" "$Riyousha" "$Kaigodo" \
"$slShisetsu" "$Kyoshitsu" "$txtareaMitorizu" "$GenShikkan" "$Tokkijikou" \
"$allyukoflg" "${sdaytime}" "${USER_ID}" > ${tmp}-enjo_input

cp -p $tmp-enjo_input $work_dir/enjo_input

# 目標リスト作成

seq $MOKUHYONUM |
while read mokuhyounum ; do
  cnum=$((mokuhyounum-1))
  mokuhyodataid=$(nameread mokuhyouDataID$cnum $namedata | head -1)
  mokuhyouname=$(nameread mokuhyouname$cnum $namedata | head -1)
  mokuhyou=$(nameread Mokuhyou$cnum $namedata | head -1)
  kikanstart=$(nameread KikanStart$cnum $namedata | head -1)
  kikanend=$(nameread KikanEnd$cnum $namedata | head -1)

# 1:利用者ID     2:作成日(西暦)  3:レコードID 4:目標名 5:目標
# 6:目標開始期間 7:目標終了期間1 8:有効フラグ 9:処理日 10:ユーザID

  if [ -z "$mokuhyou" -o "$mokuhyou" = "_" ] ; then
     if [ -z "$mokuhyoudataid" -o "$mokuhyoudataid" = "_"  ] ; then
        : >> ${tmp}-mokuhyou_work1
     else  
        echo "$Riyoushaid" "$hdSakuseiDate" "$mokuhyodataid" "$mokuhyouname" \
"$mokuhyou" "$kikanstart" "$kikanend" "9" "${sdaytime}" "${USER_ID}" >> ${tmp}-mokuhyou_work1
     fi
  else
     yukoflg=$allyukoflg
     echo "$Riyoushaid" "$hdSakuseiDate" "$mokuhyodataid" "$mokuhyouname" \
"$mokuhyou" "$kikanstart" "$kikanend" "$yukoflg" "${sdaytime}" "${USER_ID}" >> ${tmp}-mokuhyou_work1
  fi

done


seq $TEIKYOUNUM |
while read teikyonum ; do
  enum=$((teikyonum-1))
  servicedataid=$(nameread ServiceDataID$enum $namedata | head -1)
  youbi=$(nameread TeikyouYoubi$enum $namedata | head -1)
  teikyoukubun=$(nameread TeikyouKubun$enum $namedata | head -1)
  jikokufrom=$(nameread TeikyouJikanStart$enum $namedata | head -1)
  jikokuto=$(nameread TeikyouJikanEnd$enum $namedata | head -1)
  # 時間帯チェック
  if [ "$jikokufrom" -gt "$jikokuto" ] ; then
     : > $tmp-err
     break;
   fi

  enjokoumoku=$(nameread EnjoKoumoku$enum $namedata | head -1)
  enjojikan=$(nameread EnjoShoyouJikan$enum $namedata | head -1)
  enjonaiyou=$(nameread EnjoGutaiNaiyou$enum $namedata | head -1)

# 1:利用者ID    2:作成日(西暦) 3:レコードID 4:曜日     5:サービス区分
# 6:開始時刻    7:終了時刻     8:援助項目   9:所要時間 10:援助内容
# 11:有効フラグ 12:処理日      13:ユーザID
  if [ -z "$teikyoukubun" -o "$teikyoukubun" = "_" ] ; then
     if [ -z "$servicedataid" -o "$servicedataid" = "_"  ] ; then
        : >> ${tmp}-enjo_service_work1
     else
       echo "$Riyoushaid" "$hdSakuseiDate" "$servicedataid" "$youbi" "$teikyoukubun" \
"$jikokufrom" "$jikokuto" "$enjokoumoku" "$enjojikan" "$enjonaiyou" \
"9" "${sdaytime}" "${USER_ID}" >> ${tmp}-enjo_service_work1
     fi
  else
     yukoflg=$allyukoflg
     echo "$Riyoushaid" "$hdSakuseiDate" "$servicedataid" "$youbi" "$teikyoukubun" \
"$jikokufrom" "$jikokuto" "$enjokoumoku" "$enjojikan" "$enjonaiyou" \
"$yukoflg" "${sdaytime}" "${USER_ID}" >> ${tmp}-enjo_service_work1
  fi

done

[ -e $tmp-err ] && error_exit "時間帯を確認して下さい"

cp -p $tmp-mokuhyou_work1 $work_dir/mokuhyou_work1
cp -p $tmp-enjo_service_work1 $work_dir/service_work1

###############################
# 目標ID採番
##############################
cat ${tmp}-mokuhyou_work1 |
awk '$3=="_"'                    > ${tmp}-mokuhyou_new

cat ${tmp}-mokuhyou_work1 |
awk '$3!="_"'                    > ${tmp}-mokuhyou_upd

new_mokuhyou_num=$(gyo ${tmp}-mokuhyou_new)

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_mokuhyou_num -gt 0 ] ; then
last_no="${new_mokuhyou_num}"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/MOKUHYOU_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/MOKUHYOU_ID ] || echo "00001" > ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/MOKUHYOU_ID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/MOKUHYOU_ID
get_no ${last_no} ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/MOKUHYOU_ID > $tmp-id_mokuhyouall

fi
#---------------------------------------------------------------

ycat $tmp-id_mokuhyouall ${tmp}-mokuhyou_new      |
self 2 3 1 5/NF                                     > ${tmp}-mokuhyou_new2

cat ${tmp}-mokuhyou_upd ${tmp}-mokuhyou_new2     |
LANG=C sort -k1,3                                   > ${tmp}-mokuhyou_input


###############################
# 援助サービス内容ID採番
##############################
cat ${tmp}-enjo_service_work1 |
awk '$3=="_"'                    > ${tmp}-enjo_service_new

cat ${tmp}-enjo_service_work1 |
awk '$3!="_"'                    > ${tmp}-enjo_service_upd

new_enjo_service_num=$(gyo ${tmp}-enjo_service_new)

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_enjo_service_num -gt 0 ] ; then
last_no="${new_enjo_service_num}"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/ENJO_SERVICE_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/ENJO_SERVICE_ID ] || echo "00001" > ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/ENJO_SERVICE_ID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/ENJO_SERVICE_ID
get_no ${last_no} ${kanri_dir}/KOBETSU_ENJO_KEIKAKU/${Riyoushaid}/ENJO_SERVICE_ID > $tmp-id_enjoall

fi
#---------------------------------------------------------------

cp  $tmp-id_enjoall $work_dir/id_enjoall
cp ${tmp}-enjo_service_new $work_dir/enjo_service_new

ycat $tmp-id_enjoall ${tmp}-enjo_service_new      |
self 2 3 1 5/NF                                     > ${tmp}-enjo_service_new2

cat ${tmp}-enjo_service_upd ${tmp}-enjo_service_new2     |
LANG=C sort -k1,3                                   > ${tmp}-enjo_service_input

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
HOUMONKAIGO/${Riyoushaid}/KOBETSU_ENJO_KEIKAKU   KOBETSU_ENJO_KEIKAKU
HOUMONKAIGO/${Riyoushaid}/ENJO_KEIKAKU_MOKUHYOU    ENJO_KEIKAKU_MOKUHYOU
HOUMONKAIGO/${Riyoushaid}/ENJO_KEIKAKU_SERVICE    ENJO_KEIKAKU_SERVICE
FIN

input_detail_dir=KOBETSU_ENJO_KEIKAKU/${Riyoushaid}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
enjo KOBETSU_ENJO_KEIKAKU 2 12 13 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
enjo_service ENJO_KEIKAKU_SERVICE 3 12 13 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
mokuhyou ENJO_KEIKAKU_MOKUHYOU 3 9 10 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'${Riyoushaid}'"||$2!="'${hdSakuseiDate}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key}  >  $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
