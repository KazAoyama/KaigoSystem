#!/bin/bash
#
# SERVICE_JISSEKI.TOUROKU : アセスメント登録
#
# Usage : SERVICE_JISSEKI.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/HOUMONKAIGO/CGI/HOUMONKAIGO.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)

#--- 日付 ---
sday=$(date +%Y%m%d)

# 引数設定
namedata=$1


# デフォルト値セット
KakuteiFlg="_"
##############################################################

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------
# テスト


#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"

echo "${Riyoushaid}" > $tmp-riyoushaid

# 処理日付に余裕を持たせる（2014/06/30）
shorihiduke=$(date +%Y%m%d | awk '{print substr($1,7,2)}')

if [ ${shorihiduke} -gt 10 ] ; then
tesisyutunengetu=$(mdate month/+1)
else
tesisyutunengetu=$(mdate month/+0)
fi

# 本日の日付
curday=$(mdate ${TaishouNen}${TaishouTsuki}"01" | self 1)

# 今月の最初の日付
firstday=$(mdate ${TaishouNen}${TaishouTsuki}m | tateyoko | head -1)
# 今月の最後の日付
lastday=$(mdate ${TaishouNen}${TaishouTsuki}m | tateyoko | tail -1)

#--------------------------------------------------------------

##############################################################
#### マスタ取得
##############################################################
##  地域単価
cat ${home_dir}/TBL/CONFIG/KAIGOHOKEN_TIIKI_TANKA          |
awk '$4<="'$curday'"&&$5>="'$curday'"{print $1,$2,$3}'    |
LANG=C sort -k1,2                                         > ${tmp}-master_tiikitanka

# 時期によって有効な事業所マスタの年月日を出す。
ls -F ${home_dir}/TBL/JIGYOUSHO_MASTER |
grep / |
sed 's/\///g' |
LANG=C sort -k1,1    |
awk '{print "1",$0}' |
ychange num=1 |
awk '$2<="'$curday'"&&"'$curday'"<$3{print $2}'      > $tmp-master_dir_date

master_dir_date=$(cat $tmp-master_dir_date)


##  事業者マスタ
cat ${home_dir}/TBL/JIGYOUSHO_MASTER/${master_dir_date}/JIGYOUSHO_MASTER       |
tee $tmp-jigyousha_work1                             |
self 1 4 7                                           |
LANG=C sort -k2,3                                    |
join1 key=2/3 $tmp-master_tiikitanka                 |
LANG=C sort -k1,1                                    |
self 1 4                                             > $tmp-master_jigyousho_tanka

cat $tmp-jigyousha_work1                             |
# 1:事業者コード 2:サービス事業者タイプ 3:地域区分 4:事業所名 5:割引率
self 1 4 7 3 9                                               |
LANG=C sort -k2,3 > ${tmp}-jigyousho_base

cat ${tmp}-jigyousho_base                                 |
# 1:事業者コード 2:サービス事業者タイプ 3:地域区分 4:地域単価 5:事業所名 6:割引率
join1 key=2/3 ${tmp}-master_tiikitanka -                    |
LANG=C sort -k1,3  |
self 1 4 5 6  > ${tmp}-jigyousho_master

cp -p ${tmp}-jigyousho_master ${work_dir}/jigyousho_master


# ヘルパー重複チェックや2時間チェック(2015/04/28)
#cat ${home_dir}/HOUMONKAIGO/POMPA/HOUMONKAIGO/*/SERVICE_JISSEKI |
#awk '$3=="'$TaishouNen'"&&$4=="'$TaishouTsuki'"&&$(NF-2)!="9"&&$1!="'$Riyoushaid'"' > $tmp-kizon_jisseki_data


# テスト
kyufuwariai=90

# データ作成
# 基本情報
# 1:利用者ID   2:供給者 3:対象年   4:対象月 5:実績確定フラグ
# 6:有効フラグ 7:処理日 8:ユーザID
echo "$Riyoushaid" "$Kyoukyusha" "$TaishouNen" "$TaishouTsuki" "$KakuteiFlg" \
"1" "${sdaytime}" "${USER_ID}" > ${tmp}-kakutei_input


cp -p $tmp-kakutei_input $work_dir/kakutei_input

# POMPA用実績リスト作成

seq $JISSEKINUM |
while read jissekinum ; do
  jnum=$((jissekinum-1))
  yukoflg="1"
  jissekidataid=$(nameread DataID$jnum $namedata | head -1)
  jissekidate=$(nameread ServiceJissekiDate$jnum $namedata | head -1)
  tantouhelper=$(nameread ServiceJissekiTantouHelper$jnum $namedata | head -1)
  doukouhelper=$(nameread ServiceJissekiDoukouHelper$jnum $namedata | head -1)
  servicestart=$(nameread ServiceJissekiHakenJikanStart$jnum $namedata | head -1)
  serviceend=$(nameread ServiceJissekiHakenJikanEnd$jnum $namedata | head -1)
  # 時間帯チェック
  servicestart_kakunin=$(echo $servicestart | awk '{print substr($1,1,2)substr($1,4,2)}')
  serviceend_kakunin=$(echo $serviceend | awk '{print substr($1,1,2)substr($1,4,2)}')

  naiyou=$(nameread ServiceJissekiKaigoNaiyou$jnum $namedata | head -1)
  tanijikan=$(nameread ServiceJissekiTaniJikan$jnum $namedata | head -1)
  kinkyu=$(nameread ServiceJissekiKinkyuKasan$jnum $namedata | head -1)
  [ -z "$kinkyu" -o "$kinkyu" = "_" ] && kinkyu="0"
#  asayoru=$(nameread ServiceJissekiAsayoruKasan$jnum $namedata | head -1)
#  [ -z "$asayoru" -o "$asayoru" ] && asayoru="0"
#  shinya=$(nameread ServiceJissekiShinyaKasan$jnum $namedata | head -1)
#  [ -z "$shinya" -o "$shinya" ] && shinya="0"
#  double=$(nameread ServiceJissekiDoubleKasan$jnum $namedata | head -1)
#  [ -z "$double" -o "$double" ] && double="0"
#  douitsu=$(nameread ServiceJissekiDouitsuGensan$jnum $namedata | head -1)
#  [ -z "$douitsu" -o "$douitsu" ] && douitsu="0"
  code=$(nameread ServiceJissekiServiceKbn$jnum $namedata | head -1)
  seikyu=$(nameread ServiceJissekiSeikyuTaishou$jnum $namedata | head -1)
  riyouhyou=$(nameread PostRiyouhyou$jnum $namedata | head -1)

  if [ -z "$code" -o "$code" = "_" ] ; then
     yukoflg="9"
  else
     if [ "$servicestart_kakunin" -gt "$serviceend_kakunin" ] ; then
       : > $tmp-err
       break;
     fi
     if [ -z "$jissekidate" -o "$jissekidate" = "_" ] ; then
       : > $tmp-err2
       break;
     fi
########2014/5/12修正　実績確定だったら、ヘルパーチェック！
     if [ "${KakuteiFlg}" = "1" ] ; then
       if [ -z "$tantouhelper" -o "$tantouhelper" = "_" ] ; then
         : > $tmp-err3
         break;
       fi
     else
       [ -z "$tantouhelper" ] && tantouhelper="_"
     fi
     if [ -z "$servicestart" -o "$servicestart" = "_" ] ; then
       : > $tmp-err4
       break;
     fi
     if [ -z "$serviceend" -o "$serviceend" = "_" ] ; then
       : > $tmp-err5
       break;
     fi
### 既存データとのチェック：ヘルパー重複チェック(2015/04/28)
#     cat $tmp-kizon_jisseki_data |
#     awk '$6=="'$jissekidate'"&&(($7!="_"&&$7=="'$tantouhelper'")||($8!="_"&&$8=="'$tantouhelper'")||($7!="_"&&$7=="'$doukouhelper'")||($8!="_"&&$8=="'$doukouhelper'"))' > $tmp-day-helper-choufuku
     # 時間チェック
#     cat $tmp-day-helper-choufuku |
#     awk '($9<"'$servicestart'"&&$10>"'$servicestart'")||($9<"'$serviceend'"&&$10>"'$serviceend'")||($9>"'$servicestart'"&&$10<"'$serviceend'")||($9=="'$servicestart'"&&$10=="'$serviceend'")' > $tmp-day-helper-choufuku-err
#     if [ "$(gyo $tmp-day-helper-choufuku-err)" != "0" ] ; then
#       self 1 $tmp-day-helper-choufuku-err |
#       LANG=C sort -k1,1 |
#       join1 key=1 <(self 1 2 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER) |
#       delf 1   |
#       tateyoko |
#       sed 's/ /、/g' > $tmp-choufuku-riyousha
#       choufukuRiyousha=$(cat $tmp-choufuku-riyousha)
#       choufukuErrMsg="${choufukuRiyousha}さんと重複しています。"
#       echo "$choufukuErrMsg" > $tmp-choufuku_err_msg
#       : > $tmp-err7
#       break;
#     fi
  fi

  # 入力データチェック
  input_res=$(/home/hands/E-LIFE/KYOUTSU/CGI/INPUT_CHECK.CGI $tanijikan 9)
  [ "${input_res}" != "OK" ] && error_exit $input_res

# サービス実績票に反映させるデータ
# 1:利用者ID            2:サービス提供事業者 3:対象年          4:対象月               5:レコードID
# 6:提供日              7:担当ヘルパー       8:同行ヘルパー    9:サービス提供開始時間 10:サービス提供終了時間
# 11:サービス内容       12:単位時間          13:緊急加算フラグ 14:サービスコード      15:請求区分
# 16:有効フラグ        17:処理日         18:ユーザID
  if [ "$jissekidataid" = "_" -a "$yukoflg" = "9" ] ; then
     : >> ${tmp}-jisseki_work1
  else
     echo "$Riyoushaid" "$Kyoukyusha" "$TaishouNen" "$TaishouTsuki" "$jissekidataid" \
"$jissekidate" "$tantouhelper" "$doukouhelper" "$servicestart" "$serviceend" \
"$naiyou" "$tanijikan" "$kinkyu" "$code" "$seikyu" "$yukoflg" "${sdaytime}" "${USER_ID}" >> ${tmp}-jisseki_work1
  fi

# 利用票に反映させるデータ
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
  if [ "$yukoflg" = "1" -a "$seikyu" = "1" ] ; then 
    # 予防日割のコードは別計算(2015/01/04)
    echo "$Riyoushaid"  "$TaishouNen" "$TaishouTsuki" "$Kyoukyusha" "$Jigyoushatype" \
"$code" "$servicestart" "$serviceend" "$jissekidate" "$seikyu" "$KakuteiFlg" >> ${tmp}-riyouhyou_work0

# 緊急加算分も利用票上にレコード追加
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
    if [ "$kinkyu" = "1" -a "$yukoflg" = "1" ] ; then
    echo "$Riyoushaid"  "$TaishouNen" "$TaishouTsuki" "$Kyoukyusha" "$Jigyoushatype" \
"4000" "$servicestart" "$serviceend" "$jissekidate" "$seikyu" "$KakuteiFlg" >> ${tmp}-riyouhyou_work0
    fi
  fi

done

cp ${tmp}-jisseki_work1 $work_dir/houmonkaigo_jisseki_work1

# ２時間ルール対応（2015/04/28）
# 同じ利用者でサービスを２時間空けないとだめ
if [ $(gyo ${tmp}-jisseki_work1) -gt 0 ] ; then
seq $JISSEKINUM |
while read jissekinum ; do
  jnum=$((jissekinum-1))
  hikaku_jissekidate=$(nameread ServiceJissekiDate$jnum $namedata | head -1)
  hikaku_servicestart=$(nameread ServiceJissekiHakenJikanStart$jnum $namedata | head -1 | awk '{$2=substr($1,3,3);$1=substr($1,1,2)-2;print $1$2}' | maezero 1.5)
  hikaku_serviceend=$(nameread ServiceJissekiHakenJikanEnd$jnum $namedata | head -1 | awk '{$2=substr($1,3,3);$1=substr($1,1,2)+2;print $1$2}' | maezero 1.5)
  cat ${tmp}-jisseki_work1 |
  awk '$(NF-2)!="9"&&$6=="'$hikaku_jissekidate'"'       |
  awk '$10>"'$hikaku_servicestart'"&&$9<"'$hikaku_serviceend'"' > $tmp-twohour-err
  if [ $(gyo $tmp-twohour-err) -gt 1 ] ; then
      : > $tmp-err8
      break;
  fi
done
fi

# 予防支援の日割対応
if [ $JISSEKINUM -gt 0 ] ; then
    if [ "$Jigyoushatype" = "61" ] ; then
       code=$(nameread ServiceJissekiServiceKbn0 $namedata | head -1)
       if [ "$code" = "2111" -o "$code" = "2211" -o "$code" = "2321" ] ; then
         #####################################################################
         # 介護度マスタを抽出
         #####################################################################
         awk '$(NF-2)!="9"' ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN |
         self 1 3 5 14/28 |
         join1 key=1 ${tmp}-riyoushaid   >     $tmp-riyousha_kaigohoken_master_hiwari
        
         [ "$(gyo $tmp-riyousha_kaigohoken_master_hiwari)" = "0" ] && error_exit "介護度が不明です"
        
         # 月初めの介護度を取得
         cat $tmp-riyousha_kaigohoken_master_hiwari                           |
         awk '$13<="'${firstday}'"&&$18>="'${firstday}'"&&$(NF-2)!="9"'              |
         self 1/3 8 13 18                        |
         awk '$2=="1"||$2=="2"'                  |
# 1:認定開始日 2:認定終了日
         self 5 6                                |
# 本月の最初日から
         awk '{print "'${firstday}'",$2}'        |
         LANG=C sort -k1,2                       |
         head -1                                 > $tmp-first_riyousha_kaigohoken_hiwari
        
         # 月終わりの介護度を取得
         cat $tmp-riyousha_kaigohoken_master_hiwari                           |
         awk '$13<="'${lastday}'"&&$18>="'${lastday}'"&&$(NF-2)!="9"'              |
         self 1/3 8 13 18                        |
         awk '$2=="1"||$2=="2"'                  |
# 1:認定開始日 2:認定終了日
         self 5 6                                |
# 本月の最後日まで
         awk '{print $1,"'${lastday}'"}'        |
         LANG=C sort -k1,2                       |
         tail -1                             > $tmp-last_riyousha_kaigohoken_hiwari

         if [ "$(gyo $tmp-first_riyousha_kaigohoken_hiwari)" = "0" -a "$(gyo $tmp-last_riyousha_kaigohoken_hiwari)" = "0" ] ; then
             : > $tmp-err6
         elif [ "$(gyo $tmp-last_riyousha_kaigohoken_hiwari)" = "0" ] ; then
             hiwari_first_day=$(self 1 $tmp-first_riyousha_kaigohoken_hiwari)
             hiwari_end_day=$(self 2 $tmp-first_riyousha_kaigohoken_hiwari)
         else
             hiwari_first_day=$(self 1 $tmp-last_riyousha_kaigohoken_hiwari)
             hiwari_end_day=$(self 2 $tmp-last_riyousha_kaigohoken_hiwari)
         fi
# 日割の日数を抽出
         hiwarinissu=$(mdate ${hiwari_end_day} ${hiwari_first_day})
# 日割の日を抽出してデータを作成
         mdate -e ${hiwari_first_day}/+${hiwarinissu} |
         tarr |
         while read hiwariday ; do
            hiwaridate=$(echo ${hiwariday} | self 1.7.2)
            servicestart=$(nameread ServiceJissekiHakenJikanStart0 $namedata | head -1)
            serviceend=$(nameread ServiceJissekiHakenJikanEnd0 $namedata | head -1)
            code=$(nameread ServiceJissekiServiceKbn0 $namedata | head -1)
            seikyu=$(nameread ServiceJissekiSeikyuTaishou0 $namedata | head -1)
            echo "$Riyoushaid"  "$TaishouNen" "$TaishouTsuki" "$Kyoukyusha" "$Jigyoushatype" \
"$code" "$servicestart" "$serviceend" "$hiwaridate" "$seikyu" "$KakuteiFlg" >> ${tmp}-riyouhyou_work0
         done
       else
         :
       fi
    fi
fi

cp ${tmp}-riyouhyou_work0 $work_dir/riyouhyou_work0_before_hiwari

# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
cat ${tmp}-riyouhyou_work0 |
# 1:利用者ID       2:対象年   3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:実績日付 8:サービス提供開始時間 9:サービス提供終了時間 10:介護保険請求
# 11:確定フラグ
self 1/6 9 7 8 10 11       |
LANG=C sort -k1,9          |
getlast 1 9                |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者 5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付           10:介護保険請求
# 11:確定フラグ
self 1/6 8 9 7 10 11       > $tmp-riyouhyou_work0_hiwaritaio


[ -e $tmp-err ] && error_exit "時間帯を確認して下さい"
[ -e $tmp-err2 ] && error_exit "日にちを確認して下さい"
[ -e $tmp-err3 ] && error_exit "担当者を確認して下さい"
[ -e $tmp-err4 ] && error_exit "サービス開始時間を確認して下さい"
[ -e $tmp-err5 ] && error_exit "サービス終了時間を確認して下さい"
[ -e $tmp-err6 ] && error_exit "介護保険情報を確認してください"
choufukuErrMsg=$(cat $tmp-choufuku_err_msg)
[ -e $tmp-err7 ] && error_exit "$choufukuErrMsg"
[ -e $tmp-err8 ] && error_exit "２時間ルールのエラーです。"

# 初回は最初の日のサービスに付与される
cat ${tmp}-riyouhyou_work0_hiwaritaio      |
LANG=C sort -k9n,9n -k7n,8n         |
getfirst 1 1                     > $tmp-riyouhyou_shokaisettei

shokaiservicestart=$(self 7 $tmp-riyouhyou_shokaisettei)
shokaiserviceend=$(self 8 $tmp-riyouhyou_shokaisettei)
shokaiserviceday=$(self 9 $tmp-riyouhyou_shokaisettei)

# 初回加算
shokai=$(nameread ServiceJissekiShokaiKasan $namedata | head -1)
[ -z "$shokai" ] && shokai="_"
# 初回加算分も利用表上にレコード追加
# 1日目に初回加算を付与する
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
:>  ${tmp}-riyouhyou_work_shokai
if [ "$shokai" = "1" ] ; then
  echo "$Riyoushaid"  "$TaishouNen" "$TaishouTsuki" "$Kyoukyusha" "$Jigyoushatype" \
"4001" "$shokaiservicestart" "$shokaiserviceend" "$shokaiserviceday" "1" "$KakuteiFlg" > ${tmp}-riyouhyou_work_shokai
fi
cat ${tmp}-riyouhyou_work_shokai           |
LANG=C sort -k1,9                          |
getfirst 1 1                               >> ${tmp}-riyouhyou_work0_hiwaritaio


# 生活連携加算
seikatsu=$(nameread ServiceJissekiSeikatsuKasan $namedata | head -1)
[ -z "$seikatsu" ] && seikatsu="_"
# 生活連携加算分も利用表上にレコード追加
# 1日目に生活連携加算を付与する
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
:>  ${tmp}-riyouhyou_work_seikatsu
if [ "$seikatsu" = "1" ] ; then
  echo "$Riyoushaid"  "$TaishouNen" "$TaishouTsuki" "$Kyoukyusha" "$Jigyoushatype" \
"4002" "$shokaiservicestart" "$shokaiserviceend" "$shokaiserviceday" "1" "$KakuteiFlg" > ${tmp}-riyouhyou_work_seikatsu
fi
cat ${tmp}-riyouhyou_work_seikatsu           |
LANG=C sort -k1,9                          |
getfirst 1 1                               >> ${tmp}-riyouhyou_work0_hiwaritaio


#####################
# 初回加算POMPA作成
#####################
echo "$Riyoushaid" "$Kyoukyusha" "$TaishouNen" "$TaishouTsuki" "$shokai" \
"1" "${sdaytime}" "${USER_ID}" > $tmp-shokai_input

#####################
# 生活連携加算POMPA作成
#####################
echo "$Riyoushaid" "$Kyoukyusha" "$TaishouNen" "$TaishouTsuki" "$seikatsu" \
"1" "${sdaytime}" "${USER_ID}" > $tmp-seikatsu_input

# 予定表のフォーマット作成
mdate ${TaishouNen}${TaishouTsuki}m |
tarr |
# 1:日付 2:実績区分
awk '{print substr($1,7,2),"1"}'   > $tmp-riyouhyou_format

cp $tmp-riyouhyou_format $work_dir/riyouhyou_format
cp ${tmp}-riyouhyou_work0_hiwaritaio $work_dir/riyouhyou_work0_hiwaritaio

# 日付のみのレコード 01,02,03......
dispYoteihyouFormat=$(cat $tmp-riyouhyou_format | delf 2 | yarr | sed 's/ /,/g')

# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
cat ${tmp}-riyouhyou_work0_hiwaritaio |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ 12:日付のみのレコード 01,02,03.....
awk '{print $0,"'$dispYoteihyouFormat'"}' |
sed 's/,/ /g' |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者 5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付           10:介護保険請求
# 11:確定フラグ    12:日付
tarr num=11 |
# それぞれのサービスレコードで日付がマッチすれば13フィールド目に"1"を設定
awk '{if($9==$12){$13="1"}else{$13="_"};print $0}' |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者 5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付           10:介護保険請求
# 11:確定フラグ    12:日付                13:実績フラグ(1or_)
LANG=C sort -k1,8 -k12,13 |
delf 9 |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者 5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:介護保険請求       10:確定フラグ
# 11:日付          12:実績フラグ(1or_)
# 実績のあるものはレコードが重複しているため、実績フラグがついているもののみ残す
getfirst 1 11 |
# 1:利用者ID          2:対象年               3:対象月               4:サービス提供事業者 5:事業者タイプ
# 6:サービスコード    7:サービス提供開始時間 8:サービス提供終了時間 9:介護保険請求       10:確定フラグ
# 11:実績フラグ(1or_)
delf 11 |
# 日数分の実績フラグを横並べにする。
yarr num=10 |
# 11フィールド目以降、つまり日数毎の実績フラグをカンマ区切りにする。
sed 's/ /,/11g' > $tmp-riyouhyou_jisseki_form

cp $tmp-riyouhyou_jisseki_form $work_dir/jisseki_form

# 予定表の実績日付フォーマット作成
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
cat ${tmp}-riyouhyou_work0_hiwaritaio |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者 5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:介護保険請求       10:確定フラグ
delf 9                     |
LANG=C sort -k1,10         |
join1 key=1/10 $tmp-riyouhyou_jisseki_form     |
# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付カンマ区切り 10:介護保険請求
# 11:確定フラグ
self 1/8 11 9 10           > ${tmp}-riyouhyou_work1

cat ${tmp}-riyouhyou_work1 |
LANG=C sort -k1,8          |
# 表のレコードごとにファイルが作成されるため、そのレコードを
# 利用者ＩＤ、サービス提供日、サービスコード、サービス提供時間でユニークにする
uniq -c                    |
self 2/NF 1                > $tmp-riyouhyou_work2

cp ${tmp}-jisseki_work1 $work_dir/jisseki_work1
cp ${tmp}-riyouhyou_work2 $work_dir/riyouhyou_work2



###############################################################
## サービス利用票への反映データ作成
###############################################################

##############################################
# サービスコードマスタよりサービス単位数取得
##############################################

# 時期によって有効なサービスコードの年月日を出す。
ls -F ${home_dir}/TBL/SERVICECODE |
grep / |
sed 's/\///g' |
LANG=C sort -k1,1    |
awk '{print "1",$0}' |
ychange num=1 |
awk '$2<="'$curday'"&&"'$curday'"<$3{print $2}'      > $tmp-dir_date

dir_date=$(cat $tmp-dir_date)

# 加算のサービスコードをセットする（介護／予防）
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_KAIGO        |
awk '$1=="11"{print $2,$25}'                                           |
LANG=C sort -k2,2                                                      > $tmp-add_houmonkaigo_kaigo

cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_YOBO        |
awk '$1=="61"{print $2,$28}'                                           |
LANG=C sort -k2,2                                                      > $tmp-add_houmonkaigo_yobo

# 介護のサービスコードを抽出
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_HOUMONKAIGO      |
tee $tmp-servicecode_name_kaigo                              |
# 1:サービスコード 2:単位数
self 3 NF                                                    |
cat - $tmp-add_houmonkaigo_kaigo                             |
LANG=C sort -k1,1                                            > $tmp-master_servicecode_kaigo
# 特別なサービスコード
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_HOUMONKAIGO_EXTRA > $tmp-master_servicecode_extra

# 予防のサービスコードを抽出
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_HOUMONKAIGO_YOBO      |
tee $tmp-servicecode_name_yobo                              |
# 1:サービスコード 2:単位数
self 3 NF                                                   |
cat - $tmp-add_houmonkaigo_yobo                             |
LANG=C sort -k1,1                                           > $tmp-master_servicecode_yobo

# 加算（介護）のサービスコードを抽出
self 1 2 3 ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_KAIGO > $tmp-servicecode_add_name_kaigo                                                 

# 加算（予防）のサービスコードを抽出
self 1 2 3 ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_YOBO > $tmp-servicecode_add_name_yobo                                             

# 介護と予防のサービスコードをマージ
cat $tmp-servicecode_name_kaigo $tmp-servicecode_name_yobo |
self 2 3 4                                                   > ${tmp}-servicecode_name

# 別表作成用予防サービスコードマスタ
cat $tmp-servicecode_name_yobo |
self 2 3 4 NF-1                                              > ${tmp}-servicecode_yobo

# 介護と予防のサービスコード、および加算（介護、予防）のサービスコードをマージ
cat $tmp-servicecode_add_name_kaigo $tmp-servicecode_add_name_yobo ${tmp}-servicecode_name |
LANG=C sort -k1,2                                            > ${tmp}-servicecode

# 加算（介護・予防）
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_KAIGO       |
self 1 2 NF-2 |
# 1:サービスタイプ 2:サービスコード 3:単価
LANG=C sort -k1,2                          > $tmp-servicecode_master
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_YOBO       |
self 1 2 NF-2 |
# 1:サービスタイプ 2:サービスコード 3:単価
LANG=C sort -k1,2                          >> $tmp-servicecode_master


# サービス加算マスタを抽出(事業所マスタの設定内容より加算のサービスコードを抽出)
cat ${home_dir}/TBL/JIGYOUSHO_MASTER/${master_dir_date}/JIGYOUSHO_ADD |
LANG=C sort -k1,1                          |
# 1:事業所ＩＤ 2:加算サービスコード 3:加算サービス名 4:集計単位 5:計算単位
# 6:単位数
delf NF-2/NF                               > $tmp-service_add_master
# 集計単位によって分ける(mは月毎、dは回数、0は区分限度額対象外、1は区分限度額対象内
cat $tmp-service_add_master                |
awk '$4=="m"'                     |
tee $tmp-kijungai_monthly                  > $tmp-service_add_master_monthly
# 基準限度対象内外（予防で使用）
cat $tmp-service_add_master_monthly        |
awk '$8=="0"'                              |
delf NF                                    > $tmp-service_add_master_taishougai_monthly
cat $tmp-service_add_master_monthly        |
awk '$8=="1"'                              |
delf NF                                    > $tmp-service_add_master_taishounai_monthly

cat $tmp-service_add_master                |
awk '$4=="d"&&$8=="0"'                     |
tee $tmp-kijungai_daily                    |
delf NF                                    > $tmp-service_add_master_taishougai_daily
cat $tmp-service_add_master                |
awk '$4=="d"&&$8=="1"'                     |
tee $tmp-kijunnai_daily                    |
delf NF                                    > $tmp-service_add_master_taishounai_daily

# 限度額対象か否かを判断
cat $tmp-kijungai_monthly $tmp-kijungai_daily  |
# 基準外は"g"
awk '{print $2,"g"}'                       > $tmp-kijungai
cat $tmp-kijunnai_daily                    |
# 基準外は"n"
awk '{print $2,"n"}'                       > $tmp-kijunnai

cat $tmp-kijungai $tmp-kijunnai |
LANG=C sort -k1,1                          > $tmp-gendohantei

cp $tmp-gendohantei $work_dir/gendohantei


###################################
# アンマッチの場合の予定表フォーマット作成
###################################
yoteimonthday=$(mdate ${TaishouNen}${TaishouTsuki}m | retu)

seq ${yoteimonthday}        |
while read num ; do
if [ $num -eq 1 ] ; then
    echo -n "_" >> $tmp-monthday
else
    echo -n ",_" >> $tmp-monthday
fi
done
yoteidayformat=$(cat $tmp-monthday)

cp $tmp-monthday $work_dir/monthday

if [ "${Jigyoushatype}" = "11" ] ; then
##########
# 介護
##########
if [ -s ${data_dir}/CAREPLAN/GETSUGAKU_RIYOU_KAIGO/$Riyoushaid/RIYOUHYOU_RECORD_KAIGO ] ; then
cat ${data_dir}/CAREPLAN/GETSUGAKU_RIYOU_KAIGO/$Riyoushaid/RIYOUHYOU_RECORD_KAIGO  |
awk '$2=="'${Riyoushaid}'"&&$3=="'${TaishouNen}'"&&$4=="'${TaishouTsuki}'"&&$14=="'${Kyoukyusha}'"&&$5=="'${Jigyoushatype}'"'    > $tmp-riyouhyou_record_kaigo_work
fi
# 既存の利用票に反映
if [ -s $tmp-riyouhyou_record_kaigo_work -a -s ${tmp}-riyouhyou_work2 ] ; then
cat $tmp-riyouhyou_record_kaigo_work  |
# キーを先頭に
# 1:利用者ID       2:対象年               3:対象月               4:事業者コード 5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間
self 2 3 4 14 5 6 12 13 0                                                          |
# 重複対応改訂版（2014/07/24）
awk '$5!="11"||$6!="4001"'                                                         |
# 重複対応改訂版（2014/09/24）
awk '$5!="11"||$6!="4002"'                                                         |
LANG=C sort -k1,8                                                                  |
# 利用票のデータとサービス実績データを連結させる
loopj -d@ num=8 - ${tmp}-riyouhyou_work2                                           |
tee $work_dir/riyouhyou_tmp1                                                       |
# 1:利用者ID            2:対象年                3:対象月               4:事業者コード        5:事業者タイプ
# 6:サービスコード      7:サービス提供開始時間  8:サービス提供終了時間 9:固有番号            10:利用者ID
# 11:対象年             12:対象月               13:サービスコード種類  14:サービスコード項目 15:実績確定フラグ
# 16:サービス予定日回数 17:サービス予定月回数   18:サービス実績日回数  19:サービス実績月回数 20:サービス開始時間
# 21:サービス終了時間   22:供給者コード         23:介護保険フラグ      24:サービス単位       25:付随費用
# 26:日割り開始日       27:日割り終了日         28:予定確定フラグ      29:有効フラグ         30:処理時刻
# 31:ユーザID           32:利用票向け実績データ 33:介護保険請求フラグ  34:確定フラグ         35:サービス回数
self 9 1/3 5/6 15/19 7 8 4 23/35                                                   |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月                5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数    10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード         15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日         20:予定確定フラグ
# 21:有効フラグ         22:処理時刻         23:ユーザID          24:利用票向け実績データ 25:介護保険請求フラグ
# 26:確定フラグ         27:サービス回数
# 実績がないものは、予定の内容をそのままセットする
awk '{if($24=="@"){$24=$10};if($25=="@"){$25=$15};if($26=="@"){$26=$7};if($27=="@"){$27=$11};print $0}' |
# 初回レコード重複対応(2014/6/27)
if [ "$shokai" = "1" ] ; then
#awk '$5!="11"||$6!="4001"||$8=="@"{if($5=="11"&&$6=="4001"){$9="1";$8=$24;}print $0}' 
awk '{if($5=="11"&&$6=="4001"){$9="1";$8=$24;}print $0}' 
else 
cat -
fi |
# 生活連携レコード重複対応(2014/9/24)
if [ "$seikatsu" = "1" ] ; then
#awk '$5!="11"||$6!="4001"||$8=="@"{if($5=="11"&&$6=="4001"){$9="1";$8=$24;}print $0}' 
awk '{if($5=="11"&&$6=="4002"){$9="1";$8=$24;}print $0}' 
else 
cat -
fi |
self 1/6 26 8/9 24 27 12/14 25 16/NF-4                                               |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月                5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数    10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード         15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日         20:予定確定フラグ
# 21:有効フラグ         22:処理時刻         23:ユーザID          24:利用票向け実績データ 25:介護保険請求フラグ
# 26:確定フラグ         27:サービス回数
#awk '{if($8=="@"){$9="'${yoteidayformat}'";$8="0"} print $0}'                     |
awk '{if($9=="@"){$8="'${yoteidayformat}'";$9="0"} print $0}'                     |
LANG=C sort -k6,6                                                                 |
# 1:固有番号            2:利用者ID            3:対象年            4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:サービス単位        8:実績確定フラグ    9:サービス予定日回数 10:サービス予定月回数
# 11:サービス実績日回数 12:サービス実績月回数 13:サービス開始時間 14:サービス終了時間  15:供給者コード
# 16:介護保険フラグ     17:サービス単位       18:付随費用         19:日割り開始日      20:日割り終了日
# 21:予定確定フラグ     22:有効フラグ         23:処理時刻         24:ユーザID
join1 key=6 $tmp-master_servicecode_kaigo -                                       |
join2 +@ key=5/6 $tmp-master_servicecode_extra                              |
# 1:固有番号           2:利用者ID            3:対象年              4:対象月              5:サービスコード種類
# 6:サービスコード項目 7:基本単位            8:単位係数            9:追加単位            10:係数1
# 11:係数2             12:係数3              13:係数4              14:係数5              15:サービス単位
# 16:実績確定フラグ    17:サービス予定日回数 18:サービス予定月回数 19:サービス実績日回数 20:サービス実績月回数
# 21:サービス開始時間  22:サービス終了時間   23:供給者コード       24:介護保険フラグ     25:サービス単位
# 26:付随費用          27:日割り開始日       28:日割り終了日       29:予定確定フラグ     30:有効フラグ
# 31:処理時刻          32:ユーザID
awk '{if($7!="@"){keisan=$7+$9+$10*$11*$12*$13*$14*$8*int(((substr($22,1,2)*60+substr($22,4,2))-(substr($21,1,2)*60+substr($21,4,2)))/30);$15=keisan};print $0}'   |
# 1:固有番号            2:利用者ID            3:対象年            4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:サービス単位        8:実績確定フラグ    9:サービス予定日回数 10:サービス予定月回数
# 11:サービス実績日回数 12:サービス実績月回数 13:サービス開始時間 14:サービス終了時間  15:供給者コード
# 16:介護保険フラグ     17:サービス単位       18:付随費用         19:日割り開始日      20:日割り終了日
# 21:予定確定フラグ     22:有効フラグ         23:処理時刻         24:ユーザID
self 1/6 15/NF                        |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数 10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード      15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日      20:予定確定フラグ
self 1/6 8/16 7 18/21                                                             |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数 10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード      15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日      20:予定確定フラグ
# 21:有効フラグ         22:処理時刻         23:ユーザID
awk '{if($17=="@"){$17="0"};if($18=="@"){$18="_"};if($19=="@"){$19="_"};if($20=="@"){$20="1"};print $0,"1","'${sdaytime}'","'${USER_ID}'"}' > $tmp-riyouhyou_input

[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "実績レコード利用票反映エラー"

else

# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付カンマ区切り 10:介護保険請求
# 11:確定フラグ 12:サービス回数
cat ${tmp}-riyouhyou_work2 |
# データがないときはこちら# 2014/5/12修正####
awk '{print "_",$1,$2,$3,$5,$6,$11,"'$yoteidayformat'","0",$12,$9,$7,$8,$4,$10,"0","_","_","_","1","'${sdaytime}'","'${USER_ID}'"}' |
LANG=C sort -k6,6 |
# 単位をセット
join1 key=6 $tmp-master_servicecode_kaigo - |
tee $work_dir/noriyouhyou_input             |
#self 1/6 8/16 7 17/NF                      > $tmp-riyouhyou_input
self 1/6 8/10 12 11 13/16 7 17/NF                      > $tmp-riyouhyou_input

[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "実績レコード利用票反映エラー"
fi


else 
#########
# 予防
#########
: > $tmp-riyouhyou_record_yobo_work
if [ -s ${data_dir}/CAREPLAN/GETSUGAKU_RIYOU_YOBO/$Riyoushaid/RIYOUHYOU_RECORD_YOBO ] ; then
cat ${data_dir}/CAREPLAN/GETSUGAKU_RIYOU_YOBO/$Riyoushaid/RIYOUHYOU_RECORD_YOBO    |
awk '$2=="'${Riyoushaid}'"&&$3=="'${TaishouNen}'"&&$4=="'${TaishouTsuki}'"&&$14=="'${Kyoukyusha}'"&&$5=="'${Jigyoushatype}'"'   > $tmp-riyouhyou_record_yobo_work
fi

# 既存の利用票に反映
if [ -s $tmp-riyouhyou_record_yobo_work  -a -s ${tmp}-riyouhyou_work2 ] ; then
# キーを先頭に
# 1:利用者ID       2:対象年               3:対象月               4:事業者コード 5:事業者タイプ
# 6:サービスコード
# 基本予防の場合は月での請求で時間は見ないため、時間が異なってもアンマッチとしては表示させない。
# うまくいかないため、一旦時間でのアンマッチ処理
# 日割りの対応は後ほど
cat $tmp-riyouhyou_record_yobo_work                                          |
self 2 3 4 14 5 6 12 13 0                                                          |
# 重複対応改訂版（2014/07/24）
awk '$5!="61"||$6!="4001"'                                                         |
# 重複対応改訂版（2014/09/24）
awk '$5!="61"||$6!="4002"'                                                         |
LANG=C sort -k1,8                                                                  |
loopj -d@ num=8 - ${tmp}-riyouhyou_work2                                           |
tee $work_dir/riyouhyou_tmp1                                                       |
# 1:利用者ID            2:対象年                3:対象月               4:事業者コード        5:事業者タイプ
# 6:サービスコード      7:サービス提供開始時間  8:サービス提供終了時間 9:固有番号            10:利用者ID
# 11:対象年             12:対象月               13:サービスコード種類  14:サービスコード項目 15:実績確定フラグ
# 16:サービス予定日回数 17:サービス予定月回数   18:サービス実績日回数  19:サービス実績月回数 20:サービス開始時間
# 21:サービス終了時間   22:供給者コード         23:介護保険フラグ      24:サービス単位       25:付随費用
# 26:日割り開始日       27:日割り終了日         28:予定確定フラグ      29:有効フラグ         30:処理時刻
# 31:ユーザID           32:利用票向け実績データ 33:介護保険請求フラグ  34:確定フラグ         35:サービス回数
#self 7 1/3 5/6 13/17 12 13 4 21/33                                                   |
self 9 1/3 5/6 15/19 7 8 4 23/35                                                   |
#self 2 3 4 14 5 6 12 13 0                                                          |
#LANG=C sort -k1,8                                                                  |
#loopj -d@ num=8 - ${tmp}-riyouhyou_work2                                           |
#tee $work_dir/riyouhyou_tmp1                                                       |
# 1:利用者ID            2:対象年                3:対象月               4:事業者コード        5:事業者タイプ
# 6:サービスコード      7:サービス提供開始時間  8:サービス提供終了時間 9:固有番号            10:利用者ID
# 11:対象年             12:対象月               13:サービスコード種類  14:サービスコード項目 15:実績確定フラグ
# 16:サービス予定日回数 17:サービス予定月回数   18:サービス実績日回数  19:サービス実績月回数 20:サービス開始時間
# 21:サービス終了時間   22:供給者コード         23:介護保険フラグ      24:サービス単位       25:付随費用
# 26:日割り開始日       27:日割り終了日         28:予定確定フラグ      29:有効フラグ         30:処理時刻
# 31:ユーザID           32:利用票向け実績データ 33:介護保険請求フラグ  34:確定フラグ         35:サービス回数
#self 9 1/3 5/6 15/19 7 8 4 23/35                                                   |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月                5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数    10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード         15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日         20:予定確定フラグ
# 21:有効フラグ         22:処理時刻         23:ユーザID          24:利用票向け実績データ 25:介護保険請求フラグ
# 26:確定フラグ         27:サービス回数
awk '{if($24=="@"){$24=$10};if($25=="@"){$25=$15};if($26=="@"){$26=$7};if($27=="@"){$27=$11};print $0}'                        |
# 初回レコード重複対応(2014/6/27)
if [ "$shokai" = "1" ] ; then
#awk '$5!="61"||$6!="4001"||$8=="@"{if($5=="61"&&$6=="4001"){$9="1";$8=$24;}print $0}'
awk '{if($5=="61"&&$6=="4001"){$9="1";$8=$24;}print $0}'
else
cat -
fi |
# 生活連携レコード重複対応(2014/9/24)
if [ "$seikatsu" = "1" ] ; then
#awk '$5!="61"||$6!="4001"||$8=="@"{if($5=="61"&&$6=="4001"){$9="1";$8=$24;}print $0}'
awk '{if($5=="61"&&$6=="4002"){$9="1";$8=$24;}print $0}'
else
cat -
fi |
self 1/6 26 8/9 24 27 12/14 25 16/NF-4                                            |
awk '{if($9=="@"){$8="'${yoteidayformat}'";$9="0"} print $0}'                     |
#awk '{if($8=="@"){$9="'${yoteidayformat}'";$8="0"} print $0}'                     |
LANG=C sort -k6,6                                                                 |
# 1:固有番号            2:利用者ID            3:対象年            4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:サービス単位        8:実績確定フラグ    9:サービス予定日回数 10:サービス予定月回数
# 11:サービス実績日回数 12:サービス実績月回数 13:サービス開始時間 14:サービス終了時間  15:供給者コード
# 16:介護保険フラグ     17:サービス単位       18:付随費用         19:日割り開始日      20:日割り終了日
# 21:予定確定フラグ     22:有効フラグ         23:処理時刻         24:ユーザID
join1 key=6 $tmp-master_servicecode_yobo -                                       |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数 10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード      15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日      20:予定確定フラグ
self 1/6 8/16 7 18/21                                                             |
# 1:固有番号            2:利用者ID          3:対象年             4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:実績確定フラグ    8:サービス予定日回数 9:サービス予定月回数 10:サービス実績日回数
# 11:サービス実績月回数 12:サービス開始時間 13:サービス終了時間  14:供給者コード      15:介護保険フラグ
# 16:サービス単位       17:付随費用         18:日割り開始日      19:日割り終了日      20:予定確定フラグ
# 21:有効フラグ         22:処理時刻         23:ユーザID
awk '{if($17=="@"){$17="0"};if($18=="@"){$18="_"};if($19=="@"){$19="_"};if($20=="@"){$20="1"};print $0,"1","'${sdaytime}'","'${USER_ID}'"}' > $tmp-riyouhyou_input

[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "実績レコード利用票反映エラー"

# 既存の利用票に対して追加する。
else

# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付カンマ区切り 10:介護保険請求
# 11:確定フラグ 12:サービス回数
cat ${tmp}-riyouhyou_work2 |
awk '{print "_",$1,$2,$3,$5,$6,$11,"'$yoteidayformat'","0",$12,$9,$7,$8,$4,$10,"0","_","_","_","1","'${sdaytime}'","'${USER_ID}'"}' |
LANG=C sort -k6,6 |
# 単位をセット
join1 key=6 $tmp-master_servicecode_yobo - |
#self 1/6 8/16 7 17/NF                      > $tmp-riyouhyou_input
self 1/6 8/10 12 11 13/16 7 17/NF                      > $tmp-riyouhyou_input
fi

fi


cp $tmp-riyouhyou_input $work_dir/riyouhyou_jisseki
cp $tmp-riyouhyou_input $tmp-riyouhyou_jisseki_input




###############################
# 実績ID採番
##############################
cat ${tmp}-jisseki_work1 |
awk '$5=="_"'                    > ${tmp}-jisseki_new

cat ${tmp}-jisseki_work1 |
awk '$5!="_"'                    > ${tmp}-jisseki_upd

new_jisseki_num=$(gyo ${tmp}-jisseki_new)

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_jisseki_num -gt 0 ] ; then
last_no="${new_jisseki_num}"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/SERVICE_JISSEKI/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/SERVICE_JISSEKI/${Riyoushaid}/CHOUKI_MOKUHYOU_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/SERVICE_JISSEKI/${Riyoushaid}/JISSEKI_ID ] || echo "0000001" > ${kanri_dir}/SERVICE_JISSEKI/${Riyoushaid}/JISSEKI_ID
# 超えてたらリセット
[ ${new_last_no} -gt 9999999 ] && echo "0000001" > ${kanri_dir}/SERVICE_JISSEKI/${Riyoushaid}/JISSEKI_ID
get_no ${last_no} ${kanri_dir}/SERVICE_JISSEKI/${Riyoushaid}/JISSEKI_ID > $tmp-id_jissekiall

fi
#---------------------------------------------------------------

ycat $tmp-id_jissekiall ${tmp}-jisseki_new      |
self 2/5 1 7/NF                                     > ${tmp}-jisseki_new2

cat ${tmp}-jisseki_upd ${tmp}-jisseki_new2     |
LANG=C sort -k1,5                                   > ${tmp}-jisseki_work_input

cat ${tmp}-jisseki_work_input |
awk '{print $0,"'${Jigyoushatype}'"}'               |
self 1/15 NF 16/NF-1                                > ${tmp}-jisseki_input
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "実績レコード作成エラー"

cp $tmp-jisseki_input $work_dir/jisseki_input
cp $tmp-master_servicecode_kaigo $work_dir/master_servicecode_kaigo
cp $tmp-master_jigyousho_tanka $work_dir/master_jigyousho_tanka

################################################################
####  請求ファイルの生成
################################################################
# 1:利用者ID      2:サービス提供事業者 3:対象年          4:対象月               5:レコードID
# 6:提供日        7:担当ヘルパー       8:同行ヘルパー    9:サービス提供開始時間 10:サービス提供終了時間
# 11:サービス内容 12:単位時間          13:緊急加算フラグ 14:サービスコード      15:請求区分
# 16:有効フラグ   17:処理日            18:ユーザID
#cat ${tmp}-jisseki_work_input                                       |

# 1:利用者ID       2:対象年               3:対象月               4:サービス提供事業者   5:事業者タイプ
# 6:サービスコード 7:サービス提供開始時間 8:サービス提供終了時間 9:実績日付 10:介護保険請求
# 11:確定フラグ
cat ${tmp}-riyouhyou_work0_hiwaritaio |
awk '{print $1,$4,$2,$3,"_",$9,"_","_",$7,$8,"_","_","_",$6,$10,"1","'${sdaytime}'","'${USER_ID}'"}' |
LANG=C sort -k14,14                                            |
# サービス単位セット
if [ "${Jigyoushatype}" = "11" ] ; then
   join1 key=14 $tmp-master_servicecode_kaigo                 |
   join2 +@ key=14 <(delf 1 $tmp-master_servicecode_extra)     |
# 1:利用者ID      2:サービス提供事業者 3:対象年          4:対象月               5:レコードID
# 6:提供日        7:担当ヘルパー       8:同行ヘルパー    9:サービス提供開始時間 10:サービス提供終了時間
# 11:サービス内容 12:単位時間          13:緊急加算フラグ 14:サービスコード      15:基本単位
# 16:単位係数     17:追加単位          18:係数1          19:係数2               20:係数3
# 21:係数4        22:係数5             23:サービス単位   24:請求区分            25:有効フラグ
# 26:処理日       27:ユーザID
   awk '{if($15!="@"){keisan=$15+$17+$16*$18*$19*$20*$21*$22*int(((substr($10,1,2)*60+substr($10,4,2))-(substr($9,1,2)*60+substr($9,4,2)))/30);$23=keisan};print $0}'   |
# 1:固有番号            2:利用者ID            3:対象年            4:対象月             5:サービスコード種類
# 6:サービスコード項目  7:サービス単位        8:実績確定フラグ    9:サービス予定日回数 10:サービス予定月回数
# 11:サービス実績日回数 12:サービス実績月回数 13:サービス開始時間 14:サービス終了時間  15:供給者コード
# 16:介護保険フラグ     17:サービス単位       18:付随費用         19:日割り開始日      20:日割り終了日
# 21:予定確定フラグ     22:有効フラグ         23:処理時刻         24:ユーザID
   self 1/14 23/NF
else
   join1 key=14 $tmp-master_servicecode_yobo
fi |
tee $work_dir/master_servicecode_yobo1 |
# 1:利用者ID      2:サービス提供事業者 3:対象年          4:対象月               5:レコードID
# 6:提供日        7:担当ヘルパー       8:同行ヘルパー    9:サービス提供開始時間 10:サービス提供終了時間
# 11:サービス内容 12:単位時間          13:緊急加算フラグ 14:サービスコード      15:単位数
# 16:請求区分     17:有効フラグ        18:処理日         19:ユーザID
LANG=C sort -k2,2                             |
# 地域単価セット
join1 key=2 $tmp-master_jigyousho_tanka       |
tee $work_dir/master_servicecode_yobo2 |
# 1:利用者ID              2:サービス提供事業者 3:地域単価     4:対象年          5:対象月
# 6:レコードID            7:提供日             8:担当ヘルパー 9:同行ヘルパー    10:サービス提供開始時間
# 11:サービス提供終了時間 12:サービス内容      13:単位時間    14:緊急加算フラグ 15:サービスコード
# 16:単位数               17:請求区分          18:有効フラグ  19:処理日         20:ユーザID
awk '{print $0,"'${Jigyoushatype}'"}'         |
tee $work_dir/houmonkaigo_kasan               |
tee $tmp-houmonkaigo_kasan                    |
# 1:利用者ID              2:サービス提供事業者 3:地域単価     4:対象年          5:対象月
# 6:レコードID            7:提供日             8:担当ヘルパー 9:同行ヘルパー    10:サービス提供開始時間
# 11:サービス提供終了時間 12:サービス内容      13:単位時間    14:緊急加算フラグ 15:サービスコード
# 16:単位数               17:請求区分          18:有効フラグ  19:処理日         20:ユーザID
# 21:サービス事業者コード
self 1 4 5 7 10 11 21 15 2 3 17 16 |
# 1:利用者ID             2:対象年               3:対象月         4:提供日             5:サービス提供開始時間
# 6:サービス提供終了時間 7:サービス事業者コード 8:サービスコード 9:サービス提供事業者 10:地域単価
# 11:請求区分            12:単位数
LANG=C sort -k1,6                  |
# 1:利用者ID             2:対象年               3:対象月         4:提供日             5:サービス提供開始時間
# 6:サービス提供終了時間 7:サービス事業者コード 8:サービスコード 9:サービス提供事業者 10:地域単価
# 11:請求区分            12:単位数              13:有効フラグ    14:処理時間          15:ユーザID
awk '{print $0,"1","'${sdaytime}'","'${USER_ID}'"}' > $tmp-seikyu_input
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "請求レコード作成エラー"

# 訪問介護緊急加算対応
# 緊急時加算は訪問介護
# 加算マスタ取得
cat ${home_dir}/TBL/SERVICECODE/$dir_date/SERVICECODE_ADD_KAIGO     |
# 1:サービスコード 2:加算名 3:加算単位
awk '$1=="11"&&$7=="1"{print "1",$2,$3,$25}'               > $tmp-kasan_kinkyu
cat $tmp-houmonkaigo_kasan                                |
awk '$21=="11"&&$14=="1"{print "1",$0}'                              |
# 1:暫定マッチ区分     2:緊急サービスコード 3:加算名          4:加算単位              5:利用者ID
# 6:サービス提供事業者 7:地域単価           8:対象年          9:対象月                10:レコードID
# 11:提供日            12:担当ヘルパー      13:同行ヘルパー   14:サービス提供開始時間 15:サービス提供終了時間
# 16:サービス内容      17:単位時間          18:緊急加算フラグ 19:サービスコード       20:単位数
# 21:請求区分          22:有効フラグ        23:処理日         24:ユーザID             25:サービス事業者コード
join2 key=1 $tmp-kasan_kinkyu -                           |
awk '{$19=$2;$20=$4;print $0}'                            |
# 1:利用者ID              2:サービス提供事業者 3:地域単価     4:対象年          5:対象月
# 6:レコードID            7:提供日             8:担当ヘルパー 9:同行ヘルパー    10:サービス提供開始時間
# 11:サービス提供終了時間 12:サービス内容      13:単位時間    14:緊急加算フラグ 15:サービスコード
# 16:単位数               17:請求区分          18:有効フラグ  19:処理日         20:ユーザID
# 21:サービス事業者コード
delf 1/4                                                  |
self 1 4 5 7 10 11 21 15 2 3 17 16 |
# 1:利用者ID             2:対象年               3:対象月         4:提供日             5:サービス提供開始時間
# 6:サービス提供終了時間 7:サービス事業者コード 8:サービスコード 9:サービス提供事業者 10:地域単価
# 11:請求区分            12:単位数
LANG=C sort -k1,6                  |
# 1:利用者ID             2:対象年               3:対象月         4:提供日             5:サービス提供開始時間
# 6:サービス提供終了時間 7:サービス事業者コード 8:サービスコード 9:サービス提供事業者 10:地域単価
# 11:請求区分            12:単位数              13:有効フラグ    14:処理時間          15:ユーザID
awk '{print $0,"1","'${sdaytime}'","'${USER_ID}'"}' >> $tmp-seikyu_input

cp $tmp-seikyu_input $tmp-seikyu2_input
cp $tmp-seikyu_input $work_dir/seikyu_input

: > ${tmp}-riyouhyoubeppyou_record
#if [ "${KakuteiFlg}" = "1" ] ; then

#####################################################################
# 介護度マスタを抽出
#####################################################################
#self 1 3 5 14/28 ${home_dir}/CAREPLAN/TMP/RIYOUSHA_KAIGOHOKEN   |
awk '$(NF-2)!="9"' ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN   |
self 1 3 5 14/28  |
join1 key=1 ${tmp}-riyoushaid   >     $tmp-riyousha_kaigohoken_master

[ "$(gyo $tmp-riyousha_kaigohoken_master)" = "0" ] && error_exit "介護度が不明です"

cat $tmp-riyousha_kaigohoken_master                           |
awk '$13<="'${curday}'"&&$18>="'${curday}'"'                  |
# 1:利用者ID               2:介護度 3:保険者名 4:認定年月日 5:有効期間開始年月日
# 6:認定有効期間終了年月日
self 1/3 8 13 18                        |
LANG=C sort -k5,6                       |
getlast 1 1                             > $tmp-cur_riyousha_kaigohoken

# 月初めの介護度を取得
cat $tmp-riyousha_kaigohoken_master                           |
awk '$13<="'${firstday}'"&&$18>="'${firstday}'"'              |
self 1/3 8 13 18                        |
LANG=C sort -k5,6                       |
getlast 1 1                             > $tmp-first_riyousha_kaigohoken

# 月終わりの介護度を取得
cat $tmp-riyousha_kaigohoken_master                           |
awk '$13<="'${lastday}'"&&$18>="'${lastday}'"'              |
self 1/3 8 13 18                        |
LANG=C sort -k5,6                       |
getlast 1 1                             > $tmp-last_riyousha_kaigohoken

prekaigodo=$(self 2 $tmp-first_riyousha_kaigohoken)
curkaigodo=$(self 2 $tmp-cur_riyousha_kaigohoken)
postkaigodo=$(self 2 $tmp-last_riyousha_kaigohoken)

# 月の最初もしくは最後の日まで対象となっていない介護度の場合（201t/01/04）
[ -z "$postkaigodo" ] && postkaigodo=${curkaigodo}
[ -z "$prekaigodo" ] && prekaigodo=${curkaigodo}


if [ ${prekaigodo} -eq ${postkaigodo} ] ; then
   kaigodo=$curkaigodo
elif [ ${prekaigodo} -gt ${postkaigodo}  ] ; then
   kaigodo=$prekaigodo
else
   kaigodo=$postkaigodo
fi
# 介護度マスタを抽出
cat ${home_dir}/TBL/CONFIG/KAIGODO_MASTER                  |
awk '$4<="'$curday'"&&$5>"'$curday'"{print $1,$2,$3}'     |
LANG=C sort -k1,1                                         > ${tmp}-base_kaigodo

kaigokijungendogaku=$(awk '$1=="'${kaigodo}'"{print $3}' ${tmp}-base_kaigodo)

# 介護度が変更されたときは基準限度額の90%
if [ "$flg" = "1" ] ; then
  echo "$kaigokijungendogaku" |
  lcalc '$1*1.0' |
  marume 1.0 > $tmp-kaigokijungendogaku
  kaigokijungendogaku=$(self 1 $tmp-kaigokijungendogaku)
fi

#####################################################################
# 介護度で処理を分ける
#####################################################################
if [ "${kaigodo}" = "1" -o "${kaigodo}" = "2" ] ; then
# 要支援
#####################################################################
# 実績用利用票別表データ作成
#####################################################################
# 1:利用者ID       2:利用年 3:利用月 4:事業者サービス区分 5:事業者ID
# 6:サービスコード 7:単位   8:回数   9:単位合計           10:付随費用
cat $tmp-seikyu_input   |
awk '$13!="9"&&$11=="1"{print $1,$2,$3,$7,$9,$8,$12,$12,"0","1"}'  |
#--------------------------------------------------------------
#--------------------------------------------------------------
# 1:利用者ID       2:利用年 3:利用月 4:事業者サービス区分 5:事業者ID
# 6:サービスコード 7:単位   8:回数   9:単位合計           10:付随費用
self 4 6 0                    |
LANG=C sort -k1,2             |
tee ${work_dir}/beppyou0      |
join1 key=1/2 ${tmp}-servicecode_yobo -  |
delf 1 2                      |
# 予防サービスは月毎に単位数を計算するサービスがあるため、その対応
# 1:サービスコード名   2:集計単位区分 3:利用者ID       4:利用年 5:利用月
# 6:事業者サービス区分 7:事業者ID     8:サービスコード 9:単位数 10:回数
# 11:単位合計          12:付随費用
self 3 4 5 6 7 8 1 2 9 10 11 12  |
tee ${work_dir}/beppyou1 |
LANG=C sort -k5,5 |
join1 key=5 ${tmp}-jigyousho_master -   |
LANG=C sort -k1,5 |
awk '{if($8=="_"){$8=0};$13=$12*(100-$8)/100;print $0}'      |
marume 13.0       > $tmp-beppyou_work1

cp $tmp-beppyou_work1 $work_dir/beppyou_work1_yobo

cat $tmp-beppyou_work1 |
# 集計単位が回数、日数分のもの
awk '$11!="m"'         |
# 1:利用者ID 2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率    9:サービスコード     10:サービスコード名
# 11:単位    12:回数    13:単位合計 14:付随費用 15:介護保険区分
sm2 +count 1 12 13 15 |
delf 11               >      $tmp-beppyou_add_work0
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

cat $tmp-beppyou_work1 |
# 集計単位が月ごとのもの
awk '$11=="m"'         |
# 1:利用者ID 2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率    9:サービスコード     10:サービスコード名
# 11:単位    12:回数    13:単位合計 14:付随費用 15:介護保険区分
sm2 +count 1 13 14 15  |
self 1/12 14 13 15 16    |
delf 11               >  $tmp-beppyou_add2_work0
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード２作成エラー２"

# 加算レコードの追加（回数単位）
cat $tmp-beppyou_add_work0    |
# 1:利用者ID 2:利用年   3:利用月 4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率 9:単位               10:回数
self 1 2 3 4 5 6 7 8 11 12         |
sm2 1 8 9 10                   |
LANG=C sort -k5,5             |
# 1:利用者ID           2:利用年         3:利用月   4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位 9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:単位    14:回数
tee $work_dir/kasan_daily_tmp1   |
self 5 1/NF                      |
join1 key=1 - $tmp-service_add_master_taishounai_daily       |
# 1:利用者ID            2:利用年          3:利用月     4:事業者サービス区分 5:事業者ID
# 6:地域単価            7:事業所名        8:割引率 9:単位               10:回数
# 11:加算サービスコード 12:加算サービス名 13:集計単位  14:計算単位          15:単位数
delf 1                                            |
self 1/5 11/15 6/10                               |
# 1:利用者ID           2:利用年         3:利用月      4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位    9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:割り引き率 14:単位              15:回数
# 16:新合計単位数
tee $work_dir/numly_check                       |
awk '{if($9=="p"){$10=$10*$14};print $0}'   |
marume 10.0                      |
awk '{$16=$10*(100-$13)/100;print $0}'   |
tee $work_dir/kasan_check0       |
marume 16.0        |
tee $work_dir/kasan_check1       |
awk '{$17=$16*$15; print $0}'    |
delf 16            |
marume 16.0        |
self 1/5 11/13 6 7 10 15 16 |
awk '{print $0,"0","1"}'    > $tmp-kasan_numly_record_kijunnai
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"

# 加算レコードの追加（月単位）
cat $tmp-beppyou_add2_work0    |
# 1:利用者ID 2:利用年   3:利用月 4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率 9:単位               10:回数
self 1 2 3 4 5 6 7 8 11 12         |
LANG=C sort -k5,5             |
# 1:利用者ID           2:利用年         3:利用月   4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位 9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:単位    14:回数
tee $work_dir/kasan_monthly_tmp1   |
self 5 1/NF                      |
join1 key=1 - $tmp-service_add_master_taishounai_monthly       |
# 1:利用者ID            2:利用年          3:利用月     4:事業者サービス区分 5:事業者ID
# 6:地域単価            7:事業所名        8:割引率 9:単位               10:回数
# 11:加算サービスコード 12:加算サービス名 13:集計単位  14:計算単位          15:単位数
delf 1                                            |
self 1/5 11/15 6/10                               |
# 1:利用者ID           2:利用年         3:利用月      4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位    9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:割り引き率 14:単位              15:回数
# 16:新合計単位数
tee $work_dir/monthly_check                       |
awk '{if($9=="p"){$10=$10*$14};print $0}'   |
marume 10.0                      |
awk '{$16=$10*(100-$13)/100;print $0}'   |
tee $work_dir/kasan_check2       |
marume 16.0        |
tee $work_dir/kasan_check3       |
####################################
# 月単位のため、回数＊単位を行わない!!!!!!!!!!!!
####################################
awk '{$17=$16; print $0}'    |
delf 16            |
marume 16.0        |
self 1/5 11/13 6 7 10 15 16 |
awk '{print $0,"0","1"}'    > $tmp-kasan_monthly_record_kijunnai
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"


# 加算レコードの追加（基準外回数単位）
cat $tmp-beppyou_add_work0    |
# 加算計算時に既にある加算は省く（4000は緊急時加算だが、予防はない）
#awk '$9!="4000"||$9!="4001"||$9!="4002"'              |
# 1:利用者ID 2:利用年   3:利用月 4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率 9:単位               10:回数
self 1 2 3 4 5 6 7 8 11 12         |
sm2 1 8 9 10                   |
LANG=C sort -k5,5             |
# 1:利用者ID           2:利用年         3:利用月   4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位 9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:単位    14:回数
tee $work_dir/kasan_daily_tmp2   |
self 5 1/NF                      |
join1 key=1 - $tmp-service_add_master_taishougai_daily       |
# 1:利用者ID            2:利用年          3:利用月     4:事業者サービス区分 5:事業者ID
# 6:地域単価            7:事業所名        8:割り引き率 9:単位               10:回数
# 11:加算サービスコード 12:加算サービス名 13:集計単位  14:計算単位          15:単位数
delf 1                                            |
self 1/5 11/15 6/10                               |
# 1:利用者ID           2:利用年         3:利用月      4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位    9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:割り引き率 14:単位              15:回数
# 16:新合計単位数
tee $work_dir/numly_check2                       |
awk '{if($9=="p"){$10=$10*$14};print $0}'   |
marume 10.0                      |
awk '{$16=$10*(100-$13)/100;print $0}'   |
tee $work_dir/kasan_check2       |
marume 16.0        |
tee $work_dir/kasan_check3       |
awk '{$17=$16*$15; print $0}'    |
delf 16            |
marume 16.0        |
self 1/5 11/13 6 7 10 15 16 |
# 限度額計算をスキップするため、基準内限度額を合計単位数、基準外限度額を０でセット。
awk '{print $0,"0","1",$13,"0"}'    > $tmp-kasan_numly_record_kijungai
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"

############################################################################################
# 重複している加算を省く（事業者マスタを参照して自動的に加算ではなく、意図的に入力した加算）
############################################################################################
self 4 9 0 $tmp-beppyou_add_work0 |
LANG=C sort -k1,2                 |
join1 +ng key=1/2 $tmp-servicecode_master 2>$tmp-beppyou_add_work0_noadd_work

delf 1 2 $tmp-beppyou_add_work0_noadd_work > $tmp-beppyou_add_work0_noadd

self 4 9 0 $tmp-beppyou_add2_work0 |
LANG=C sort -k1,2                 |
join1 +ng key=1/2 $tmp-servicecode_master 2>$tmp-beppyou_add2_work0_noadd_work

delf 1 2 $tmp-beppyou_add2_work0_noadd_work > $tmp-beppyou_add2_work0_noadd

cat $tmp-beppyou_add_work0_noadd $tmp-beppyou_add2_work0_noadd $tmp-kasan_numly_record_kijunnai $tmp-kasan_monthly_record_kijunnai |
LANG=C sort -k6nr,6nr -k5,5   |
# 1:利用者ID              2:利用年          3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価              7:事業所名        8:割引率    9:サービスコード     10:サービスコード名
# 11:単位                 12:回数           13:単位合計 14:付随費用          15:介護保険区分
# 16:基準内限度額対象単位 17:基準外対象単位
# 区分基準限度単位数を超えた場合、地域単価が高いサービスから単位数を割り振る
awk 'BEGIN {gendogaku='${kaigokijungendogaku}'}{if($15>0){gendogaku=gendogaku-$13;if(gendogaku>0){kijunnaigendogaku=$13;kijungaigendogaku=0}else{kijunnaigendogaku=$13+gendogaku;if(kijunnaigendogaku<0){kijunnaigendogaku=0};kijungaigendogaku=$13-kijunnaigendogaku}}else{kijunnaigendogaku="0";kijungaigendogaku=$13};print $0,kijunnaigendogaku,kijungaigendogaku}'    > $tmp-gendogaku_anbun_syuuryou

cat $tmp-gendogaku_anbun_syuuryou $tmp-kasan_numly_record_kijungai |
# 1:利用者ID        2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価        7:事業所名 8:割引率    9:サービスコード     10:サービスコード>名
# 11:単位           12:回数    13:単位合計 14:付随費用          15:基準内限度額対>象単位
# 16:基準外対象単位
self 1/14 16/NF               |
tee ${work_dir}/beppyou_gendo |
LANG=C sort -k1,7  |
# 介護保険対象は区分限度額内、利用者負担は10%＋区分限度額超の対象分。
# 1:利用者ID        2:利用年      3:利用月      4:事業者サービス区分 5:事業者ID
# 6:地域単価        7:事業所名    8:割引率      9:サービスコード     10:サービスコード名
# 11:単位           12:回数       13:単位合計   14:付随費用          15:基準内限度額対象単位
# 16:基準外対象単位 17:請求総額   18:国保連請求 19:個人請求額        20:基準外請求総額
# 21:割引後単位     22:明細コード
##awk '{$17=int($13*$6);kaigotaisho=int($15*$6*(100-'${kyufuwariai}')/100);$18=int($15*$6)-kaigotaisho;if($18-int($18)>0){$18=$18+1};$19=kaigotaisho;$20=kaigotaisho+int($16*$6);$21=int($11*(100-$8)/100);print $0}'  |
awk '{$17=int($13*$6);kijunnaigendogaku=int($15*$6);kaigotaisho=int(kijunnaigendogaku*'${kyufuwariai}'/100);$18=kaigotaisho;$19=kijunnaigendogaku-kaigotaisho;$20=int($16*$6);$21=$11*(100-$8)/100;print $0,"n"}'  |
marume 21.0              |
tee ${work_dir}/beppyou4 |
# 1:明細コード        2:利用者ID              3:利用年          4:利用月    5:事業者サービス区分
# 6:事業者ID          7:地域単価              8:事業所名        9:割引率    10:サービスコード
# 11:サービスコード名 12:単位                 13:割引後単位     14:回数     15:単位合計
# 16:付随費用         17:基準内限度額対象単位 18:基準外対象単位 19:請求総額 20:国保連請求
# 21:個人請求額       22:基準外請求総額
self 22 1/11 21 12/20   |
sm4 2 9 10 13 14 22 |
awk '{if(NF==21){print "j",$0}else{print $0}}'  |
tee ${work_dir}/beppyou5 |
# 1:明細表示コード                2:利用者ID              3:利用年          4:利用月  5:事業者サービス区分
# 6:事業者ID                  7:地域単価              8:事業所名        9:割引率  10:サービスコード
# 11:サービスコード名         12:単位                 13:単位（割引後） 14:回数   15:単位合計
# 16:付随費用                 17:基準内限度額対象単位 18:基準外対象単位 19:請求額 20:介護保険給付額
# 21:個人負担額（保険対象内） 22:個人負担額（全額） 23:種類限度額超 24:種類限度額内 25:パーセント
#########  種類限度額内単位は単位合計をセット
awk '{print $0,"0",$15,"1"}'  > $tmp-beppyou_add_work1
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

# 加算レコードの追加（月単位）
cat $tmp-beppyou_add_work1    |
getlast 2 6                   |
self 6 1/NF                   |
LANG=C sort -k1,1             |
tee $work_dir/monthly_add1    |
# 1:事業者コード       2:明細表示コード            3:利用者ID              4:利用年          5:利用月
# 6:事業者サービス区分 7:事業者ID                  8:地域単価              9:事業所名        10:割引率
# 11:サービスコード    12:サービスコード名         13:単位                 14:単位（割引後） 15:回数
# 16:単位合計          17:付随費用                 18:基準内限度額対象単位 19:基準外対象単位 20:請求額
# 21:介護保険給付額    22:個人負担額（保険対象内） 23:個人負担額（全額）   24:種類限度額超   25:種類限度額内
# 26:パーセント        27:加算サービスコード       28:加算サービス名       29:集計単位       30:計算単位
# 31:単位数 32:介護度
join1 key=1 - $tmp-service_add_master_taishougai_monthly      |
tee $work_dir/monthly_add2    |
self 2/7 27/NF 8/26           |
# 2014/5/2修正？
#delf 13                       |
# 1:明細表示コード  2:利用者ID                  3:利用年                4:利用月          5:事業者サービス区分
# 6:事業者ID        7:加算サービスコード        8:加算サービス名        9:集計単位        10:計算単位
# 11:単位数         12:介護度                   13:地域単価             14:事業所名       15:割引率
# 16:サービスコード 17:サービスコード名         18:単位                 19:単位（割引後） 20:回数
# 21:単位合計       22:付随費用                 23:基準内限度額対象単位 24:基準外対象単位 25:請求額
# 26:介護保険給付額 27:個人負担額（保険対象内） 28:個人負担額（全額）   29:種類限度額超   30:種類限度額内
# 31:パーセント
# パーセンテージの場合の四捨五入計算
awk '{if($10=="p"){addtani=$21*$11;$31=$11;}else{addtani=$11};$18=addtani;$1="a";$16=$7;$17=$8;print $0}' |
marume 18.0                   |
# 介護度チェックをここでしたほうがいいかも
delf 12                       |
self 1/6 12/NF                |
# 1:明細表示コード            2:利用者ID              3:利用年          4:利用月        5:事業者サービス区分
# 6:事業者ID                  7:地域単価              8:事業所名        9:割引率        10:サービスコード
# 11:サービスコード名         12:単位                 13:単位（割引後） 14:回数         15:単位合計
# 16:付随費用                 17:基準内限度額対象単位 18:基準外対象単位 19:請求額       20:介護保険給付額
# 21:個人負担額（保険対象内） 22:個人負担額（全額）   23:種類限度額超   24:種類限度額内 25:パーセント
# 加算レコードの計算、生成
##########  種類限度額内単位は単位合計をセット
#awk '{$13=int($12*(100-$9)/100);$14="1";$15=$13*$14;$16="0";if(($17-$15)>0){$17=$15;$18="0"}else{$17="0";$18=$15};$19=int($15*$7);kaigotaisho=int($19*(100-'${kyufuwariai}')/100);$20=$19-kaigotaisho;$21=kaigotaisho;$22=int($18*$7);$23="0";$24=$15;print $0}'                     >  $tmp-kasan_monthly_record
awk '{$13=int($12*(100-$9)/100);$14="1";$15=$13*$14;$16="0";if(($17-$15)>0){$17=$15;$18="0"}else{$17="0";$18=$15};$19=int($15*$7);$20=int($19*'${kyufuwariai}'/100);kaigotaisho=$19-$20;$21=kaigotaisho;$22=int($18*$7);$23="0";$24=$15;print $0}'                     >  $tmp-kasan_monthly_record
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"

cp $tmp-kasan_monthly_record $work_dir/kasan_monthly_record

cp $tmp-beppyou_add_work1 $work_dir/beppyou_add_work1

cat $tmp-beppyou_add_work1 $tmp-kasan_monthly_record  |
##################### 2014/5/4 修正した部分 ########################
awk '{if($1=="a"){$15="("$15")";$17="("$17")";$24="("$24")"};print $0}'   |
LANG=C sort -k7,7nr -k6,6 -k1,1r -k10,10    |
sm4 2 8 9 13 14 24           |
sed 's/(//g'                 |
sed 's/)//g'                 |
awk '{if(NF=="23"){print "t",$0,"1"}else{print $0}}'       |
awk '{if(NF=="24"){print $0,"1"}else{print $0}}'       |
tee $work_dir/houmnkaigo_riyouhyoubeppyou_keisanmae |
#lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$17*$7,$20,$21,$18*$7,$23,$24,$25' |
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$17*$7,$20,$21,$15*$7,$23,$24,$25' |
marume -sage 19.0 22.0 |
#lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$19*'${kyufuwariai}'/100,$21,$22,$23,$24,$25' |
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$19*'${kyufuwariai}'/100,$21,$22-$19,$23,$24,$25' |
marume -sage 20.0 |
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$19-$20,$22,$23,$24,$25' > $tmp-syukeimae

[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表請求レコード作成エラー"

# 最終集計(各集計のレコードを足すだけ)
cat $tmp-syukeimae |
awk '$1=="t"||$1=="a"' |
awk '{if($1=="a"){$15="("$15")";$17="("$17")";$24="("$24")"};print $0}'   |
sm2 0 0 14 24 |
awk '{print "@","@","@","@","@","@","@","@","@","@","@","@","@",$0}'  > $tmp-sousyukei

cat $tmp-syukeimae $tmp-sousyukei |
#awk '{if($1=="a"){$15="("$15")";$17="("$17")";$24="("$24")"};print $0}'   |
##################### 2014/5/4 修正した部分 ########################
# 区分限度額外のものは基準内限度額単位からは外す
#LANG=C sort -k7,7nr -k6,6 -k1,1r -k10,10    |
#sm5 1 13 14 24          |
awk '{if(NF==24){print $0,"1"}else{print $0}}'    |
awk '{print $0,"'${kyufuwariai}'"}'   |
self 2/26 1             |
awk '$26!="@"&&$26!="j"&&$26!="t"'    >  ${tmp}-riyouhyoubeppyou_record
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

cat ${tmp}-riyouhyoubeppyou_record    |
# 1:利用者ID              2:利用年                    3:利用月              4:事業者サービス区分 5:事業者ID
# 6:事業所名              7:サービスコード            8:サービスコード名    9:単位               10:割引率
# 11:単位（割引後）       12:回数                     13:単位合計           14:種類限度額超      15:種類限度額内
# 16:基準内限度額対象単位 17:基準外対象単位           18:地域単価           19:請求額            20:給付率
# 21:介護保険給付額       22:個人負担額（保険対象内） 23:個人負担額（全額） 24:明細コード
self 1/5 7 9 10 11 8 12 13 14 22 23 16 17 6 18 25 19 20 21 26 |
rank |
# 1:順番          2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID      7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率       12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内 17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率       22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# サービスコードを基にして加算の限度額対象有無のフラグをつける
self 8 0 |
LANG=C sort -k1,1      |
tee $work_dir/hanteimae_yobo |
# 限度額内対象かどうかを判定するフラグをセット
join2 +n key=1 $tmp-gendohantei |
# 1:サービスコード      2:限度額判定フラグ   3:順番          4:利用者ID              5:利用年
# 6:利用月              7:事業者サービス区分 8:事業者ID      9:事業所名              10:サービスコード
# 11:サービスコード名   12:単位              13:割引率       14:単位（割引後）       15:回数
# 16:単位合計           17:種類限度額超      18:種類限度額内 19:基準内限度額対象単位 20:基準外対象単位
# 21:地域単価           22:請求額            23:給付率       24:介護保険給付額       25:個人負担額（保険対象内）
# 26:個人負担額（全額） 27:明細コード
delf 1                 |
self 2/NF 1            |
# 1:順番              2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID          7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率           12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内     17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率           22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# 26:限度額判定フラグ
awk '{print $0,"0"}'   |
# 1:順番              2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID          7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率           12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内     17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率           22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# 26:限度額判定フラグ(g:限度額対象外 n:限度額対象内) 27:請求確定フラグ（固定０）
LANG=C sort -k1,1      |
awk '{print $0,"1","'${sdaytime}'","'${USER_ID}'"}' > ${tmp}-riyouhyoubeppyou_record_input


else
#####################################################################
# 要介護
#####################################################################
# 実績用利用票別表データ作成
#####################################################################
# 1:利用者ID       2:利用年 3:利用月 4:事業者サービス区分 5:事業者ID
# 6:サービスコード 7:単位   8:回数   9:単位合計           10:付随費用
cat $tmp-seikyu_input   |
awk '$13!="9"&&$11=="1"{print $1,$2,$3,$7,$9,$8,$12,$12,"0","1"}'  |
#--------------------------------------------------------------
#--------------------------------------------------------------
# 1:利用者ID       2:利用年 3:利用月 4:事業者サービス区分 5:事業者ID
# 6:サービスコード 7:単位   8:回数   9:単位合計           10:付随費用
# 11:介護保険対象
self 4 6 0                    |
LANG=C sort -k1,2             |
tee ${work_dir}/beppyou0      |
join1 key=1/2 ${tmp}-servicecode -  |
delf 1 2                      |
# 1:サービスコード名 2:利用者ID       3:利用年 4:利用月 5:事業者サービス区分
# 6:事業者ID         7:サービスコード 8:単位   9:単位   10:付随費用
# 11:介護保険対象
self 2 3 4 5 6 7 1 8 9 10 11  |
tee ${work_dir}/beppyou1 |
LANG=C sort -k5,5 |
join1 key=5 ${tmp}-jigyousho_master -   |
LANG=C sort -k1,5 |
awk '{if($8=="_"){$8=0};$12=$11*(100-$8)/100;print $0}'      |
marume 12.0       |
# 1:利用者ID 2:利用年    3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名  8:割引率    9:サービスコード     10:サービスコード名
# 11:単位    12:単位合計 13:付随費用 14:介護保険区分
tee ${work_dir}/beppyou2 |
# 1:利用者ID 2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率    9:サービスコード     10:サービスコード名
# 11:単位    12:回数    13:単位合計 14:付随費用 15:介護保険区分
sm2 +count 1 11 12 14 >   $tmp-beppyou_add_work0
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

# 加算レコードの追加（回数単位）
cat $tmp-beppyou_add_work0    |
# 1:利用者ID 2:利用年   3:利用月 4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率 9:単位               10:回数
self 1 2 3 4 5 6 7 8 11 12         |
sm2 1 8 9 10                   |
LANG=C sort -k5,5             |
# 1:利用者ID           2:利用年         3:利用月   4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位 9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:単位    14:回数
tee $work_dir/kasan_daily_tmp1   |
self 5 1/NF                      |
join1 key=1 - $tmp-service_add_master_taishounai_daily       |
# 1:利用者ID            2:利用年          3:利用月     4:事業者サービス区分 5:事業者ID
# 6:地域単価            7:事業所名        8:割り引き率 9:単位               10:回数
# 11:加算サービスコード 12:加算サービス名 13:集計単位  14:計算単位          15:単位数
delf 1                                            |
self 1/5 11/15 6/10                               |
# 1:利用者ID           2:利用年         3:利用月      4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位    9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:割り引き率 14:単位              15:回数
# 16:新合計単位数
tee $work_dir/numly_check                       |
#awk '{if($9=="a"){tmpg=$10*(100-$13)/100;tmpg1=int(tmpg*10);if(substr(tmpg1,length(tmpg1),1)<5){goukeitani=int(tmpg)*$15;}else{goukeitani=int(tmpg+1)*$15;}}else{tmpg=$10*$14*(100-$13)/100;tmpg1=int(tmpg*10);if(substr(tmpg1,length(tmpg1),1)<5){goukeitani=int(tmpg)*$15;$10=int($10*$14)}else{goukeitani=int(tmpg+1)*$15;$10=int($10*$14)+1}};print $0,goukeitani}'   |
awk '{if($9=="p"){$10=$10*$14};print $0}'   |
marume 10.0                      |
awk '{$16=$10*(100-$13)/100;print $0}'   |
tee $work_dir/kasan_check0       |
marume 16.0        |
tee $work_dir/kasan_check1       |
awk '{$17=$16*$15; print $0}'    |
delf 16            |
marume 16.0        |
self 1/5 11/13 6 7 10 15 16 |
awk '{print $0,"0","1"}'    > $tmp-kasan_numly_record_kijunnai
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"

cp $tmp-kasan_numly_record_kijunnai $work_dir/kasan_numly_record_kijunnai

# 加算レコードの追加（基準外回数単位）
cat $tmp-beppyou_add_work0    |
# 加算計算時に既にある加算は省く（4000は緊急時加算,4001は初回加算）
awk '$9!="4000"||$9!="4001"||$9!="4002"'              |
# 1:利用者ID 2:利用年   3:利用月 4:事業者サービス区分 5:事業者ID
# 6:地域単価 7:事業所名 8:割引率 9:単位               10:回数
self 1 2 3 4 5 6 7 8 11 12         |
sm2 1 8 9 10                   |
LANG=C sort -k5,5             |
# 1:利用者ID           2:利用年         3:利用月   4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位 9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:単位    14:回数
tee $work_dir/kasan_daily_tmp2   |
self 5 1/NF                      |
join1 key=1 - $tmp-service_add_master_taishougai_daily       |
# 1:利用者ID            2:利用年          3:利用月     4:事業者サービス区分 5:事業者ID
# 6:地域単価            7:事業所名        8:割り引き率 9:単位               10:回数
# 11:加算サービスコード 12:加算サービス名 13:集計単位  14:計算単位          15:単位数
delf 1                                            |
self 1/5 11/15 6/10                               |
# 1:利用者ID           2:利用年         3:利用月      4:事業者サービス区分 5:事業者ID
# 6:加算サービスコード 7:加算サービス名 8:集計単位    9:計算単位           10:単位数
# 11:地域単価          12:事業所名      13:割り引き率 14:単位              15:回数
# 16:新合計単位数
tee $work_dir/numly_check2                       |
#awk '{if($9=="a"){tmpg=$10*(100-$13)/100;tmpg1=int(tmpg*10);if(substr(tmpg1,length(tmpg1),1)<5){goukeitani=int(tmpg)*$15;}else{goukeitani=int(tmpg+1)*$15;}}else{tmpg=$10*$14*(100-$13)/100;tmpg1=int(tmpg*10);if(substr(tmpg1,length(tmpg1),1)<5){goukeitani=int(tmpg)*$15;$10=int($10*$14)}else{goukeitani=int(tmpg+1)*$15;$10=int($10*$14)+1}};print $0,goukeitani}'   |
awk '{if($9=="p"){$10=$10*$14};print $0}'   |
marume 10.0                      |
awk '{$16=$10*(100-$13)/100;print $0}'   |
tee $work_dir/kasan_check2       |
marume 16.0        |
tee $work_dir/kasan_check3       |
awk '{$17=$16*$15; print $0}'    |
delf 16            |
marume 16.0        |
self 1/5 11/13 6 7 10 15 16 |
# 限度額計算をスキップするため、基準内限度額を合計単位数、基準外限度額を０でセット。
awk '{print $0,"0","1",$13,"0"}'    > $tmp-kasan_numly_record_kijungai
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"

cp $tmp-kasan_numly_record_kijungai $work_dir/kasan_numly_record_kijungai

cat $tmp-beppyou_add_work0 $tmp-kasan_numly_record_kijunnai  |
LANG=C sort -k6nr,6nr    |
# 1:利用者ID              2:利用年          3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価              7:事業所名        8:割引率    9:サービスコード     10:サービスコード名
# 11:単位                 12:回数           13:単位合計 14:付随費用          15:介護保険区分
# 16:基準内限度額対象単位 17:基準外対象単位
# 区分基準限度単位数を超えた場合、地域単価が高いサービスから単位数を割り振る
# 介護保険外の場合は区分外支給限度額にそのまま単位をセットし、区分内支給限度額を０にする
awk 'BEGIN {gendogaku='${kaigokijungendogaku}'}{if($15>0){gendogaku=gendogaku-$13;if(gendogaku>0){kijunnaigendogaku=$13;kijungaigendogaku=0}else{kijunnaigendogaku=$13+gendogaku;if(kijunnaigendogaku<0){kijunnaigendogaku=0};kijungaigendogaku=$13-kijunnaigendogaku}}else{kijunnaigendogaku="0";kijungaigendogaku=$13};print $0,kijunnaigendogaku,kijungaigendogaku}'  > $tmp-gendogaku_anbun_syuuryou
# 1:利用者ID        2:利用年   3:利用月    4:事業者サービス区分 5:事業者ID
# 6:地域単価        7:事業所名 8:割引率    9:サービスコード     10:サービスコード名
# 11:単位           12:回数    13:単位合計 14:付随費用          15:基準内限度額対象単位
# 16:基準外対象単位

cat $tmp-gendogaku_anbun_syuuryou $tmp-kasan_numly_record_kijungai |
self 1/14 16/NF               |
tee ${work_dir}/beppyou_gendo |
LANG=C sort -k1,7  |
# 介護保険対象は区分限度額内、利用者負担は10%＋区分限度額超の対象分。
##awk '{$17=int($13*$6);kaigotaisho=int($15*$6*(100-'${kyufuwariai}')/100);$18=int($15*$6)-kaigotaisho;if($18-int($18)>0){$18=$18+1};$19=kaigotaisho;$20=kaigotaisho+int($16*$6);$21=int($11*(100-$8)/100);print $0}'  |
#awk '{$17=int($13*$6);kijunnaigendogaku=int($15*$6);kaigotaisho=int(kijunnaigendogaku*'${kyufuwariai}'/100);$18=kaigotaisho;$19=kijunnaigendogaku-kaigotaisho;$20=int($16*$6);$21=$11*(100-$8)/100;print $0,"n"}'  |
awk '{$17=int($13*$6);kijunnaigendogaku=int($15*$6);kaigotaisho=int(kijunnaigendogaku*'${kyufuwariai}'/100);$18=kaigotaisho;$19=kijunnaigendogaku-kaigotaisho;$20=$17-kijunnaigendogaku;$21=$11*(100-$8)/100;print $0,"n"}'  |
tee $work_dir/kasan_check2  |
marume 21.0              |
tee ${work_dir}/beppyou4 |
self 22 1/11 21 12/20   |
sm4 2 9 10 13 14 22 |
awk '{if(NF==21){print "j",$0}else{print $0}}'  |
tee ${work_dir}/beppyou5 |
# 1:明細表示コード                2:利用者ID              3:利用年          4:利用月  5:事業者サービス区分
# 6:事業者ID                  7:地域単価              8:事業所名        9:割引率  10:サービスコード
# 11:サービスコード名         12:単位                 13:単位（割引後） 14:回数   15:単位合計
# 16:付随費用                 17:基準内限度額対象単位 18:基準外対象単位 19:請求額 20:介護保険給付額
# 21:個人負担額（保険対象内） 22:個人負担額（全額） 23:種類限度額超 24:種類限度額内 25:パーセント
###### 種類限度額内単位は単位額合計をセット
awk '{print $0,"0",$15,"1"}'  >  $tmp-beppyou_add_work1
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

# 加算レコードの追加（月単位）
cat $tmp-beppyou_add_work1    |
getlast 2 6                   |
self 6 1/NF                   |
LANG=C sort -k1,1             |
tee $work_dir/monthly_add1    |
# 1:事業者コード       2:明細表示コード            3:利用者ID              4:利用年          5:利用月
# 6:事業者サービス区分 7:事業者ID                  8:地域単価              9:事業所名        10:割引率
# 11:サービスコード    12:サービスコード名         13:単位                 14:単位（割引後） 15:回数
# 16:単位合計          17:付随費用                 18:基準内限度額対象単位 19:基準外対象単位 20:請求額
# 21:介護保険給付額    22:個人負担額（保険対象内） 23:個人負担額（全額）   24:種類限度額超   25:種類限度額内
# 26:パーセント        27:加算サービスコード       28:加算サービス名       29:集計単位       30:計算単位
# 31:単位数 32:介護度
join1 key=1 - $tmp-service_add_master_monthly      |
tee $work_dir/monthly_add2    |
self 2/7 27/NF 8/26           |
# 2014/5/2修正？
delf 13                       |
# 1:明細表示コード  2:利用者ID                  3:利用年                4:利用月          5:事業者サービス区分
# 6:事業者ID        7:加算サービスコード        8:加算サービス名        9:集計単位        10:計算単位
# 11:単位数         12:介護度                   13:地域単価             14:事業所名       15:割引率
# 16:サービスコード 17:サービスコード名         18:単位                 19:単位（割引後） 20:回数
# 21:単位合計       22:付随費用                 23:基準内限度額対象単位 24:基準外対象単位 25:請求額
# 26:介護保険給付額 27:個人負担額（保険対象内） 28:個人負担額（全額）   29:種類限度額超   30:種類限度額内
# 31:パーセント
# パーセンテージの場合の四捨五入計算
awk '{if($10=="p"){addtani=$21*$11;$31=$11;}else{addtani=$11};$18=addtani;$1="a";$16=$7;$17=$8;print $0}' |
marume 18.0                   |
# 介護度チェックをここでしたほうがいいかも
delf 12                       |
self 1/6 12/NF                |
# 1:明細表示コード            2:利用者ID              3:利用年          4:利用月        5:事業者サービス区分
# 6:事業者ID                  7:地域単価              8:事業所名        9:割引率        10:サービスコード
# 11:サービスコード名         12:単位                 13:単位（割引後） 14:回数         15:単位合計
# 16:付随費用                 17:基準内限度額対象単位 18:基準外対象単位 19:請求額       20:介護保険給付額
# 21:個人負担額（保険対象内） 22:個人負担額（全額）   23:種類限度額超   24:種類限度額内 25:パーセント
# 加算レコードの計算、生成
####### 種類限度額内単位は基準内限度単位をセット
#awk '{$13=int($12*(100-$9)/100);$14="1";$15=$13*$14;$16="0";if(($17-$15)>0){$17=$15;$18="0"}else{$17="0";$18=$15};$19=int($15*$7);kaigotaisho=int($19*(100-'${kyufuwariai}')/100);$20=$19-kaigotaisho;$21=kaigotaisho;$22=int($18*$7);$23="0";$24=$15;print $0}'                     >  $tmp-kasan_monthly_record
#awk '{$13=int($12*(100-$9)/100);$14="1";$15=$13*$14;$16="0";if(($17-$15)>0){$17=$15;$18="0"}else{$17="0";$18=$15};$19=int($15*$7);$20=int($19*'${kyufuwariai}'/100);kaigotaishou=$19-$20;$21=kaigotaisho;$22=int($18*$7);$23="0";$24=$15;print $0}'                     >  $tmp-kasan_monthly_record
# 2014/5/2 修正
awk '{$13=int($12*(100-$9)/100);$14="1";$15=$13*$14;$16="0";$17=$15;$18="0";$19=int($15*$7);$20=int($19*'${kyufuwariai}'/100);kaigotaishou=$19-$20;$21=kaigotaisho;$22=int($18*$7);$23="0";$24=$15;print $0}'                     >  $tmp-kasan_monthly_record
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表加算レコード作成エラー"

cp $tmp-kasan_monthly_record $work_dir/kasan_monthly_record

cat $tmp-beppyou_add_work1 $tmp-kasan_monthly_record |
awk '{if($1=="a"){$15="("$15")";$17="("$17")";$24="("$24")"};print $0}'   |
##################### 2014/5/4 修正した部分 ########################
LANG=C sort -k7,7nr -k6,6 -k1,1r -k10,10    |
sm4 2 8 9 13 14 24           |
sed 's/(//g'                 |
sed 's/)//g'                 |
awk '{if(NF=="23"){print "t",$0,"1"}else{print $0}}'       |
awk '{if(NF=="24"){print $0,"1"}else{print $0}}'       |
tee $work_dir/houmnkaigo_riyouhyoubeppyou_keisanmae |
#lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$17*$7,$20,$21,$18*$7,$23,$24,$25' |
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$17*$7,$20,$21,$15*$7,$23,$24,$25' |
marume -sage 19.0 22.0 |
#lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$19*'${kyufuwariai}'/100,$21,$22,$23,$24,$25' |
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$19*'${kyufuwariai}'/100,$21,$22-$19,$23,$24,$25' |
marume -sage 20.0 |
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$19-$20,$22,$23,$24,$25' > $tmp-syukeimae

[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表請求レコード作成エラー"

# 最終集計(各集計のレコードを足すだけ)
cat $tmp-syukeimae |
awk '$1=="t"||$1=="a"' |
awk '{if($1=="a"){$15="("$15")";$17="("$17")";$24="("$24")"};print $0}'   |
sm2 0 0 14 24 |
awk '{print "@","@","@","@","@","@","@","@","@","@","@","@","@",$0}'  > $tmp-sousyukei

cat $tmp-syukeimae $tmp-sousyukei |
#awk '{if($1=="a"){$15="("$15")";$17="("$17")";$24="("$24")"};print $0}'   |
##################### 2014/5/4 修正した部分 ########################
#LANG=C sort -k7,7nr -k6,6 -k1,1r -k10,10    |
#sm5 1 13 14 24          |
awk '{if(NF==24){print $0,"1"}else{print $0}}'    |
awk '{print $0,"'${kyufuwariai}'"}'   |
self 2/26 1             |
# 1:利用者ID              2:利用年          3:利用月        4:事業者サービス区分 5:事業者ID
# 6:地域単価              7:事業所名        8:割引率        9:サービスコード     10:サービスコード名
# 11:単位                 12:単位（割引後） 13:回数         14:単位合計          15:付随費用
# 16:基準内限度額対象単位 17:基準外対象単位 18:請求額       19:介護保険給付額    20:個人負担額（保険対象内）
# 21:個人負担額（全額）   22:種類限度額超   23:種類限度額内 24:パーセント        25:給付率
# 26:明細表示コード
##################### 2014/5/4 修正した部分 ########################
awk '$26!="@"&&$26!="j"&&$26!="t"'    >  ${tmp}-riyouhyoubeppyou_record
#awk '$26!="@"&&$26!="j"'    >  ${tmp}-riyouhyoubeppyou_record
##################### 2014/5/4 修正した部分 ########################
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "利用票別表レコード作成エラー２"

#fi

cp ${tmp}-riyouhyoubeppyou_record ${work_dir}/riyouhyoubeppyou_record

cp $tmp-gendohantei $work_dir/gendohantei

cat ${tmp}-riyouhyoubeppyou_record    |
# 1:利用者ID              2:利用年                    3:利用月              4:事業者サービス区分 5:事業者ID
# 6:事業所名              7:サービスコード            8:サービスコード名    9:単位               10:割引率
# 11:単位（割引後）       12:回数                     13:単位合計           14:種類限度額超      15:種類限度額内
# 16:基準内限度額対象単位 17:基準外対象単位           18:地域単価           19:請求額            20:給付率
# 21:介護保険給付額       22:個人負担額（保険対象内） 23:個人負担額（全額） 24:明細コード
self 1/5 7 9 10 11 8 12 13 14 22 23 16 17 6 18 25 19 20 21 26 |
rank |
# 1:順番          2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID      7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率       12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内 17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率       22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# サービスコードを基にして加算の限度額対象有無のフラグをつける
self 8 0 |
LANG=C sort -k1,1      |
tee $work_dir/hanteimae |
# 限度額内対象かどうかを判定するフラグをセット
join2 +n key=1 $tmp-gendohantei |
# 1:サービスコード      2:限度額判定フラグ   3:順番          4:利用者ID              5:利用年
# 6:利用月              7:事業者サービス区分 8:事業者ID      9:事業所名              10:サービスコード
# 11:サービスコード名   12:単位              13:割引率       14:単位（割引後）       15:回数
# 16:単位合計           17:種類限度額超      18:種類限度額内 19:基準内限度額対象単位 20:基準外対象単位
# 21:地域単価           22:請求額            23:給付率       24:介護保険給付額       25:個人負担額（保険対象内）
# 26:個人負担額（全額） 27:明細コード
delf 1                 |
self 2/NF 1            |
# 1:順番              2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID          7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率           12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内     17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率           22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# 26:限度額判定フラグ
awk '{print $0,"0"}'   |
# 1:順番              2:利用者ID              3:利用年                    4:利用月              5:事業者サービス区分
# 6:事業者ID          7:事業所名              8:サービスコード            9:サービスコード名    10:単位
# 11:割引率           12:単位（割引後）       13:回数                     14:単位合計           15:種類限度額超
# 16:種類限度額内     17:基準内限度額対象単位 18:基準外対象単位           19:地域単価           20:請求額
# 21:給付率           22:介護保険給付額       23:個人負担額（保険対象内） 24:個人負担額（全額） 25:明細コード
# 26:限度額判定フラグ(g:限度額対象外 n:限度額対象内) 27:請求確定フラグ（固定０）
LANG=C sort -k1,1      |
awk '{print $0,"1","'${sdaytime}'","'${USER_ID}'"}' > ${tmp}-riyouhyoubeppyou_record_input
fi

cat ${tmp}-riyouhyoubeppyou_record_input |
awk '$8!="4001"&&$8!="4002"' > ${tmp}-riyouhyoubeppyou_record2_input

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
HOUMONKAIGO/${Riyoushaid}/JISSEKI_KAKUTEI   JISSEKI_KAKUTEI
HOUMONKAIGO/${Riyoushaid}/JISSEKI_SHOKAI   JISSEKI_KAKUTEI
HOUMONKAIGO/${Riyoushaid}/JISSEKI_SEIKATSU   JISSEKI_SEIKATSU
HOUMONKAIGO/${Riyoushaid}/SERVICE_JISSEKI    SERVICE_JISSEKI
HOUMONKAIGO/${Riyoushaid}/HOUMONKAIGO_JISSEKI    HOUMONKAIGO_JISSEKI
FIN

input_detail_dir=SERVICE_JISSEKI/${Riyoushaid}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
if [ "${KakuteiFlg}" = "1" ] ; then
cat <<- FIN > $tmp-koushin_pompa
kakutei JISSEKI_KAKUTEI 4 7 8 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
shokai JISSEKI_SHOKAI 4 7 8 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
seikatsu JISSEKI_SEIKATSU 4 7 8 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
jisseki SERVICE_JISSEKI 5 18 19 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
seikyu HOUMONKAIGO_JISSEKI 9 14 15 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
seikyu2 HOUMONKAIGO_JISSEKI 9 14 15 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${tesisyutunengetu} ${input_dir}
FIN
else
cat <<- FIN > $tmp-koushin_pompa
kakutei JISSEKI_KAKUTEI 4 7 8 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
shokai JISSEKI_SHOKAI 4 7 8 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
seikatsu JISSEKI_SEIKATSU 4 7 8 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
jisseki SERVICE_JISSEKI 5 18 19 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
FIN
fi


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
## 確定した際に利用表に反映させるようにする！
if [ $(gyo $tmp-riyouhyou_input) -gt 0 -a "${KakuteiFlg}" = "1" ] ; then
if [ "${Jigyoushatype}" = "11" ] ; then
cat <<- FIN > $tmp-add_pompa
riyouhyou RIYOUHYOU_RECORD_KAIGO 5 22 23 ${data_dir}/CAREPLAN/GETSUGAKU_RIYOU_KAIGO/${Riyoushaid} ${input_dir}
FIN
else
cat <<- FIN > $tmp-add_pompa
riyouhyou RIYOUHYOU_RECORD_YOBO 5 22 23 ${data_dir}/CAREPLAN/GETSUGAKU_RIYOU_YOBO/${Riyoushaid} ${input_dir}
FIN
fi
else
cat <<- FIN > $tmp-add_pompa
FIN
fi

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
if [ "${KakuteiFlg}" = "1" ] ; then
if [ "${Jigyoushatype}" = "11" ] ; then
cat <<- FIN > $tmp-riyouhyou_pompa
riyouhyoubeppyou_record HOUMONKAIGO_RIYOUHYOUBEPPYOU_KAIGO 4 29 30 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
riyouhyoubeppyou_record2 HOUMONKAIGO_RIYOUHYOUBEPPYOU_KAIGO 4 29 30 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${tesisyutunengetu}
FIN
else
cat <<- FIN > $tmp-riyouhyou_pompa
riyouhyoubeppyou_record HOUMONKAIGO_RIYOUHYOUBEPPYOU_YOBO 4 29 30 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
riyouhyoubeppyou_record2 HOUMONKAIGO_RIYOUHYOUBEPPYOU_YOBO 4 29 30 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${tesisyutunengetu}
FIN
fi
else
if [ "${Jigyoushatype}" = "11" ] ; then
cat <<- FIN > $tmp-riyouhyou_pompa
riyouhyoubeppyou_record HOUMONKAIGO_RIYOUHYOUBEPPYOU_KAIGO 4 29 30 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
FIN
cat <<- FIN > $tmp-riyouhyou_delete_pompa
riyouhyoubeppyou_record2 HOUMONKAIGO_RIYOUHYOUBEPPYOU_KAIGO 4 29 30 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${tesisyutunengetu}
FIN
else
cat <<- FIN > $tmp-riyouhyou_pompa
riyouhyoubeppyou_record HOUMONKAIGO_RIYOUHYOUBEPPYOU_YOBO 4 29 30 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}
FIN
cat <<- FIN > $tmp-riyouhyou_delete_pompa
riyouhyoubeppyou_record2 HOUMONKAIGO_RIYOUHYOUBEPPYOU_YOBO 4 29 30 ${data_dir}/SEIKYU/KYOTAKU/${shisetsu}/${tesisyutunengetu}
FIN
fi
fi


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$2!="'${Riyoushaid}'"||$3!="'${TaishouNen}'"||$4!="'${TaishouTsuki}'"||$14!="'${Kyoukyusha}'"||$5!="'${Jigyoushatype}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key}  >  $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-riyouhyou_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$2!="'${Riyoushaid}'"||$3!="'${TaishouNen}'"||$4!="'${TaishouTsuki}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key}  >  $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-riyouhyou_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# 請求時対象削除版
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-riyouhyou_delete_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    gawk '$2!="'${Riyoushaid}'"||$3!="'${TaishouNen}'"||$4!="'${TaishouTsuki}'"' ${pompa_dir_name}/${file_name} |
    LANG=C sort -k1,${sort_key} -k${time_key},${time_key}  >  $tmp-${input_name}_new
  else
    : >  $tmp-${input_name}_new
  fi
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-riyouhyou_delete_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-riyouhyou_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# 削除
cat $tmp-riyouhyou_delete_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ "$(gyo $tmp-${input_name}_new)" != "0" ] ; then
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
  fi
done
#--------------------------------------------------------------

/home/hands/E-LIFE/KEIRI/CGI/KAIGOSEIKYU_HOUMON.SAIKAKUTEI ${Riyoushaid} ${shisetsu} ${tesisyutunengetu} ${TaishouNen}${TaishouTsuki}

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0

