#!/bin/bash
#
# SERVICE_JISSHI_TEJUN.TOUROKU : サービス実施手順登録
#
# Usage : SERVICE_JISSHI_TEJUN.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/HOUMONKAIGO/CGI/HOUMONKAIGO.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)

#--- 日付 ---
sday=$(date +%Y%m%d)

# 引数設定
namedata=$1


# デフォルト値セット
##############################################################

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------
# テスト


#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${USER_ID}" -o "${USER_ID}" = "_" ] && error_exit "ログインユーザが不明です"
# 利用者
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] && error_exit "利用者が不明です"
# 作成年月日
[ -z "${hdKoushinDate}" -o "${hdKoushinDate}" = "_" ] && error_exit "作成年月日が不明です"
# 居室番号
input_res=$(/home/hands/E-LIFE/KYOUTSU/CGI/INPUT_CHECK.CGI $Kyoshitsu 9)
[ "${input_res}" != "OK" ] && error_exit $input_res
#--------------------------------------------------------------

# データ作成
# 基本情報
# 1:データID          2:利用者ID         3:更新年月日(西暦) 4:更新年月日(和暦) 5:居室
# 6:利用者氏名        7:初回作成日(西暦) 8:初回作成日(和暦) 9:作成者           10:サービス内容
# 11:サービス提供区分 12:提供曜日        13:提供開始時間    14:提供終了時間    15:特記事項
# 16:項目             17:手順            18:備考            19:所要時間        20:施設
# 21:有効フラグ       22:処理日          23:ユーザID

allyukoflg="1"

[ "$MODE" = "delete" ] && allyukoflg="9"
echo "$DataID" "$Riyoushaid" "$hdKoushinDate" "$KoushinDate" "$Kyoshitsu" \
"$Riyousha" "$hdShokaiSakuseiDate" "$ShokaiSakuseiDate" "$Sakuseisha" \
"$ServiceNaiyou" "$TeikyoKubun" "$TeikyouYoubi" "$TeikyouJikanStart" \
"$TeikyouJikanEnd" "$txtareaTokki" "$txtareaKoumoku" "$txtareaTejun" \
"$txtareaBiko" "$txtareaShoyouJikan" "$slShisetsu" \
"$allyukoflg" "${sdaytime}" "${USER_ID}" > ${tmp}-tejun_work

cp ${tmp}-tejun_work $work_dir/tejun_work

###############################
# ID採番
##############################
cat ${tmp}-tejun_work |
awk '$1=="_"'                    > ${tmp}-tejun_new

new_tejun_num=$(gyo ${tmp}-tejun_new)

#--------------------------------------------------------------
# ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_tejun_num -gt 0 ] ; then
last_no="${new_tejun_num}"

# 利用者IDごとのディレクトリを作成しておく
mkdir -p ${kanri_dir}/SERVICE_JISSHI_TEJUN/${Riyoushaid}

# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/SERVICE_JISSHI_TEJUN/${Riyoushaid}/TEJUN_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/SERVICE_JISSHI_TEJUN/${Riyoushaid}/TEJUN_ID ] || echo "00001" > ${kanri_dir}/SERVICE_JISSHI_TEJUN/${Riyoushaid}/TEJUN_ID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/SERVICE_JISSHI_TEJUN/${Riyoushaid}/TEJUN_ID
get_no ${last_no} ${kanri_dir}/SERVICE_JISSHI_TEJUN/${Riyoushaid}/TEJUN_ID > $tmp-id_tejunall

ycat $tmp-id_tejunall ${tmp}-tejun_new      |
self 1 3/NF                                 > ${tmp}-tejun_input

else

mv ${tmp}-tejun_work ${tmp}-tejun_input

fi
#---------------------------------------------------------------



#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
HOUMONKAIGO/${Riyoushaid}/SERVICE_JISSHI_TEJUN   SERVICE_JISSHI_TEJUN
FIN

input_detail_dir=SERVICE_JISSHI_TEJUN/${Riyoushaid}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
tejun SERVICE_JISSHI_TEJUN 1 22 23 ${pompa_dir}/HOUMONKAIGO/${Riyoushaid} ${input_dir}/HOUMONKAIGO/${Riyoushaid}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
