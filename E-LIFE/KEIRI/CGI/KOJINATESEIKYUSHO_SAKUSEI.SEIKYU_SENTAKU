#!/bin/bash
#
# KOJINATESEIKYUSHO_SAKUSEI.SEIKYU_SENTAKU : 請求
#
# Usage : KOJINATESEIKYUSHO_SAKUSEI.SEIKYU_SENTAKU namefile
#
# Written by S.Otsubo

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/KEIRI/CGI/KOJINATESEIKYUSHO_SAKUSEI.INI &> /dev/null

# ログ
[ ! -e /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today} ] && mkdir /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}
exec 2> /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}/LOG.$(basename ${0}).${HOSTNAME}.${current_time}; set -xv

##かりに
#tmp=/home/hands/work/otsubo/sentaku
#ゴミtmpの消去
rm -f $tmp-*

# ---------------------------------------
# 変数

namefile=${1}
work="/home/hands/E-LIFE/KEIRI/WORK"
eval $(name-source ${namefile})

##かりに
#cp -p ${namefile} /home/hands/work/otsubo/name

# mode
if [ -n "${MODE}" -a "${MODE}" != "_" ];then
  :
else
  MODE="init"
fi

# 処理年月
syori_nengetsu="${year}${month}"
# ---------------------------------------

# ---------------------------------------
function error_exit {
  message="${1}"
  cat ${tmp}-lock |
  while read name ;do
    rm -f ${name}.LOCK
  done
  echo "${message}"
  rm ${tmp}-*
  exit 1
}
# ---------------------------------------

# ---------------------------------------
[ ! -e ${input_dir}/${today} ] && mkdir ${input_dir}/${today}
[ ! -e ${input_dir}/${today}/SEIKYU/ ] && mkdir ${input_dir}/${today}/SEIKYU/
# ---------------------------------------

# ---------------------------------------
# ロックファイル作成

cat << FIN > ${tmp}-lock
${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD
FIN
cat ${tmp}-lock |
while read File shikibetu; do
  lockfile -1 -r 3 -l 180 ${File}.LOCK
done
# ---------------------------------------

# ---------------------------------------
# 確定ファイルがあったら変更できない
#   請求確定：確定ファイルがあったらアウト
#   繰越確定：最新の確定状況で仮確定があったらアウト

# 請求確定(処理月の確定状況)
LANG=C sort -k1,1 -k5,5 ${seikyu_dir}/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${shisetsu} |
cjoin0 key=2 <(echo "${year}${month}") - |
awk '$4!="9"'                            |
getlast 1 1                              > ${tmp}-kakutei_file
# 1:施設ID 2:確定年月 3:確定ステータス 4:削除フラグ 5:更新日
# 6:更新者
if [ -s ${tmp}-kakutei_file ] ; then
  if [ "${MODE}" = "seikyu_koushin" ] ; then
    kakutei_status="$(self 3 ${tmp}-kakutei_file)"
    case "${kakutei_status}" in
      1 )
        err_mes="仮確定済みのため変更できません"
      ;;
      2 )
        err_mes="当月確定済みのため変更できません"
      ;;
    esac
    error_exit "${err_mes}"
  fi
fi

# 繰越確定(ともかく最新の状況が仮確定ならだめ)(yearとmonthがないので)
LANG=C sort -k1,1 -k5,5 ${seikyu_dir}/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${shisetsu} |
awk '$4!="9"'              |
# キー：施設年月の最新を取得、もし仮確定があればファイルはきだし
getlast 1 1                |
cjoin0 key=3 <(echo "1") - > ${tmp}-kakutei_file2
if [ -s ${tmp}-kakutei_file2 ] ; then
  if [ "${MODE}" = "seikyu_koushin_kurikoshi" ] ; then
    error_exit "仮確定中の月があるため変更できません"
  fi
fi
# ---------------------------------------

# ---------------------------------------
# チェックボックスの人リストを作成する(チェック入っていても入って無くても取得)
# disabledかけてるものについては値が送信されないはず(請求処理時の繰越と合算、繰越処理時の合算)
# -
# 合算フラグ
# 0:誰かと合算しない 1:誰かと合算する

case "${MODE}" in
  seikyu_koushin )
    awk '$1~/taisho_s/{print $1,$2}' ${namefile} |
    # 1:name 2:value

    # value=onなら2 value=offなら1をふってソートしてgetlast(onとoffが送信される＝onである)
    awk '{if($2=="on")
            {flg="2"}
          else
            {flg="1"};
          print $1,flg,$2}' -                    |
    # 1:name 2:flg 3:value
    LANG=C sort                                  |
    getlast 1 1                                  |
    delf 2                                       |
    # 1:name 2:value
    sed 's/taisho_s//g' -                        |
    tr "_" " "                                   |
    # 1:入居者ID 2:請求年月 3:合算フラグ 4:value
    LANG=C sort
  ;;
  seikyu_koushin_kurikoshi )
    awk '$1~/taisho_k/{print $1,$2}' ${namefile} |
    # 1:name 2:value
    # -
    # value=onなら2 value=offなら1をふってソートしてgetlast(onとoffが送信される＝onである)
    awk '{if($2=="on")
            {flg="2"}
          else
            {flg="1"};
          print $1,flg,$2}' -                    |
    # 1:name 2:flg 3:value
    LANG=C sort                                  |
    getlast 1 1                                  |
    delf 2                                       |
    sed 's/taisho_k//g' -                        |
    tr "_" " " |
    # 1:入居者ID 2:請求年月 3:合算フラグ 4:value
    LANG=C sort
  ;;
esac                                             > ${tmp}-check_list

# 上記処理では合算の人が回収できない(inputがdisabled)ため、
#   ヘッダから
#     処理月＝処理月(繰越ならば関係なし)
#     ステータス1,2,5(繰越ならば3,4)でかつ支払合算相手が入っている
#   に絞り込む
LANG=C sort -k1,2 -k25,25 ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
getlast 1 2                      |
case "${MODE}" in
  seikyu_koushin )
    cjoin0 key=1 <(echo "${syori_nengetsu}") - |
    cjoin0 key=3 <(echo "1 2 5" | tarr) - |
awk '$9!="_"' -                  |
# 1:処理月            2:入居者ID          3:請求ステータス  4:施設ID         5:建屋ID
# 6:フロア            7:ユニットID        8:居室番号        9:支払合算相手ID 10:明細ファイル名
# 11:請求書設定フラグ 12:仮請求書出力時間 13:請求書出力時間 14:請求確定月    15:予備
# 16:予備             17:予備             18:予備           19:予備          20:予備
# 21:予備             22:予備             23:予備           24:削除フラグ    25:更新時間
# 26:更新者
self 2 1                         |
# 1:入居者ID 2:処理月
# -
# 合算フラグ1ふって、フィールド数合わせるためにアンスコ
awk '{print $0,"1","_"}' -       > ${tmp}-check_list_tuika
  ;;
#  seikyu_koushin_kurikoshi )
#    cjoin0 key=3 <(echo "3 4" | tarr) -
#  ;;
esac
# 1:入居者ID 2:請求年月 3:合算フラグ 4:アンスコ

# リストの完成
if [ -s ${tmp}-check_list_tuika ] ; then
  cat ${tmp}-check_list ${tmp}-check_list_tuika |
  LANG=C sort                                   > ${tmp}-check_list.new
  mv ${tmp}-check_list.new ${tmp}-check_list
fi

# リストが無い場合(請求対象者がいない以外ありえないが)終了
if [ ! -s ${tmp}-check_list ] ; then
  error_exit "請求対象者がいません"
fi
# ---------------------------------------

# ---------------------------------------
# 処理を開始

# 合算フラグのある年月は別処理
cjoin0 +ng key=3 <(echo "1") ${tmp}-check_list > ${tmp}-gassan_list 2> ${tmp}-normal_list

# 通常分はヘッダを取得して更新する
case "${MODE}" in
  # ----------------
  # 1=>2,5
  # 2=>5
  # 5=>2
  seikyu_koushin )
    cat ${tmp}-normal_list |
    while read ID nengetsu flg value ; do
      cjoin0 key=1/2 <(echo "${nengetsu} ${ID}") ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
      awk '$24!="9"'                                          |
      LANG=C sort -k1,2 -k25,25                               |
      getlast 1 2                                             > ${tmp}-head_normal_kari

      # 変更できないステータスはまじってないか
      awk '$3!="1"&&$3!="2"&&$3!="5"' ${tmp}-head_normal_kari > ${tmp}-err_file
      cp ${tmp}-err_file ${work}/koushindekinai
      [ -s ${tmp}-err_file ] && break; 
    
      awk '{if("'${value}'"=="on")
              {$3="5";}
            else if("'${value}'"=="off")
              {$3="2";};
            $25="'${current_time}'";
            $26="'${userid}'";
            print}' ${tmp}-head_normal_kari
      # 1:処理月            2:入居者ID          3:請求ステータス  4:施設ID         5:建屋ID
      # 6:フロア            7:ユニットID        8:居室番号        9:支払合算相手ID 10:明細ファイル名
      # 11:請求書設定フラグ 12:仮請求書出力時間 13:請求書出力時間 14:請求確定月    15:予備
      # 16:予備             17:予備             18:予備           19:予備          20:予備
      # 21:予備             22:予備             23:予備           24:削除フラグ    25:更新時間
      # 26:更新者
    done                   > ${tmp}-head_normal
    # あってはいけないけどもしあればエラーで落とす
    [ -s ${tmp}-err_file ] && error_exit "更新できないステータスがあります"
  ;;
  # ----------------
  # ----------------
  # 3=>4
  # 4=>3
  seikyu_koushin_kurikoshi )
    # ---------------------
    # 請求確定ファイル最新を取得
    LANG=C sort -k1,1 -k5,5 ${seikyu_dir}/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${shisetsu} |
    awk '$4!="9"'              |
    # キー：施設年月の最新を取得、もし仮確定があればファイルはきだし
    getlast 1 1                |
    self 1/3                   > ${tmp}-kakutei_file
    # 1:施設ID 2:確定年月 3:確定ステータス
    
    # 口座を見る年月を変える
    kakutei_flg="$(self 3 ${tmp}-kakutei_file)"
    case "${kakutei_flg}" in
      1 )
        # 頭の処理ではじけてるはずだが念のため
        error_exit "仮確定中の月があるため変更できません"
      ;;
      2 )
        # 当月確定の翌月が処理予定月(確定は毎月連続で行うため)
        kakutei_year_month="$(self 2 ${tmp}-kakutei_file)"
        kijyun_year_month="$(mdate ${kakutei_year_month}m/+1)"
      ;;
    esac
    # ---------------------

    # ---------------------
    # 本日時点の最新の口座情報を取得して、合算相手IDを設定しなおす
    awk '{if($21!="9")
            {$8=substr($8,1,6);
             $9=substr($9,1,6);
             print}}' ${riyosha_dir}/RIYOUSHA_KOUZA |
    # 1:利用者ID    2:口座ID                3:金融機関コード    4:支店コード        5:請求内容コード
    # 6:口座種類    7:口座番号              8:請求期間FROM      9:請求期間TO        10:名義人
    # 11:備考       12:他入居者との一括請求 13:一括請求入居者ID 14:一括請求書フラグ 15:口座名義(漢字フルネーム)
    # 16:予備       17:予備                 18:予備             19:予備             20:予備
    # 21:削除フラグ 22:更新時間             23:更新者
    
    # 請求期間の月が処理月を含んでいるものを表示
    awk '$8<="'${kijyun_year_month}'" && $9>="'${kijyun_year_month}'"' - |
    # 請求内容コードが「全請求」と「施設」に絞り込む(利用者IDにつき一行しかヒットしないはず)
    cjoin0 key=5 <(echo "1 2 _" | tarr) -        |
    self 1 12/14                                 |
    # 1:利用者ID 2:他入居者との一括請求 3:一括請求入居者ID 4:一括請求書フラグ
    LANG=C sort                                  |
    # 他入居者との一括請求フラグが0(なし)でも一括請求入居者IDが入ってることがあるので強制的にアンスコに変える
    # (他入居者口座選択時)
    awk '{if($2=="0")
            {$3="_";};
          print}'                                |
    # フラグ消す
    delf 2                                       > ${tmp}-kouza_settei
    # 1:利用者ID 2:一括請求入居者ID 3:一括請求書フラグ
    # ---------------------

    # ---------------------
    cat ${tmp}-normal_list |
    while read ID nengetsu flg value ; do
      cjoin0 key=1/2 <(echo "${nengetsu} ${ID}") ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
      awk '$24!="9"'                                 |
      LANG=C sort -k1,2 -k25,25                      |
      getlast 1 2                                    > ${tmp}-head_normal_kari

      # 変更できないステータスはまじってないか
      awk '$3!="3"&&$3!="4"' ${tmp}-head_normal_kari > ${tmp}-err_file
      [ -s ${tmp}-err_file ] && break; 

      # フラグを変更するのと最新の口座設定を反映させる
      awk '{if("'${value}'"=="on")
              {$3="4";}
            else if("'${value}'"=="off")
              {$3="3";};
            $25="'${current_time}'";
            $26="'${userid}'"; print}' ${tmp}-head_normal_kari |
      # 1:処理月            2:入居者ID          3:請求ステータス  4:施設ID         5:建屋ID
      # 6:フロア            7:ユニットID        8:居室番号        9:支払合算相手ID 10:明細ファイル名
      # 11:請求書設定フラグ 12:仮請求書出力時間 13:請求書出力時間 14:請求確定月    15:予備
      # 16:予備             17:予備             18:予備           19:予備          20:予備
      # 21:予備             22:予備             23:予備           24:削除フラグ    25:更新時間
      # 26:更新者
      LANG=C sort -k2,2                 |
      # 口座設定ないひとも落ちないようにする
      join2 key=2 ${tmp}-kouza_settei - |
      # 1:処理月          2:入居者ID        3:支払合算相手ID(新) 4:一括請求書フラグ(新) 5:請求ステータス
      # 6:施設ID          7:建屋ID          8:フロア             9:ユニットID           10:居室番号
      # 11:支払合算相手ID 12:明細ファイル名 13:請求書設定フラグ  14:仮請求書出力時間    15:請求書出力時間
      # 16:請求確定月     17:予備           18:予備              19:予備                20:予備
      # 21:予備           22:予備           23:予備              24:予備                25:予備
      # 26:削除フラグ     27:更新時間       28:更新者
      self 1/2 5/10 3 12 4 14/NF        |
      # 1:処理月                2:入居者ID          3:請求ステータス  4:施設ID             5:建屋ID
      # 6:フロア                7:ユニットID        8:居室番号        9:支払合算相手ID(新) 10:明細ファイル名
      # 11:一括請求書フラグ(新) 12:仮請求書出力時間 13:請求書出力時間 14:請求確定月        15:予備
      # 16:予備                 17:予備             18:予備           19:予備              20:予備
      # 21:予備                 22:予備             23:予備           24:削除フラグ        25:更新時間
      # 26:更新者
      LANG=C sort
    done                   > ${tmp}-head_normal
    # ---------------------

    # ---------------------
    # あってはいけないけどもしあればエラーで落とす
    [ -s ${tmp}-err_file ] && error_exit "更新できないステータスがあります"
    # ---------------------
  ;;
  # ----------------
esac


# 合算分は、誰と合算するか取得して、その人と同じステータスにする(ヘッダの処理月+合算相手IDを取得すればおｋ)
: > ${tmp}-err_file
cat ${tmp}-gassan_list |
while read ID nengetsu flg value ; do
  cjoin0 key=1/2 <(echo "${nengetsu} ${ID}") ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
  awk '$24!="9"'            |
  LANG=C sort -k1,2 -k25,25 |
  getlast 1 2               > ${tmp}-head_gassan_kari

  # 合算相手のステータスを取得(最新のステータスは${tmp}-head_normal)
  self 1 9 ${tmp}-head_gassan_kari    |
  cjoin0 key=1/2 - ${tmp}-head_normal |
  awk '$24!="9"'                      |
  LANG=C sort -k1,2 -k25,25           |
  getlast 1 2                         |
  self 3                              > ${tmp}-gassan_status
  gassan_status="$(cat ${tmp}-gassan_status)"

  case "${MODE}" in
    seikyu_koushin )
      # 合算相手に従うため合算相手が請求処理対象にいないのに請求されるとエラー
      [ ! -s ${tmp}-gassan_status ] && echo "合算相手がいないため処理ができません。\n${ID}\n口座設定を確認してください。" > ${tmp}-err_file
      [ -s ${tmp}-err_file ] && break;
    ;;
    seikyu_koushin_kurikoshi )
      # 合算相手に合わせる必要がないのでチェックに従う
      case "${value}" in
        on )
          gassan_status="4"
        ;;
        off )
          gassan_status="3"
        ;;
      esac
    ;;
  esac

  # 変更できないステータスはまじってないか
  awk '$3!="1" && $3!="2" && $3!="5" && $3!="3" &&$ 3!="4"{print "更新できないステータスがあります"}' ${tmp}-head_gassan_kari > ${tmp}-err_file
  [ -s ${tmp}-err_file ] && break; 

  awk '{$3="'${gassan_status}'";
        $25="'${current_time}'";
        $26="'${userid}'";
        print}' ${tmp}-head_gassan_kari
done > ${tmp}-head_gassan
# あってはいけないけどもしあればエラーで落とす
[ -s ${tmp}-err_file ] && error_exit "$(cat ${tmp}-err_file)"


# 合算と通常をあわせてinput
cat ${tmp}-head_gassan ${tmp}-head_normal |
LANG=C sort -k1,2 -k25,25                 > ${tmp}-input

# L4作成
cat ${tmp}-input ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
LANG=C sort -k1,2 -k25,25                                   > ${tmp}-L4
# ---------------------------------------

# ---------------------------------------
# チェック・更新

cat << FIN > ${tmp}-koushin_file_input
${tmp}-input ${input_dir}/${today}/SEIKYU/SEIKYU_HEAD.INPUT.$(basename ${0}).${current_time} 26
FIN

cat << FIN > ${tmp}-koushin_file_L4
${tmp}-L4 ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD 26
FIN

# チェック
self 1 3 ${tmp}-koushin_file_input |
while read file retu ; do
  [ "$(retu ${file})" != "${retu}" ] && : > $tmp-err
  [ "$(retu ${file} | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu}'"' ${file} | gyo)" != "0" ] && : > $tmp-err
  [ -e ${tmp}-err ] && break;
done
[ -e $tmp-err ] && error_exit "列数エラー"

self 1 3 ${tmp}-koushin_file_L4 |
while read file retu ; do
  [ "$(retu ${file})" != "${retu}" ] && : > $tmp-err
  [ "$(retu ${file} | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu}'"' ${file} | gyo)" != "0" ] && : > $tmp-err
  [ -e ${tmp}-err ] && break;
done
[ -e $tmp-err ] && error_exit "列数エラー"

# 更新
cat ${tmp}-koushin_file_input ${tmp}-koushin_file_L4 |
while read File okiba retu ; do
  cp -p ${File} ${okiba}
  [ "${?}" != "0" ] && : > ${tmp}-err
  [ -e ${tmp}-err ] && break;
done
[ -e ${tmp}-err ] && error_exit "ファイル作成中にエラー発生"
# ---------------------------------------

# ---------------------------------------
# ロックファイル削除

cat ${tmp}-lock |
while read File; do
  rm ${File}.LOCK
done
# ---------------------------------------

echo "更新完了！"

rm -f ${tmp}-*
exit 0

