#!/bin/bash
#
# SHOKYAKU_KANRI_SHINKI.TOUROKU : 償却管理新規登録.TOUROKU
#
# Usage : SHOKYAKU_KANRI_SHINKI.TOUROKU namefile datafile
#
# Written by j.aoyagi(hands lab.inc)


# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null

--------------------ログ出力--------------------
mkdir -p /home/hands/E-LIFE/KEIRI/APLOG/$(date +%Y%m%d)
exec 2> /home/hands/E-LIFE/KEIRI/APLOG/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d"); set -xv


# 変数設定
tmp=/var/tmp/${$}

#ゴミtmpの消去
rm -f $tmp-*

today="$(date +%Y%m%d)"
this_month="$(date +%Y%m)"
current_time="$(date "+%Y%m%d%H%M%S")"

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/KEIRI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
pompa_dir="${app_dir}/POMPA/SHOKYAKU_KANRI"
input_dir="${app_dir}/INPUT"
apptbl_dir="${app_dir}/TBL"
kyoutsu_dir="${home_dir}/E-LIFE/KYOUTSU/HTML"
master_tbl_dir="${home_dir}/E-LIFE/TBL/SEIKYU"
hometbl_dir="${home_dir}/E-LIFE/TBL"
riyosha_dir="/DATA/E-LIFE/UNEI/RIYOUSHA"
work="${app_dir}/WORK"

# 引数設定
namefile=${1}

# eval
eval $(name-source ${namefile})

echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu


# 利用者idの取得
echo ${Riyoushaid} > $tmp-riyousha

# 処理する年月を決める
start=$(echo ${shokyaku_start}                    |
awk '{print substr($1,1,6)}')
start_day=$(echo ${start} | awk '{print substr($1,1,4)"/"substr($1,5,2)"/01"}')
kaisu=$(echo ${shokyaku_kaisu} | lcalc '$1-1')
#mdate -e ${start}m/+${kaisu}                      |
#tarr                                              |
#LANG=C sort -k1,1n                                |
#yarr                                              > $tmp-nengetsu
for kaisu_month in $(seq ${kaisu} | yarr);do
  date -d "${start_day} ${kaisu_month} months" '+%Y%m'
done                                               > $tmp-month_list_pre
echo ${start}                                      |
cat - $tmp-month_list_pre                          |
yarr                                               > $tmp-nengetsu
endday=$(cat $tmp-nengetsu | tarr | tail -n1 | awk '{print $1"01"}')
END_MONTH=$(cat $tmp-nengetsu | tarr | tail -n1)

# 処理を回してデータをつくる
for month in $(cat $tmp-nengetsu);do

  # 端数を初月で調整しているので違ったら直す
  if [ $month = $start ];then
    month_kingaku=${shokyaku_kingaku_1}
    echo ${month} ${Riyoushaid} ${start} "1" ${shokyaku_kaisu} ${ichijikingaku} ${hi_henkankingaku} ${shokyakukingaku} "0" ${month_kingaku} |
    # 1:年月     2:利用者id 3:起算月   4:経過月数       5:償却合計回数
    # 6:一時金額 7:非返還金 8:償却金額 9:前月償却額累計 10:月償却金額
    lcalc '$1,$2,$3,$4,$5-$4,$6,$7,$8,$9,$8-$9,$10,$10,$8-$10' > $tmp-month
    # 1:年月          2:利用者id        3:起算月        4:経過月数       5:残り月数
    # 6:一時金額      7:非返還金        8:償却金額      9:前月償却額累計 10:前月償却残高
    # 11:当月償却金額 12:当月償却額累計 13:当月償却残高
    cat $tmp-month                                             >> $tmp-month_data
  elif [ $month = $END_MONTH ];then
    month_kingaku=${shokyaku_kingaku_rast}
    cat $tmp-month                                              |
    # 1:年月          2:利用者id        3:起算月        4:経過月数       5:残り月数
    # 6:一時金額      7:非返還金        8:償却金額      9:前月償却額累計 10:前月償却残高
    # 11:当月償却金額 12:当月償却額累計 13:当月償却残高
    awk '{$1="'${month}'";$4=$4+1;$5=$5-1;$9=$12;$10=$13;$11="'${month_kingaku}'";$12=$12+$11;$13=$13-$11;print}' > $tmp-month_new
    cat $tmp-month_data $tmp-month_new                         > $tmp-month_data_new
    mv $tmp-month_data_new $tmp-month_data
    mv $tmp-month_new $tmp-month
  else
    month_kingaku=${shokyaku_kingaku_tsuki}
    cat $tmp-month                                              |
    # 1:年月          2:利用者id        3:起算月        4:経過月数       5:残り月数
    # 6:一時金額      7:非返還金        8:償却金額      9:前月償却額累計 10:前月償却残高
    # 11:当月償却金額 12:当月償却額累計 13:当月償却残高
    awk '{$1="'${month}'";$4=$4+1;$5=$5-1;$9=$12;$11="'${month_kingaku}'";$10=$13;$12=$12+$11;$13=$13-$11;print}' > $tmp-month_new
    cat $tmp-month_data $tmp-month_new                         > $tmp-month_data_new
    mv $tmp-month_data_new $tmp-month_data
    mv $tmp-month_new $tmp-month
  fi

done

cat $tmp-month_data                               |
# 1:年月          2:利用者id        3:起算月        4:経過月数       5:残り月数
# 6:一時金額      7:非返還金        8:償却金額      9:前月償却額累計 10:前月償却残高
# 11:当月償却金額 12:当月償却額累計 13:当月償却残高
awk '{print $0,"'${shubetsu_select}'","2","'${current_time}'","'${userid}'"}' > $tmp-input
# 1:年月      2:利用者ID        3:起算月        4:経過月数       5:償却残回数
# 6:元金額    7:非返却金額      8:償却対象金額  9:前月償却額累計 10:前月償却残高
# 11:償却月額 12:当月償却額累計 13:当月償却残高 14:契約金ID      15:有効フラグ
# 16:登録時間 17:userid

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || exit 1

# inputデータを保存
mkdir -p ${input_dir}/SHOKYAKU_KANRI/${today}
cp -p $tmp-input ${input_dir}/SHOKYAKU_KANRI/${today}/SHOKYAKU_KANRI.${current_time}.${userid}.$(basename ${0}).${HOSTNAME}.${$}

# POMPAを更新
mkdir -p ${pompa_dir}/${shisetsu}

target_file="${pompa_dir}/SHOKYAKU_KANRI"
lock_file="${target_file}.LOCK"
lockfile -1 -r 3 -l 10 ${lock_file} || error_exit "処理の途中でエラーが発生しました。"

if [ -e ${pompa_dir}/${shisetsu}/${Riyoushaid}.SHOKYAKU ];then
  cat ${pompa_dir}/${shisetsu}/${Riyoushaid}.SHOKYAKU                   |
  # 1:年月    2:利用者ID   3:起算月       4:経過月数       5:償却残回数
  # 6:元金額  7:非返却金額 8:償却対象金額 9:前月償却額累計 10:前月償却残高
  # 11:償却月額 12:当月償却額累計 13:当月償却残高 14:契約金ID 15:有効フラグ
  # 16:登録時間 17:userid
  awk '{if($14=="'${shubetsu_select}'"){$15="9"};print}'                 |
  cat - $tmp-input                                                  |
  # 1:年月    2:利用者ID   3:起算月       4:経過月数       5:償却残回数
  # 6:元金額  7:非返却金額 8:償却対象金額 9:前月償却額累計 10:前月償却残高
  # 11:償却月額 12:当月償却額累計 13:当月償却残高 14:契約金ID 15:有効フラグ
  # 16:登録時間 17:userid
  LANG=C sort -k14,14n -k15,15n -k1,1n                              > $tmp-new_pompa
  mv $tmp-new_pompa ${pompa_dir}/${shisetsu}/${Riyoushaid}.SHOKYAKU
else
  cat  $tmp-input                                                   > $tmp-new_pompa
  # 1:年月    2:利用者ID   3:起算月       4:経過月数       5:償却残回数
  # 6:元金額  7:非返却金額 8:償却対象金額 9:前月償却額累計 10:前月償却残高
  # 11:償却月額 12:当月償却額累計 13:当月償却残高 14:契約金ID 15:有効フラグ
  # 16:登録時間 17:userid
  mv $tmp-new_pompa ${pompa_dir}/${shisetsu}/${Riyoushaid}.SHOKYAKU
fi

# ロック解除
rm -f ${lock_file}
unset lock_file
[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit


cat $tmp-input

rm -f ${tmp}-*
exit 0

