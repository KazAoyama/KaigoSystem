#!/bin/bash
#
# FB_SAKUSEI.TOUROKU : ファームバンキング引落結果アップロード
#
# Written by aoyagi

# 画面から直接よびだし
# 月ごとにファイルを置くので、アップされるごとに上書きするかんじ

# inputはアップロードファイルを変換したもの
# pompaは帳票出力用のかたち
# 共通ファイルはpompaをみじかくしたもの


# ログ
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/KEIRI/CGI/FB_SAKUSEI.INI &> /dev/null

[ ! -e /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today} ] && mkdir /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}
exec 2> /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}/LOG.$(basename ${0}).${HOSTNAME}.${current_time}; set -xv

#ゴミtmpの消去
rm -f $tmp-*


#------------------------------------------------------------
# パラメーターの取得

dd bs=${CONTENT_LENGTH} > ${tmp}-param
cp ${tmp}-param ${work}/tmp-param
if ismime ${tmp}-param ; then
  cat << FIN | self 1/NF > ${tmp}-id_list
  MODE
  userid
  itakushaNo
  year
  month
FIN
  
  # リストに従いしゅとく
  : > ${tmp}-name
  while read ID ; do
    echo "${ID} $(mime-read ${ID} ${tmp}-param)" >> ${tmp}-name
  done < ${tmp}-id_list

  # アップロードしたファイルは別で取得
  mime-read "upload_file" ${tmp}-param |
  # 変換
  nkf -wxLu |
  # 空行削除
  grep -v "^$" |
  # カンマ区切りの変換
#  sed 's/  */ /g' |
  unsco        |
  tr "," " " > ${tmp}-upload_file
  # 1:(分からない)  2:(分からない)            3:(分からない) 4:(分からない) 5:(分からない)
  # 6:種別          7:発信番号                8:発信先番号   9:通話開始時間 10:通話時間(たぶん秒)
  # 11:(分からない) 12:通話金額(たぶん税抜き)

  # アップロードファイル名取得
  mime-read -v ${tmp}-param |
  grep "upload_file" |
  sed -e 's/^.*filename="\(.*\)".*$/\1/' -e 's/ /_/g' -e 's/#/＃/g' -e 's/%/％/g' > ${tmp}-upload_file_name
else
  cgi-name -d_ -i_ ${tmp}-param > $tmp-name
fi

#dd bs=${CONTENT_LENGTH}        |
#cgi-name -d_ -i_               |
#LANG=C sort                    > $tmp-name
cookie-name                    |
LANG=C sort                    > ${tmp}-cookie
#------------------------------------------------------------


#------------------------------------------------------------
# 処理モードの決定
eval $(name-source ${tmp}-cookie)
eval $(name-source $tmp-name)
[ -z "${MODE}" ] && MODE="init"
#------------------------------------------------------------

#------------------------------------------------------------
# ディレクトリの作成

[ ! -e ${pompa_dir}/FB_SAKUSEI ] && mkdir ${pompa_dir}/FB_SAKUSEI
[ ! -e ${pompa_dir}/FB_SAKUSEI/${itakushaNo} ] && mkdir ${pompa_dir}/FB_SAKUSEI/${itakushaNo}
[ ! -e ${input_dir}/${today} ] && mkdir ${input_dir}/${today}
#------------------------------------------------------------

#------------------------------------------------------------
upl key=1 ${tmp}-cookie $tmp-name > $tmp-name.new0
#cp -p $tmp-name $tmp-name_origin
mv -f $tmp-name.new0 $tmp-name

#echo "USER_ID kaizen" >> $tmp-name
#------------------------------------------------------------


#------------------------------------------------------------
# エラー

function error_exit {
  message="$1"
  echo -e "Content-Type: text/html; charset=UTF-8; \n\n" |
  cat - <(echo "<script type="text/javascript">alert('${message}');</script>")
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat ${tmp}-taisyou |
  self 1 |
  while read File;do
    rm -f ${home_dir}/TBL/KEIRI/${File}.LOCK
  : ;done
  error_exit ${message}
} 
#------------------------------------------------------------

##------------------------------------------------------------
## セッションチェック
#case "$MODE" in
#  *)
#    $function_dir/FUNCTION.SESSION_CHECK -chk $session_dir/$SESSION_ID > $tmp-session_result
#
#    # エラーの場合、MODEを変え、namedateも変換する
#    if [ "$(awk 'NR==1{print $1}' $tmp-session_result)" == "ng" ]; then
#      MODE="$(awk 'NR==1{print $2}' $tmp-session_result)"
#      echo "MODE $MODE" > $tmp-new_mode
#      cat $tmp-name   |
#      sed '/^MODE /d' |
#      cat $tmp-new_mode - > $tmp-name.new
#      mv -f $tmp-name.new $tmp-name
#    fi
#  ;;
#esac
##------------------------------------------------------------


#------------------------------------------------------------
# アップロードしたファイルのチェック

# ファイル名から拡張子
kakucyousi="$(cat ${tmp}-upload_file_name | tr "." " " | self NF)"
[ "${kakucyousi}" != "dat" ] && error_exit "ファイルの拡張子が違います"

# ファイルの列チェック
#[ "$(retu ${tmp}-upload_file)" != "12" ] && error_exit "列数が違います。ファイルの内容を確認してください"

## 選択した年月の請求が確定している場合はアップロードできない
#LANG=C sort -k1,2 -k5,5 ${seikyu_dir}/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${shisetsu} |
#awk '$4!="9"' -                                                                 |
#getlast 1 1                                                                     |
## 1:施設ID 2:確定年月 3:確定ステータス 4:削除フラグ 5:更新日
## 6:更新者
#cjoin0 key=2<(echo "${up_kikan_month_select}")                                  > ${tmp}-kakutei_file
#
#if [ -s ${tmp}-kakutei_file ] ; then
#  kakutei_status="$(self 3 ${tmp}-kakutei_file)"
#  if [ "${kakutei_status}" = "2" ] ; then
#    error_exit "請求処理で当月確定しているためアップロードできません"
#  else
#    error_exit "請求処理で仮確定しているためアップロードできません"
#  fi
#fi
#------------------------------------------------------------

#------------------------------------------------------------
# 登録開始

# DENWA_KAKIN
# 1:利用者ID 2:内線番号 3:日付       4:識別コード 5:時刻
# 6:通話時間 7:通話金額 8:削除フラグ 9:更新時間   10:更新者

# ファイルを置くだけなのでロックしない

# ${tmp}-upload_file
# 1:(分からない)  2:(分からない)            3:(分からない) 4:(分からない) 5:(分からない)
# 6:種別          7:発信番号                8:発信先番号   9:通話開始時間 10:通話時間(たぶん秒)
# 11:(分からない) 12:通話金額(たぶん税抜き)

# ----------
# 利用者マスタから部屋番号と利用者IDをとってくる
shonichi=$(echo "${year}${month}""01")
getsumatsu=$(mdate ${year}${month}m | tarr | tail -n1)
awk '$(NF-2)!=9' ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KOUZA |
# 1:利用者ID    2:口座ID                3:金融機関コード    4:支店コード        5:請求内容コード
# 6:口座種類    7:口座番号              8:請求期間FROM      9:請求期間TO        10:名義人
# 11:備考       12:他入居者との一括請求 13:一括請求入居者ID 14:一括請求書フラグ 15:口座名義(漢字フルネーム)
# 16:顧客番号       17:予備                 18:予備             19:予備             20:予備
# 21:削除フラグ 22:更新時間             23:更新者
awk '$8<="'${getsumatsu}'"&&$9>="'${shonichi}'"'          |
# 一括請求にしている人は除く
awk '$13=="_"'                                            |
tee $tmp-riyosha_kouza                                    |
self 16 1                                                 |
LANG=C sort -k2,2                                         > $tmp-kokyaku_riyosha
# 1:顧客番号 2:利用者ID

# 口座の顧客番号が居宅かどうかを判断
awk '$5==3' $tmp-riyosha_kouza                            |
self 16                                                   |
awk '{print $1,"kyotaku"}'                                |
LANG=C sort                                               > $tmp-kyotaku_kouza
cp $tmp-kyotaku_kouza ${work}/kyotaku_kouza


awk '$(NF-2)!=9{print $1,$2}' ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER |
LANG=C sort > $tmp-riyosha_master


# 処理月に各部屋に存在した人のリストを作成する
awk '$(NF-2)!=9' ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
# 1:施設ID   2:建屋ID 3:フロアID 4:ユニットID 5:居室ID
# 6:入居者ID 7:入居日 8:退去日   9:削除フラグ 10:更新時間
# 11:更新者
self 1/8 7.1.6 8.1.6 |
# 1:施設ID   2:建屋ID 3:フロアID 4:ユニットID 5:居室ID
# 6:入居者ID 7:入居日 8:退去日   9:入居月     10:退去月
LANG=C sort |
getlast 1 6 |
# 入居退去期間が処理月を含む人のみ抽出
#awk '$9<="'${up_kikan_month_select}'" && $10>="'${up_kikan_month_select}'"' |
self 6 1 5 | LANG=C sort -k1,1  |
join2 key=1 $tmp-riyosha_master > ${tmp}-hito_heya
# 1:利用者ID 2:利用者名 3:施設ID 4:居室ID
join2 key=2 $tmp-hito_heya $tmp-kokyaku_riyosha                              |
LANG=C sort -k1,1                                                            > $tmp-kokyaku_riyosha_room
# 1:顧客番号 2:利用者ID 3:利用社名 4:施設コード 5:居室
cp $tmp-kokyaku_riyosha_room ${work}/kokyaku_room

# ----------
cp ${tmp}-upload_file ${work}/upload_file
awk 'NR!=1&&NF==4' $tmp-upload_file                                                 |
self 1.2.4 1.6 2/NF                                                          |
awk '{if($1=="9900"){print $1,$2,$3,"S",$4,$5}else{print $1,$2,$3,substr($4,1,1),substr($4,2),$5}}' | 
# 1:銀行コード 2:銀行名ｶﾅ 3:支店コード 4:口座種別 5:口座番号口座名義カナ 6:その他
self 1/4 5.1.7 5.8 6.1.10 6.11.1 6.12.5 6.17.15 6.32                         |
# 1:銀行コード      2:銀行名ｶﾅ 3:支店コード 4:口座種別   5:口座番号
# 6:口座名義カナ    7:引落金額 8:新規コード 9:委託者番号 10:顧客番号
# 11:振替結果コード

# 先頭の0をトル
1bai 7 10                                                                    > $tmp-upload_input
# 1:銀行コード      2:銀行名ｶﾅ 3:支店コード 4:口座種別   5:口座番号
# 6:口座名義カナ    7:引落金額 8:新規コード 9:委託者番号 10:顧客番号
# 11:振替結果コード
cp $tmp-upload_input ${work}/upload_input
# ----------
# 施設・居室と結びつけ
self 10 1/9 11 $tmp-upload_input                                             |
# 1:顧客番号        2:銀行コード   3:銀行名ｶﾅ 4:支店コード 5:口座種別
# 6:口座番号        7:口座名義カナ 8:引落金額 9:新規コード 10:委託者番号
# 11:振替結果コード
LANG=C sort -k1,1                                                            |
tee ${work}/joinupload |
join2 key=1 $tmp-kokyaku_riyosha_room                                        |
# 1:顧客番号      2:利用者ID  3:利用者名    4:施設コード  5:居室
# 6:銀行コード    7:銀行名ｶﾅ  8:支店コード  9:口座種別    10:口座番号
# 11:口座名義カナ 12:引落金額 13:新規コード 14:委託者番号 15:振替結果コード
join2 key=1 $tmp-kyotaku_kouza                                               |
# 1:顧客番号        2:居宅フラグ    3:利用者ID  4:利用者名    5:施設コード
# 6:居室            7:銀行コード    8:銀行名ｶﾅ  9:支店コード  10:口座種別
# 11:口座番号       12:口座名義カナ 13:引落金額 14:新規コード 15:委託者番号
# 16:振替結果コード
self 3/6 2 1 7/NF                                                            |
LANG=C sort                                                                  > $tmp-for_pompa
# 1::利用者ID       2:利用者名      3:施設コード 4:居室        5:居宅フラグ
# 6:顧客番号        7:銀行コード    8:銀行名ｶﾅ   9:支店コード  10:口座種別
# 11:口座番号       12:口座名義カナ 13:引落金額  14:新規コード 15:委託者番号
# 16:振替結果コード

# ----------
# ----------


# 各ファイルを置いてくる
#   inputはアップロードファイルを変換したもの
#   pompaは帳票出力用のかたち
#   共通ファイルはpompaをみじかくしたもの

cat << FIN | self 1/NF > ${tmp}-file_okiba
${tmp}-for_pompa ${pompa_dir}/FB_SAKUSEI/${itakushaNo}/FB_SAKUSEI.UPLOAD.${year}${month}.${itakushaNo} 16
${tmp}-upload_input          ${input_dir}/${today}/FB_SAKUSEI.${itakushaNo}.${year}${month}.$(basename ${0}).${cur_time} 11
FIN
# 1:ファイル名 2:パス 3:列数

# ファイル列チェック
cat ${tmp}-file_okiba |
self 1 3 |
while read File retu_no; do
  [ "$(retu ${File})" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu ${File} | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' ${File} | gyo)" != "0" ] && : > $tmp-err
  [ -e ${tmp}-err ] && break;
done
[ -e $tmp-err ] && error_exit "列数エラー"

# 置く
cat ${tmp}-file_okiba |
while read File Pass Retu ; do
  cp -p ${File} ${Pass}
  [ "${?}" != "0" ] && : > ${tmp}-err
  [ -e ${tmp}-err ] && break;
done
[ -e ${tmp}-err ] && error_exit "ファイル作成中にエラー発生"

#------------------------------------------------------------

## HTMLファイルを表示する
#if [ -e "$tmp-html" ];then
#  echo -e 'Content-Type: text/html; charset=UTF-8; \n\n' |
#  cat - ${tmp}-html
#else
#  cat $tmp-html2
#fi

cat << FIN > ${tmp}-alert
<script type="text/javascript">alert("アップロードが完了しました");</script>
FIN

echo -e "Content-Type: text/html; charset=UTF-8; \n\n" |
cat - ${tmp}-alert


## 終了
rm -f ${tmp}-*
exit 0
