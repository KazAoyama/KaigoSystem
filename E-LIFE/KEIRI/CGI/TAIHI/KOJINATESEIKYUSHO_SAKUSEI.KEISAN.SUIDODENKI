#!/bin/bash
#
# KOJINATESEIKYUSHO_SAKUSEI.DENWA 施設請求計算部分のCGI
#
# Written by S.Otsubo

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/KEIRI/CGI/KOJINATESEIKYUSHO_SAKUSEI.INI &> /dev/null

# ログ
[ ! -e /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today} ] && mkdir /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}
exec 2> /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}/LOG.$(basename ${0}).${HOSTNAME}.${current_time}; set -xv
#---------------------------------------------------------------

#---------------------------------------------------------------
function error_exit {
  message="${1}"
  echo "${message}"
  exit 1
}
#---------------------------------------------------------------

#---------------------------------------------------------------
# 引数設定
namefile=${1}
work="/home/hands/E-LIFE/KEIRI/WORK"
# 変数
eval $(name-source ${namefile})
seikyu_syori_month="${year}${month}"
seikyu_syori_next_month="$(mdate ${seikyu_syori_month}m/+1)"
seikyu_syori_two_next_month="$(mdate ${seikyu_syori_month}m/+2)"
seikyu_syori_last_month="$(mdate ${seikyu_syori_month}m/-1)"
seikyu_syori_two_last_month="$(mdate ${seikyu_syori_month}m/-2)"
#---------------------------------------------------------------
# センター南じゃなかったら何もしない
[ "${shisetsu}" != "0003" ] && exit 0


#---------------------------------------------------------------
# 3.実績系をとりまとめする(税はデータに入ってるから計算しない)

# 電話課金の集計

# 電話課金振り分けのルール(電話課金アップロード時に行っています)
# 1.部屋に一人しかいない場合はその人
# 2.部屋の支払が複数人いる場合
#   退去日が入っていないほうが支払う
#     どちらも入っていた：退去日が大きいほう(ながく部屋にいた人)が支払う、それでも絞れない場合は入居者IDが若いほうが支払う
#     どちらも入っていない：入居日が小さいほう(ながく部屋にいた人)が支払う、それでも絞れない場合は入居者IDが若い方が支払う
#
# ここでは請求先設定の請求先にふる作業を行う

# --------------------
# 電話課金の個別設定情報を取得する

# ${home_tbl_dir}/SEIKYUSAKI_SETTEI/${shisetsu}/DENWAKAKIN_SETTEI.${shisetsu}
# -
# 1:施設ID     2:建屋ID         3:フロアID   4:部屋番号 5:請求期間FROM
# 6:請求期間TO 7:請求先入居者ID 8:削除フラグ 9:更新時間 10:更新者
cat ${home_tbl_dir}/SEIKYUSAKI_SETTEI/${shisetsu}/DENWAKAKIN_SETTEI.${shisetsu} |
awk '$8!="9"'                     |
self 4/7                          |
# 1:部屋番号 2:請求期間FROM 3:請求期間TO 4:請求先入居者ID
# -
# 処理月を含むものを抽出
awk '$2<="'${seikyu_syori_month}'" && $3>="'${seikyu_syori_month}'"' |
delf 2/3                          |
# 1:部屋番号 2:請求先入居者ID
# -
# 設定なしにするとアンスコが入っているので、それを取り除く
awk '$2!="_"' -                   |
LANG=C sort                       > ${tmp}-denwa_settei
# --------------------

# --------------------
# 請求先設定ファイルが空になる場合もある、joinで落ちるので＠うめファイル作成
[ ! -s ${tmp}-denwa_settei ] && echo "@ @" > ${tmp}-denwa_settei
# --------------------

# --------------------
# 電気課金データがなければここで終了
[ ! -e ${seikyu_dir}/DENKI_SUIDOU/${shisetsu}/${seikyu_syori_month}/DENKI.${shisetsu}.${seikyu_syori_month} ] && exit 0
[ ! -e ${seikyu_dir}/DENKI_SUIDOU/${shisetsu}/${seikyu_syori_month}/SUIDOU.${shisetsu}.${seikyu_syori_month} ] && exit 0
# --------------------

# --------------------
# 電気課金データの集計

cat ${seikyu_dir}/DENKI_SUIDOU/${shisetsu}/${seikyu_syori_month}/DENKI.${shisetsu}.${seikyu_syori_month} |
# 1:居室 2:利用者ID 3:利用年月 4:課税フラグ 5:税込金額
# 6:税抜金額 7:税額 8:適用 9:有効フラグ 10:更新時間 11:userid
# -
# inputの形にする
#   行分類フラグ＝10：施設利用料明細行
#   請求年月日は固定で月初とする(合計行なので日付の表示しようがない)
awk '$2!="_"{print "'${seikyu_syori_month}'",$2,"20","denki","'${seikyu_syori_month}'01","1",$6,$5,int($6-$5),"0",$8,"_"}' |
# 1:処理月       2:入居者ID   3:行分類フラグ 4:項目ID 5:請求年月日
# 6:非課税フラグ 7:金額税抜き 8:金額税込み   9:税額   10:特別処理フラグ
# 11:内線番号    12:アンスコ
self 1  2  3  NF 4  NF 5  6  7  8  \
     9  NF NF 10 NF NF NF NF NF NF \
     NF NF NF NF 11                |
# 1:処理月   2:入居者ID   3:行分類フラグ 4:契約ID          5:項目ID
# 6:契約枝番 7:請求年月日 8:非課税フラグ 9:金額税抜き      10:金額税込み
# 11:税額    12:内訳1     13:内訳2       14:特別処理フラグ 15:予備
# 16:予備    17:予備      18:予備        19:予備           20:予備
# 21:予備    22:予備      23:予備        24:予備           25:内線番号

# 内訳と更新者情報作成
awk '{$12=$25;
      print $0,"1","'${current_time}'","'${userid}'"}' |
# 1:処理月      2:入居者ID   3:行分類フラグ 4:契約ID          5:項目ID
# 6:契約枝番    7:請求年月日 8:非課税フラグ 9:金額税抜き      10:金額税込み
# 11:税額       12:内訳1     13:内訳2       14:特別処理フラグ 15:予備
# 16:予備       17:予備      18:予備        19:予備           20:予備
# 21:予備       22:予備      23:予備        24:予備           25:内線番号
# 26:削除フラグ 27:更新時間  28:更新者
delf 25                           |
# 1:処理月    2:入居者ID   3:行分類フラグ 4:契約ID          5:項目ID
# 6:契約枝番  7:請求年月日 8:非課税フラグ 9:金額税抜き      10:金額税込み
# 11:税額     12:内訳1     13:内訳2       14:特別処理フラグ 15:予備
# 16:予備     17:予備      18:予備        19:予備           20:予備
# 21:予備     22:予備      23:予備        24:予備           25:削除フラグ
# 26:更新時間 27:更新者
LANG=C sort                       |
# 後続処理のために請求先＝入居者IDを頭に持ってくる
self 2 1/NF                       > ${tmp}-DENKI_INPUT #集計対象!!
# 1:入居者ID    2:処理月    3:入居者ID   4:行分類フラグ 5:契約ID
# 6:項目ID      7:契約枝番  8:請求年月日 9:非課税フラグ 10:金額税抜き
# 11:金額税込み 12:税額     13:内訳1     14:内訳2       15:特別処理フラグ
# 16:予備       17:予備     18:予備      19:予備        20:予備
# 21:予備       22:予備     23:予備      24:予備        25:予備
# 26:削除フラグ 27:更新時間 28:更新者
# --------------------
cp ${tmp}-DENKI_INPUT ${work}/denki_input
# --------------------
# パイプでエラーあったら落とす
[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(DENKI)"
# --------------------

# --------------------
# 列チェック

[ "$(retu ${tmp}-DENKI_INPUT)" != "28" ] && error_exit "処理中にエラーが発生しました(DENKI)"
[ "$(retu ${tmp}-DENKI_INPUT | gyo)" != "1" ] && error_exit "処理中にエラーが発生しました(DENKI)"
[ "$(awk 'NF!="28"' ${tmp}-DENKI_INPUT | gyo)" != "0" ] && error_exit "処理中にエラーが発生しました(DENKI)"
# --------------------

# 水道課金データの集計
# 水道は請求する人がいない月もある
[ $(awk '$1!="_"&&$2!="_"' ${seikyu_dir}/DENKI_SUIDOU/${shisetsu}/${seikyu_syori_month}/SUIDOU.${shisetsu}.${seikyu_syori_month} | gyo) = 0 ] && exit 0
cat ${seikyu_dir}/DENKI_SUIDOU/${shisetsu}/${seikyu_syori_month}/SUIDOU.${shisetsu}.${seikyu_syori_month} |
# 1:居室 2:利用者ID 3:利用年月 4:課税フラグ 5:税込金額
# 6:税抜金額 7:税額 8:適用 9:有効フラグ 10:更新時間 11:userid
# -
# inputの形にする
#   行分類フラグ＝10：施設利用料明細行
#   請求年月日は固定で月初とする(合計行なので日付の表示しようがない)
awk '$2!="_"{print "'${seikyu_syori_month}'",$2,"20","suido","'${seikyu_syori_month}'01","1",$6,$5,int($6-$5),"0",$8,"_"}' |
# 1:処理月       2:入居者ID   3:行分類フラグ 4:項目ID 5:請求年月日
# 6:非課税フラグ 7:金額税抜き 8:金額税込み   9:税額   10:特別処理フラグ
# 11:内線番号    12:アンスコ
self 1  2  3  NF 4  NF 5  6  7  8  \
     9  NF NF 10 NF NF NF NF NF NF \
     NF NF NF NF 11                |
# 1:処理月   2:入居者ID   3:行分類フラグ 4:契約ID          5:項目ID
# 6:契約枝番 7:請求年月日 8:非課税フラグ 9:金額税抜き      10:金額税込み
# 11:税額    12:内訳1     13:内訳2       14:特別処理フラグ 15:予備
# 16:予備    17:予備      18:予備        19:予備           20:予備
# 21:予備    22:予備      23:予備        24:予備           25:内線番号

# 内訳と更新者情報作成
awk '{$12=$25;
      print $0,"1","'${current_time}'","'${userid}'"}' |
# 1:処理月      2:入居者ID   3:行分類フラグ 4:契約ID          5:項目ID
# 6:契約枝番    7:請求年月日 8:非課税フラグ 9:金額税抜き      10:金額税込み
# 11:税額       12:内訳1     13:内訳2       14:特別処理フラグ 15:予備
# 16:予備       17:予備      18:予備        19:予備           20:予備
# 21:予備       22:予備      23:予備        24:予備           25:内線番号
# 26:削除フラグ 27:更新時間  28:更新者
delf 25                           |
# 1:処理月    2:入居者ID   3:行分類フラグ 4:契約ID          5:項目ID
# 6:契約枝番  7:請求年月日 8:非課税フラグ 9:金額税抜き      10:金額税込み
# 11:税額     12:内訳1     13:内訳2       14:特別処理フラグ 15:予備
# 16:予備     17:予備      18:予備        19:予備           20:予備
# 21:予備     22:予備      23:予備        24:予備           25:削除フラグ
# 26:更新時間 27:更新者
LANG=C sort                       |
# 後続処理のために請求先＝入居者IDを頭に持ってくる
self 2 1/NF                       > ${tmp}-SUIDOU_INPUT #集計対象!!
# 1:入居者ID    2:処理月    3:入居者ID   4:行分類フラグ 5:契約ID
# 6:項目ID      7:契約枝番  8:請求年月日 9:非課税フラグ 10:金額税抜き
# 11:金額税込み 12:税額     13:内訳1     14:内訳2       15:特別処理フラグ
# 16:予備       17:予備     18:予備      19:予備        20:予備
# 21:予備       22:予備     23:予備      24:予備        25:予備
# 26:削除フラグ 27:更新時間 28:更新者
# --------------------
cp ${tmp}-SUIDOU_INPUT ${work}/suidou_input

# --------------------
# パイプでエラーあったら落とす
[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(SUIDOU)"
# --------------------

# --------------------
# 列チェック

[ "$(retu ${tmp}-SUIDOU_INPUT)" != "28" ] && error_exit "処理中にエラーが発生しました(SUIDOU)"
[ "$(retu ${tmp}-SUIDOU_INPUT | gyo)" != "1" ] && error_exit "処理中にエラーが発生しました(SUIDOU)"
[ "$(awk 'NF!="28"' ${tmp}-SUIDOU_INPUT | gyo)" != "0" ] && error_exit "処理中にエラーが発生しました(SUIDOU)"
# --------------------
# --------------------
# --------------------
#---------------------------------------------------------------

exit 0

