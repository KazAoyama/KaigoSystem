#!/bin/bash
#
# KOJINATESEIKYUSHO_SAKUSEI.KEISAN.KAKO_HENKIN 施設請求計算部分のCGI
#
# Written by S.Otsubo

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/KEIRI/CGI/KOJINATESEIKYUSHO_SAKUSEI.INI &> /dev/null

# ログ
[ ! -e /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today} ] && mkdir /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}
exec 2> /home/hands/E-LIFE/KEIRI/TRACE_LOG/${today}/LOG.$(basename ${0}).${HOSTNAME}.${current_time}; set -xv
#---------------------------------------------------------------

#---------------------------------------------------------------
function error_exit {
  message="${1}"
  echo "${message}"
  exit 1
}
#---------------------------------------------------------------

#---------------------------------------------------------------
# 引数設定
namefile=${1}
# 変数
eval $(name-source ${namefile})
seikyu_syori_month="${year}${month}"
seikyu_syori_next_month="$(mdate ${seikyu_syori_month}m/+1)"
seikyu_syori_two_next_month="$(mdate ${seikyu_syori_month}m/+2)"
seikyu_syori_last_month="$(mdate ${seikyu_syori_month}m/-1)"
seikyu_syori_two_last_month="$(mdate ${seikyu_syori_month}m/-2)"
#---------------------------------------------------------------

#---------------------------------------------------------------
# 2.過去ぶんの請求に関する処理(月額利用料のみ対象)

### b.先取りの請求が終わった項目を遡って、返金するレコードを作製する(返金したレコード、日割り返金したレコードはフラグ更新する)
# ${tmp}-getsugaku_riyouryou_kihon_kari |
# 1:入居者ID    2:契約ID   3:利用料種別ID 4:契約枝番    5:利用料名
# 6:税区分      7:支払区分 8:費用算出方法 9:起算開始日  10:起算終了日
# 11:金額       12:特販ID  13:値引額      14:値引後金額 15:特販期間FROM
# 16:特販期間TO

# まるごと返金ぶん
# 返金対象、日割り返金対象を判定するファイルを作成
self 1/4 9 10 ${tmp}-getsugaku_riyouryou_kihon_kari |
# 1:入居者ID   2:契約ID 3:利用料種別ID 4:契約枝番 5:起算開始日
# 6:起算終了日
LANG=C sort > ${tmp}-henkin_hantei

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(KAKO_2)"

# 処理月から二ヶ月ぶんを展開し、キー項目に当てはまるレコードがあるか確認(あてはまる＝請求完了)
# 処理対象${tmp}-memberごとにファイル展開してキーとあてる
for member_id in $(cat ${tmp}-member) ; do

  #------------------------------------------
  for kako_month in ${seikyu_syori_last_month} ${seikyu_syori_two_last_month} ; do
    # ヘッダを取得し、ヘッダから明細ファイル名を取得する
    file_name="$(cjoin0 key=1/2 <(echo "${kako_month} ${member_id}") ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
                 LANG=C sort -k1,2 -k25,25 |
                 getlast 1 2 |
                 self 10)"
    # 1:明細ファイル名
    if [ -s ${seikyu_dir}/${shisetsu}/MEISAI/${kako_month}/${file_name} ] ; then
      cat ${seikyu_dir}/${shisetsu}/MEISAI/${kako_month}/${file_name}
    fi
  done > ${tmp}-kako_file
  # ファイル無かったら次の処理へ
  [ ! -s ${tmp}-kako_file ] && continue
  #------------------------------------------

  #------------------------------------------
  # ファイルを展開してキーとあてる
  self 2 4/6 1/NF ${tmp}-kako_file                |
  # 1:入居者ID                  2:契約ID        3:項目ID            4:契約枝番    5:請求年月
  # 6:入居者ID                  7:行分類フラグ  8:契約ID            9:項目ID      10:契約枝番
  # 11:レコードが発生した年月日 12:非課税フラグ 13:金額税抜き       14:金額税込み 15:税額
  # 16:内訳1                    17:内訳2        18:特別処理済フラグ 19:予備1      20:予備
  # 21:予備                     22:予備         23:予備             24:予備       25:予備
  # 26:予備                     27:予備         28:予備             29:削除フラグ 30:更新時時間
  # 31:更新者
  LANG=C sort                                     |
  # 月額利用料のリストとあてる
  join1 key=1/4 ${tmp}-henkin_hantei -            |
  # 1:入居者ID    2:契約ID      3:項目ID                    4:契約枝番      5:起算開始日
  # 6:起算終了日  7:請求年月    8:入居者ID                  9:行分類フラグ  10:契約ID
  # 11:項目ID     12:契約枝番   13:レコードが発生した年月日 14:非課税フラグ 15:金額税抜き
  # 16:金額税込み 17:税額       18:内訳1                    19:内訳2        20:特別処理済フラグ
  # 21:予備1      22:予備       23:予備                     24:予備         25:予備
  # 26:予備       27:予備       28:予備                     29:予備         30:予備
  # 31:削除フラグ 32:更新時時間 33:更新者
  ## 1-4:キー
  ## 5-6:利用者利用料ファイル側
  ## 7-NF:請求明細ファイル側

  # まるごと返金の処理判定
  # 起算終了日＜レコードが発生した年月かつ特別処理フラグが0(通常処理)は取りすぎているので返金する(毎月支払の有無に関わらず処理するため過去2ヶ月で処理をする)
  awk '{print $0,substr($6,1,6),substr($13,1,6)}' > ${tmp}-henkin_all_mae
  # 1:入居者ID    2:契約ID      3:項目ID                    4:契約枝番      5:起算開始日
  # 6:起算終了日  7:請求年月    8:入居者ID                  9:行分類フラグ  10:契約ID
  # 11:項目ID     12:契約枝番   13:レコードが発生した年月日 14:非課税フラグ 15:金額税抜き
  # 16:金額税込み 17:税額       18:内訳1                    19:内訳2        20:特別処理済フラグ
  # 21:予備1      22:予備       23:予備                     24:予備         25:予備
  # 26:予備       27:予備       28:予備                     29:予備         30:予備
  # 31:削除フラグ 32:更新時時間 33:更新者                   34:起算終了月   35:レコード発生年月

  # 絞り込む前に一旦パイプエラー判定
  [ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(KAKO_2)"

  awk '$34<$35 && $20=="0"' ${tmp}-henkin_all_mae |
  # 請求明細ファイル部分のみにする
  delf 1/6 34/35                                  |
  tee ${tmp}-henkin_all_tee                       |
  # 1:請求年月    2:入居者ID                 3:行分類フラグ 4:契約ID            5:項目ID
  # 6:契約枝番    7:レコードが発生した年月日 8:非課税フラグ 9:金額税抜き        10:金額税込み
  # 11:税額       12:内訳1                   13:内訳2       14:特別処理済フラグ 15:予備1
  # 16:予備       17:予備                    18:予備        19:予備             20:予備
  # 21:予備       22:予備                    23:予備        24:予備             25:削除フラグ
  # 26:更新時時間 27:更新者

  # そのままマイナスのインプットにしたいので金額部分をすべて負の値にし、内訳1と更新時間、請求年月を処理月にする
  awk '{$1="'${seikyu_syori_month}'";
        $9=$9*-1;
        $10=$10*-1;
        $11=$11*-1;
        $12="請求終了後のご返金("substr($7,1,4)"/"substr($7,5,2)"分)";
        $26="'${current_time}'";
        $27="'${userid}'";
        print}'                                   |
  LANG=C sort                                     > ${tmp}-HENKIN_ALL_${member_id} 
  #集計対象!!

  # 絞込みしてファイルが空になる可能性があるのでパイプエラーはみない。列チェックだけあとでやる
  [ ! -s ${tmp}-HENKIN_ALL_${member_id} ] && rm ${tmp}-HENKIN_ALL_${member_id}
  #------------------------------------------

  #------------------------------------------
  ### 過去データ更新分
  # まるごと返金したレコードを更新するための準備
  # 特別処理フラグを返金済みにするのと更新時間更新者をかえる
  awk '{$14="3";
        $26="'${current_time}'";
        $27="'${userid}'";
        print}'           ${tmp}-henkin_all_tee |
  LANG=C sort                                   > ${tmp}-HENKIN_ALL_KAKO_${member_id}
  # 1:請求年月    2:入居者ID                 3:行分類フラグ 4:契約ID            5:項目ID
  # 6:契約枝番    7:レコードが発生した年月日 8:非課税フラグ 9:金額税抜き        10:金額税込み
  # 11:税額       12:内訳1                   13:内訳2       14:特別処理済フラグ 15:予備1
  # 16:予備       17:予備                    18:予備        19:予備             20:予備
  # 21:予備       22:予備                    23:予備        24:予備             25:削除フラグ
  # 26:更新時時間 27:更新者

  # 絞込みしてファイルが空になる可能性があるのでパイプエラーはみない。列チェックだけあとでやる
  [ ! -s ${tmp}-HENKIN_ALL_KAKO_${member_id} ] && rm ${tmp}-HENKIN_ALL_KAKO_${member_id}
  #------------------------------------------

  #------------------------------------------
  # 更新用にファイルを請求年月キーで分割する(ファイル中身あるときだけ処理はいる)
  if [ -s ${tmp}-HENKIN_ALL_KAKO_${member_id} ] ; then
    keycut ${tmp}-HENKIN_ALL_KAKO.${member_id}.%1 ${tmp}-HENKIN_ALL_KAKO_${member_id}
  fi
  #------------------------------------------
done
#---------------------------------------------------------------

#---------------------------------------------------------------
# ファイルチェック
# 内容チェックができないのでとりあえず列チェック

: > ${tmp}-henkin_check_list
rm ${tmp}-err
ls -l ${tmp}-HENKIN_ALL_KAKO_* |
self NF                        >> ${tmp}-henkin_check_list
ls -l ${tmp}-HENKIN_ALL_*      |
self NF                        >> ${tmp}-henkin_check_list
cat ${tmp}-henkin_check_list |
while read file; do
  [ "$(retu ${file})" != "27" ] && : > $tmp-err
  [ "$(retu ${file} | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="27"' ${file} | gyo)" != "0" ] && : > $tmp-err
  [ -e ${tmp}-err ] && break;
done
[ -e ${tmp}-err ] && error_exit "処理中にエラーが発生しました(KAKO_2)"
#---------------------------------------------------------------

#---------------------------------------------------------------
# 日割り返金ぶん(途中まではまるごと返金と変わらず)

# 返金対象、日割り返金対象を判定するファイルを作成
# ${tmp}-getsugaku_riyouryou_kihon_kari
# 1:入居者ID    2:契約ID   3:利用料種別ID 4:契約枝番    5:利用料名
# 6:税区分      7:支払区分 8:費用算出方法 9:起算開始日  10:起算終了日
# 11:金額       12:特販ID  13:値引額      14:値引後金額 15:特販期間FROM
# 16:特販期間TO

# 処理月から二ヶ月ぶんを展開し、キー項目に当てはまるレコードがあるか確認(あてはまる＝請求完了)
# 処理対象${tmp}-memberごとにファイル展開してキーとあてる
for member_id in $(cat ${tmp}-member) ; do
  #------------------------------------------
  for kako_month in ${seikyu_syori_last_month} ${seikyu_syori_two_last_month} ; do
    # ヘッダを取得し、ヘッダから明細ファイル名を取得する
    file_name="$(cjoin0 key=1/2 <(echo "${kako_month} ${member_id}") ${seikyu_dir}/${shisetsu}/HEAD/SEIKYU_HEAD |
                 LANG=C sort -k1,2 -k25,25 |
                 getlast 1 2 |
                 self 10)"
    # 1:明細ファイル名
    if [ -s ${seikyu_dir}/${shisetsu}/MEISAI/${kako_month}/${file_name} ] ; then
      cat ${seikyu_dir}/${shisetsu}/MEISAI/${kako_month}/${file_name}
    fi
  done                             > ${tmp}-kako_file

  # ファイル無かったら次の処理へ
  [ ! -s ${tmp}-kako_file ] && continue
  #------------------------------------------

  #------------------------------------------
  # ファイルを展開してキーとあてる
  self 2 4/6 1/NF ${tmp}-kako_file |
  # 1:入居者ID                  2:契約ID        3:項目ID            4:契約枝番    5:請求年月
  # 6:入居者ID                  7:行分類フラグ  8:契約ID            9:項目ID      10:契約枝番
  # 11:レコードが発生した年月日 12:非課税フラグ 13:金額税抜き       14:金額税込み 15:税額
  # 16:内訳1                    17:内訳2        18:特別処理済フラグ 19:予備1      20:予備
  # 21:予備                     22:予備         23:予備             24:予備       25:予備
  # 26:予備                     27:予備         28:予備             29:削除フラグ 30:更新時時間
  # 31:更新者
  LANG=C sort                      |
  # 過去データ更新ぶん用
  tee ${tmp}-input_kako_koushinyou |
  # 月額利用料のリストとあてる
  join1 key=1/4 ${tmp}-getsugaku_riyouryou_kihon_kari - |
  # 1:入居者ID    2:契約ID      3:項目ID                    4:契約枝番      5:利用料名
  # 6:税区分      7:支払区分    8:費用算出方法              9:起算開始日    10:起算終了日
  # 11:金額       12:特販ID     13:値引額                   14:値引後金額   15:特販期間FROM
  # 16:特販期間TO 17:請求年月   18:入居者ID                 19:行分類フラグ 20:契約ID
  # 21:項目ID     22:契約枝番   23:レコードが発生した年月日 24:非課税フラグ 25:金額税抜き
  # 26:金額税込み 27:税額       28:内訳1                    29:内訳2        30:特別処理済フラグ
  # 31:予備1      32:予備       33:予備                     34:予備         35:予備
  # 36:予備       37:予備       38:予備                     39:予備         40:予備
  # 41:削除フラグ 42:更新時時間 43:更新者
  ## 1-4:キー項目
  ## 5-16:利用者利用料ぶぶん
  ## 17-NF:明細ぶん

  # 日割り返金の処理判定
  # 起算終了日＝レコードが発生した年月かつ特別処理フラグが0(通常処理)は取りすぎているので返金する(毎月支払の有無に関わらず処理するため過去2ヶ月で処理をする)
  awk '{print $0,substr($9,1,6),substr($10,1,6),substr($23,1,6)}' |
  # 1:入居者ID          2:契約ID      3:項目ID                    4:契約枝番      5:利用料名
  # 6:税区分            7:支払区分    8:費用算出方法              9:起算開始日    10:起算終了日
  # 11:金額             12:特販ID     13:値引額                   14:値引後金額   15:特販期間FROM
  # 16:特販期間TO       17:請求年月   18:入居者ID                 19:行分類フラグ 20:契約ID
  # 21:項目ID           22:契約枝番   23:レコードが発生した年月日 24:非課税フラグ 25:金額税抜き
  # 26:金額税込み       27:税額       28:内訳1                    29:内訳2        30:特別処理済フラグ
  # 31:予備1            32:予備       33:予備                     34:予備         35:予備
  # 36:予備             37:予備       38:予備                     39:予備         40:予備
  # 41:削除フラグ       42:更新時時間 43:更新者                   44:起算開始月   45:起算終了月
  # 46:レコード発生年月
  awk '$45==$46 && $30=="0"'      |
  # ただし起算開始月と終了月が同じものは新しいinputを作成する処理で日割り計算するので除外
  # 日割り計算基本ファイル完成
  awk '$44!=$45'                  > ${tmp}-henkin_hiwari_kihon

  # ファイル無かったら次の処理へ
  [ ! -s ${tmp}-henkin_hiwari_kihon ] && continue

  ## 1-4:キー項目
  ## 5-16:利用者利用料ぶぶん
  ## 17-43:明細ぶん
  ## 44-46:年月チェック用
  #------------------------------------------

  #------------------------------------------
  # 上記仮ファイルを小さくして、日割り計算するとかしないとか判定する
  self 1/4 8/10 46 ${tmp}-henkin_hiwari_kihon |
  # 1:入居者ID   2:契約ID     3:項目ID           4:契約枝番 5:費用算出方法
  # 6:起算開始日 7:起算終了日 8:レコード発生年月
  # -
  # 月末まで有効か、月初からの日数を算出
  # (起算開始月と終了月がイコールのものは入ってこないので月初から始まるかの処理は不要)

  # 計算のためにレコード発生年月の月初と月末の日付を取得
  awk '{print $0,$8"01"}'         |
  # 1:入居者ID   2:契約ID     3:項目ID           4:契約枝番             5:費用算出方法
  # 6:起算開始日 7:起算終了日 8:レコード発生年月 9:レコード発生年月月初
  mdate -e 8m/+1                  |
  # 1:入居者ID   2:契約ID     3:項目ID           4:契約枝番           5:費用算出方法
  # 6:起算開始日 7:起算終了日 8:レコード発生年月 9:レコード発生年月+1 10:レコード発生年月月初
  awk '{$9=$9"01"; print}'        |
  # 1:入居者ID   2:契約ID     3:項目ID           4:契約枝番               5:費用算出方法
  # 6:起算開始日 7:起算終了日 8:レコード発生年月 9:レコード発生年月+1月初 10:レコード発生年月月初
  mdate -e 9/-1                   |
  # 1:入居者ID              2:契約ID     3:項目ID           4:契約枝番             5:費用算出方法
  # 6:起算開始日            7:起算終了日 8:レコード発生年月 9:レコード発生年月月末 10:レコード発生年月+1月初
  # 11:レコード発生年月月初
  self 1/8 11 9                   |
  # 1:入居者ID   2:契約ID     3:項目ID           4:契約枝番             5:費用算出方法
  # 6:起算開始日 7:起算終了日 8:レコード発生年月 9:レコード発生年月月初 10:レコード発生年月月末

  # レコード発生年月月初から起算終了までの日数を算出(＝日割り日数)
  mdate 7 9                       |
  # 1:入居者ID              2:契約ID     3:項目ID                     4:契約枝番         5:費用算出方法
  # 6:起算開始日            7:起算終了日 8:日割り日数(FROMを含まない) 9:レコード発生年月 10:レコード発生年月月初
  # 11:レコード発生年月月末

  # FROMを含まない日数を計算しているので一日たす
  awk '{$8=$8+1; print}'          |
  self 1/7 9/11 8                 |
  # 1:入居者ID    2:契約ID     3:項目ID           4:契約枝番             5:費用算出方法
  # 6:起算開始日  7:起算終了日 8:レコード発生年月 9:レコード発生年月月初 10:レコード発生年月月末
  # 11:日割り日数

  # ただし起算終了日＝レコード発生年月末ならばその月はまるまるいたことになるので返金対象から除外
  # 起算終了日がレコード発生年月月末以外を出力
  awk '$7!=$10'                   |
  # さらに日割りでも30日以上ならまるまるいたことになるので返金対象から除外(30日基準のため)
  # 日割日数が30日未満を出力
  awk '$11<30'                    |
  # 必要な項目に絞る
  self 1/4 11                     |
  # 1:入居者ID 2:契約ID 3:項目ID 4:契約枝番 5:日割り日数
  LANG=C sort                     |
  tee ${tmp}-hiwari_nissu         |
  #------------------------------------------

  #------------------------------------------
  # 日割り基本ファイルと日割り日数ファイルを結合させる
  join1 key=1/4 - ${tmp}-henkin_hiwari_kihon > ${tmp}-henkin_hiwari_keisn_mae
  # 1:入居者ID          2:契約ID            3:項目ID      4:契約枝番                  5:日割り日数
  # 6:利用料名          7:税区分            8:支払区分    9:費用算出方法              10:起算開始日
  # 11:起算終了日       12:金額             13:特販ID     14:値引額                   15:値引後金額
  # 16:特販期間FROM     17:特販期間TO       18:請求年月   19:入居者ID                 20:行分類フラグ
  # 21:契約ID           22:項目ID           23:契約枝番   24:レコードが発生した年月日 25:非課税フラグ
  # 26:金額税抜き       27:金額税込み       28:税額       29:内訳1                    30:内訳2
  # 31:特別処理済フラグ 32:予備1            33:予備       34:予備                     35:予備
  # 36:予備             37:予備             38:予備       39:予備                     40:予備
  # 41:予備             42:削除フラグ       43:更新時時間 44:更新者                   45:起算開始月
  # 46:起算終了月       47:レコード発生年月
  ## 1-4:キー項目
  ## 5:日割り計算用日数
  ## 6-17:利用者利用料ぶぶん
  ## 18-44:明細ぶん
  ## 44-NF:計算用日付

##################################################################################################################################################起算終了の返金は切り上げ対応

  # 下記ルールで計算する
  #   (この処理に入るのは日割り返金のみ)
  #   日割り日数が入っている場合は切り上げ計算
  #   日割り日数が0の場合はまるごとお返しする
  
  # -----------------------------------
  # 費用算出方法と日割り日数で分岐
  
  awk '$9=="1" && $5!=0{print}' ${tmp}-henkin_hiwari_keisn_mae > ${tmp}-kako_hiwari
  awk '$9=="1" && $5==0{print}' ${tmp}-henkin_hiwari_keisn_mae > ${tmp}-kako_not_hiwari1
  awk '$9=="0"{print}' ${tmp}-henkin_hiwari_keisn_mae          > ${tmp}-kako_not_hiwari2
  # -----------------------------------
  
  # -----------------------------------
  # 日割り側の計算(なかで賃料とそうでないもの分岐)
  cjoin0 +ng key=3 <(echo "001") ${tmp}-kako_hiwari > ${tmp}-kako_hiwari_chinryou 2> ${tmp}-kako_hiwari_chinryouigai
  # -----------------------------------
  
  # -----------------------------------
  # 日割り賃料(判定基準1000円未満)
  #   返金額(値引)=金額(日割り)-値引額(日割り)-金額
  #   返金額=金額(日割り)-金額
  
  lcalc '$[1:NF],
         age($12*$5/30,03) - age($14*$5/30,03) - $12,
         age($12*$5/30,03) - $12' ${tmp}-kako_hiwari_chinryou > ${tmp}-kako_hiwari_chinryou_result
  # 1:入居者ID          2:契約ID            3:項目ID        4:契約枝番                  5:日割り日数
  # 6:利用料名          7:税区分            8:支払区分      9:費用算出方法              10:起算開始日
  # 11:起算終了日       12:金額             13:特販ID       14:値引額                   15:値引後金額
  # 16:特販期間FROM     17:特販期間TO       18:請求年月     19:入居者ID                 20:行分類フラグ
  # 21:契約ID           22:項目ID           23:契約枝番     24:レコードが発生した年月日 25:非課税フラグ
  # 26:金額税抜き       27:金額税込み       28:税額         29:内訳1                    30:内訳2
  # 31:特別処理済フラグ 32:予備1            33:予備         34:予備                     35:予備
  # 36:予備             37:予備             38:予備         39:予備                     40:予備
  # 41:予備             42:削除フラグ       43:更新時時間   44:更新者                   45:起算開始月
  # 46:起算終了月       47:レコード発生年月 48:返金額(値引) 49:返金額
  # -----------------------------------
  
  # -----------------------------------
  # 日割り賃料以外(判定基準小数点以下第一位)
  #   返金額(値引)=金額(日割り)-値引額(日割り)-金額
  #   返金額=金額(日割り)-金額
  
  lcalc '$[1:NF],
         age(sage($12*$5/30*10,0)/10,0) - age(sage($14*$5/30*10,0)/10,0) - $12,
         age(sage($12*$5/30*10,0)/10,0) -$12' ${tmp}-kako_hiwari_chinryouigai > ${tmp}-kako_hiwari_chinryouigai_result
  # 1:入居者ID          2:契約ID            3:項目ID        4:契約枝番                  5:日割り日数
  # 6:利用料名          7:税区分            8:支払区分      9:費用算出方法              10:起算開始日
  # 11:起算終了日       12:金額             13:特販ID       14:値引額                   15:値引後金額
  # 16:特販期間FROM     17:特販期間TO       18:請求年月     19:入居者ID                 20:行分類フラグ
  # 21:契約ID           22:項目ID           23:契約枝番     24:レコードが発生した年月日 25:非課税フラグ
  # 26:金額税抜き       27:金額税込み       28:税額         29:内訳1                    30:内訳2
  # 31:特別処理済フラグ 32:予備1            33:予備         34:予備                     35:予備
  # 36:予備             37:予備             38:予備         39:予備                     40:予備
  # 41:予備             42:削除フラグ       43:更新時時間   44:更新者                   45:起算開始月
  # 46:起算終了月       47:レコード発生年月 48:返金額(値引) 49:返金額
  # -----------------------------------
  
  # -----------------------------------
  # 日割りでない計算(まるごと返金)
  
  cat ${tmp}-kako_not_hiwari1 ${tmp}-kako_not_hiwari2 |
  awk '{print $0,-$15,-$12}' -                        > ${tmp}-kako_not_hiwari_result
  # 1:入居者ID          2:契約ID            3:項目ID        4:契約枝番                  5:日割り日数
  # 6:利用料名          7:税区分            8:支払区分      9:費用算出方法              10:起算開始日
  # 11:起算終了日       12:金額             13:特販ID       14:値引額                   15:値引後金額
  # 16:特販期間FROM     17:特販期間TO       18:請求年月     19:入居者ID                 20:行分類フラグ
  # 21:契約ID           22:項目ID           23:契約枝番     24:レコードが発生した年月日 25:非課税フラグ
  # 26:金額税抜き       27:金額税込み       28:税額         29:内訳1                    30:内訳2
  # 31:特別処理済フラグ 32:予備1            33:予備         34:予備                     35:予備
  # 36:予備             37:予備             38:予備         39:予備                     40:予備
  # 41:予備             42:削除フラグ       43:更新時時間   44:更新者                   45:起算開始月
  # 46:起算終了月       47:レコード発生年月 48:返金額(値引) 49:返金額
  # -----------------------------------
  
  # -----------------------------------
  # 上記結果をまとめて内訳1を作成
  
  cat ${tmp}-kako_not_hiwari_result \
      ${tmp}-kako_hiwari_chinryouigai_result \
      ${tmp}-kako_hiwari_chinryou_result         |
  awk '{$29="請求終了後のご返金("substr($47,1,4)"/"substr($47,5,6)"分)";
        print}' -                                | 
  # 1:入居者ID          2:契約ID            3:項目ID        4:契約枝番                  5:日割り日数
  # 6:利用料名          7:税区分            8:支払区分      9:費用算出方法              10:起算開始日
  # 11:起算終了日       12:金額             13:特販ID       14:値引額                   15:値引後金額
  # 16:特販期間FROM     17:特販期間TO       18:請求年月     19:入居者ID                 20:行分類フラグ
  # 21:契約ID           22:項目ID           23:契約枝番     24:レコードが発生した年月日 25:非課税フラグ
  # 26:金額税抜き       27:金額税込み       28:税額         29:内訳1                    30:内訳2
  # 31:特別処理済フラグ 32:予備1            33:予備         34:予備                     35:予備
  # 36:予備             37:予備             38:予備         39:予備                     40:予備
  # 41:予備             42:削除フラグ       43:更新時時間   44:更新者                   45:起算開始月
  # 46:起算終了月       47:レコード発生年月 48:返金額(値引) 49:返金額

  # 特販期間が請求月にひっかかっているかどうかを判定して、特販なら特販の値を採用して明細の形をつくる
  self 1/NF 16.1.6 17.1.6                        |
  # 1:入居者ID          2:契約ID            3:項目ID        4:契約枝番                  5:日割り日数
  # 6:利用料名          7:税区分            8:支払区分      9:費用算出方法              10:起算開始日
  # 11:起算終了日       12:金額             13:特販ID       14:値引額                   15:値引後金額
  # 16:特販期間FROM     17:特販期間TO       18:請求年月     19:入居者ID                 20:行分類フラグ
  # 21:契約ID           22:項目ID           23:契約枝番     24:レコードが発生した年月日 25:非課税フラグ
  # 26:金額税抜き       27:金額税込み       28:税額         29:内訳1                    30:内訳2
  # 31:特別処理済フラグ 32:予備1            33:予備         34:予備                     35:予備
  # 36:予備             37:予備             38:予備         39:予備                     40:予備
  # 41:予備             42:削除フラグ       43:更新時時間   44:更新者                   45:起算開始月
  # 46:起算終了月       47:レコード発生年月 48:返金額(値引) 49:返金額                   50:特販期間FROM月
  # 51:特販期間TO月
  awk '{if($13!="_" && $50<=$47 && $51>=$47)
          {$26=$48;}
        else
          {$26=$49};
        print}'                                  |
  self 1/4 7 18/44                               > ${tmp}-hiwari_henkin_zeikeisan_mae
  # 1:入居者ID    2:契約ID                    3:項目ID        4:契約枝番          5:税区分
  # 6:請求年月    7:入居者ID                  8:行分類フラグ  9:契約ID            10:項目ID
  # 11:契約枝番   12:レコードが発生した年月日 13:非課税フラグ 14:金額税抜き       15:金額税込み
  # 16:税額       17:内訳1                    18:内訳2        19:特別処理済フラグ 20:予備1
  # 21:予備       22:予備                     23:予備         24:予備             25:予備
  # 26:予備       27:予備                     28:予備         29:予備             30:削除フラグ
  # 31:更新時時間 32:更新者
  # -----------------------------------

  # この処理はファイルがあるときだけ行うのでパイプでエラーでたら落とす
  [ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(KAKO_2)"

  ## 1-4:キー
  ## 5:計算処理用
  ## 6-NF:input項目
  #------------------------------------------

  #------------------------------------------
  # 税区分をみて課税については計算する
  ## 1:課税
  ## 2:非課税
  # 課税ぶんの処理してそれぞれのフィールドにいれる
  cat ${tmp}-ZEIRITSU              |
  while read zeiritsu zei_from zei_to ; do
    cat ${tmp}-hiwari_henkin_zeikeisan_mae |
    awk '$5=="1" && $12>="'${zei_from}'" && $12<="'${zei_to}'"' |
    awk '{zeigaku=int($14*"'${zeiritsu}'");
          zeikomi=$14+zeigaku;
          $15=zeikomi;
          $16=zeigaku;
          print $0}'
  done                             > ${tmp}-hiwari_henkin_kazei
  #------------------------------------------

  #------------------------------------------
  # 非課税ぶんの処理
  cat ${tmp}-hiwari_henkin_zeikeisan_mae |
  awk '$5=="2"{$15=$14;
               $16="0";
               print}'             |
  tee ${tmp}-hiwari_henkin_hikazei |
  #------------------------------------------

  #------------------------------------------
  # 課税非課税をあわせて、明細INPUTの形に整える
  cat ${tmp}-hiwari_henkin_kazei - |
  awk '{$6="'${seikyu_syori_month}'";
        $5=$13;
        $19="3";
        $31="'${current_time}'";
        $32="'${userid}'";
        print}'                    |
  tee ${tmp}-hiwari_henkin_key     |
  self 6/NF                        |
  # 1:請求年月    2:入居者ID                 3:行分類フラグ 4:契約ID            5:項目ID
  # 6:契約枝番    7:レコードが発生した年月日 8:非課税フラグ 9:金額税抜き        10:金額税込み
  # 11:税額       12:内訳1                   13:内訳2       14:特別処理済フラグ 15:予備1
  # 16:予備       17:予備                    18:予備        19:予備             20:予備
  # 21:予備       22:予備                    23:予備        24:予備             25:削除フラグ
  # 26:更新時時間 27:更新者
  LANG=C sort                      > ${tmp}-HENKIN_HIWARI.${member_id}
  #集計対象!!

  # この処理はファイルがあるときだけ行うのでパイプでエラーでたら落とす
  [ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(KAKO_2)"
  #------------------------------------------

  #------------------------------------------
  ### 過去データ更新分
  # 過去INPUTのフラグ更新データ
  self 1/4 ${tmp}-hiwari_henkin_key    |
  # 1:入居者ID 2:契約ID 3:項目ID 4:契約枝番
  LANG=C sort                          |
  tee ${tmp}-hiwari_henkin_key_kakutei |
  #------------------------------------------

  #------------------------------------------
  # ${tmp}-input_kako_koushinyou
  # 1:入居者ID                  2:契約ID        3:項目ID            4:契約枝番    5:請求年月
  # 6:入居者ID                  7:行分類フラグ  8:契約ID            9:項目ID      10:契約枝番
  # 11:レコードが発生した年月日 12:非課税フラグ 13:金額税抜き       14:金額税込み 15:税額
  # 16:内訳1                    17:内訳2        18:特別処理済フラグ 19:予備1      20:予備
  # 21:予備                     22:予備         23:予備             24:予備       25:予備
  # 26:予備                     27:予備         28:予備             29:削除フラグ 30:更新時時間
  # 31:更新者
  # -
  # キーで絞り込む
  join0 key=1/4 - ${tmp}-input_kako_koushinyou |
  # フラグと更新時間をいれる
  awk '{$18="2";
        $30="'${current_time}'";
        $31="'${userid}'";
        print}'                     |
  # キーを除く
  delf 1/4                          |
  # 1:請求年月    2:入居者ID                 3:行分類フラグ 4:契約ID            5:項目ID
  # 6:契約枝番    7:レコードが発生した年月日 8:非課税フラグ 9:金額税抜き        10:金額税込み
  # 11:税額       12:内訳1                   13:内訳2       14:特別処理済フラグ 15:予備1
  # 16:予備       17:予備                    18:予備        19:予備             20:予備
  # 21:予備       22:予備                    23:予備        24:予備             25:削除フラグ
  # 26:更新時時間 27:更新者
  LANG=C sort                       > ${tmp}-HENKIN_HIWARI_KAKO_${member_id}

  # この処理はファイルがあるときだけ行うのでパイプでエラーでたら落とす
  [ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit "処理中にエラーが発生しました(KAKO_2)"
  #------------------------------------------

  #------------------------------------------
  # 更新用にファイルを請求年月キーで分割する
  keycut ${tmp}-HENKIN_HIWARI_KAKO.${member_id}.%1 ${tmp}-HENKIN_HIWARI_KAKO_${member_id}
  #------------------------------------------
done

### bここまで
#---------------------------------------------------------------

exit 0

