#!/bin/bash
#
# CARECALL_RIREKI.SEARCH : ケアコール履歴グラフ検索用CGI
#
# Usage : CARECALL_RIREKI.SEARCH ${namefile}
#
# Written by K.Aoyama(hands lab.inc)

#--------------------ログ出力--------------------

exec 2> /home/hands/E-LIFE/SHISETSU_KAIGOKIROKU/APLOG/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d"); set -xv

#--------------------設定ファイル読込--------------------
source /home/hands/.bashrc &> /dev/null


#--------------------変数設定--------------------
tmp=/var/tmp/$$

#ゴミtmpの消去
rm -f $tmp-*

namefile=${1}
current_time="$(date "+%Y%m%d%H%M%S")"

today="$(date +%Y%m%d)"
this_month="$(date +%Y%m)"

# ディレクトリの設定
home_dir="/home/hands/E-LIFE"
app_dir="${home_dir}/SHISETSU_KAIGOKIROKU"
work_dir="${app_dir}/WORK"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
tbl_dir="${app_dir}/TBL"
pompa_dir="${app_dir}/POMPA"
input_dir="${app_dir}/INPUT"
aplog_dir="${app_dir}/AP_LOG"
download_dir="${app_dir}/DOWNLOAD"
temp_dir="${app_dir}/TEMPLATE"
data_dir="/DATA/E-LIFE"
nusercall_data_dir="${data_dir}/SHISETSU_KAIGOKIROKU/NURSECALL"


# 必要な値の取得
cat ${namefile} > ${tmp}-name


#--------------------エラー時の対応--------------------
function error_exit(){
  message=$1
  echo ${message}

  rm -f $tmp-*
  exit 1
}

eval $(name-source ${namefile})

# 画面の描画モードを決定する。
MODE="$(nameread "MODE" ${namefile})"
if [ -n "${MODE}" -a "${MODE}" != "_" ];then
  :
else
  MODE="search"
fi

# 年月の取得
nengetsu=$(echo ${nengetsumonth} | sed 's/-//g')
echo ${nengetsu} > ${tmp}-nengetsu
echo ${riyosha_name} > ${tmp}-taishosha

# 検索する年月の日にちを取得
mdate ${nengetsu}m    > ${tmp}-search_month

# 利用者IDから部屋番号をわりだす
# 1:施設ID   2:建屋ID 3:フロア 4:ユニット 5:部屋番号
# 6:利用者ID 7:FROM   8:TO
#cat ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS                  |
#awk '$7<="'${nengetsu}'01"&&"'${nengetsu}'01"<=$8'                        |
#LANG=C sort -k6,6                                                       |
#join0 key=6 ${tmp}-taishosha                                            > $tmp-taishouroom
#taishouroom=$(self 5 $tmp-taishouroom)

[ -z "${tateya}" -o "${tateya}" = "_" ] && tateya="02"

if [ -z "${riyosha_name}" -o "${riyosha_name}" = "_" ] ; then
  cat $data_dir/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS     |
  awk '$1=="'$shisetsu'"&&$2=="'$tateya'"&&$3=="'$floor'"&&($7<="'$nengetsu'01"||"'$nengetsu'31"<=$8){print $6}' |
  LANG=C sort -k1,1   > ${tmp}-taishosha
fi

# 検索する
self 1/9 ${nusercall_data_dir}/${shisetsu}/${nengetsu}/NURSECALL_DATA        |
# 1:施設     2:年月   3:日       4:時刻     5:コールタイプ
# 6:部屋番号 7:フロア 8:ユニット 9:利用者ID
awk '$1=="'${shisetsu}'"&&$2=="'$nengetsu'"'    |
LANG=C sort -k9,9  |
#if [ -z "${riyosha_name}" -o "${riyosha_name}" = "_"  ] ; then
#  cat -
#else
#  join0 key=9 ${tmp}-taishosha
join0 key=9 ${tmp}-taishosha  |
#fi |
if [ -z "$call_type" -o "$call_type" = "_" ] ; then
awk '$5=="Q"||$5=="R"||$5=="X"'
else
awk '$5=="'$call_type'"'
fi |
tee $tmp-shukei_data  |
# 時間帯ごとに集計
awk '{print substr($4,1,2)}'  |
LANG=C sort -k1,1     |
count 1 1             > $tmp-graph_motodata

cp $tmp-graph_motodata $work_dir/graph_motodata

echo "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" \
"12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" > $tmp-time_fmt
  
# データを整形
# 先に目盛りの時間データを作成
cat  ${tmp}-time_fmt             |
tarr                             |
maezero 1.2                      |
join2 +0 key=1 $tmp-graph_motodata  |
awk 'BEGIN{OFS=","}{print "[""'\''"$1"'\''",$2"]"}' |
yarr                                  |
sed 's/ /,/g'                         |
awk '{print "g",$0}'                  > ${tmp}-nursecall_graph

# 日にちフォーマットを生成
mdate ${nengetsu}m |
tarr |
awk '{print substr($1,7,2)}'        > ${tmp}-mdate

cp $tmp-shukei_data $work_dir/shukei_data

cp $tmp-mdate $work_dir/mdate_fmt

cat $tmp-shukei_data                  |
# 時間帯によって分ける
# 1:施設     2:年月   3:日       4:時刻     5:コールタイプ
# 6:部屋番号 7:フロア 8:ユニット 9:利用者ID 10:時間帯区分
awk '{$4=substr($4,1,2);if(0<=int($4)&&int($4)<8){$10="1"}else if(8<=int($4)&&int($4)<16){$10="2"} else{$10="3"};print $0}' |
# 1:施設 2:年月 3:日 4:時間帯区分
self 1 2 3 10 |
# 1:施設 2:年月 3:日 4:時間帯区分 5:回数
LANG=C sort -k1,4 |
count 1 4 |
# 1:日 2:時間帯区分 3:回数
delf 1 2      > $tmp-shukei_work1

cat $tmp-shukei_work1   |
awk '$2=="1"'      |
LANG=C sort -k1,1  |
join2 +0 key=1 - ${tmp}-mdate > $tmp-asa-work1

cat $tmp-shukei_work1   |
awk '$2=="2"'      |
LANG=C sort -k1,1  |
join2 +0 key=1 - ${tmp}-mdate > $tmp-hiru-work1

cat $tmp-shukei_work1   |
awk '$2=="3"'      |
LANG=C sort -k1,1  |
join2 +0 key=1 - ${tmp}-mdate > $tmp-yoru-work1

cat $tmp-asa-work1 $tmp-hiru-work1 $tmp-yoru-work1 |
LANG=C sort -k1,2 -u  |
self 2 1 3 |
map num=1 |
awk 'NR>1&&$1!="0"' |
LANG=C sort -k1,1   |
sed 's/ 0 / @ /g'       |
sed 's/ 0 / @ /g'       |
sed 's/ 0$/ @/g'       |
underlay num=1      |
tarr num=1          |
awk '{print "t",$0}'               > $tmp-nursecall_table

cat ${tmp}-nursecall_graph ${tmp}-nursecall_table


# 終了
rm -f $tmp-*

exit 0
