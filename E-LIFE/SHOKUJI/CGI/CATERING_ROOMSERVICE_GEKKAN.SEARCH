#!/bin/bash
#
# SHOKUJI_JISSEKI_GEKKAN.SEARCH
# 食事実績検索
#
# Written by E.Okuda  : 2013/11/25

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/SHOKUJI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d"); set -xv
# 設定ファイル読込
source  /home/hands/E-LIFE/SHOKUJI/CGI/SHOKUJI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
#--------------------------------------------------------------
#--------------------------------------------------------------
# 変数の定義
tmp=/var/tmp/${$}
namedata=$1

#ゴミtmpの消去
rm -f $tmp-*


#--------------------------------------------------------------
#--------------------------------------------------------------
function error_exit {
  rm -f $tmp-*
  exit 0
}
#--------------------------------------------------------------
#--------------------------------------------------------------
# ディレクトリ設定
app_dir="${home_dir}/SHOKUJI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
pompa_dir="${app_dir}/POMPA"
today=$(date +%Y%m%d)
thisyear="$(date +%Y)"
thismonth="$(date +%m)"
seikyuu_dir="/DATA/E-LIFE/SEIKYU/SHISETSU/SHOKUJI"


schedule_dir="/DATA/E-LIFE/UNEI/SCHEDULE"
schedule_pompa_dir="/home/hands/E-LIFE/UNEI/POMPA/SCHEDULE"

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------
RIYOUSHAID=$(nameread "Nyuukyosha" ${namedata})
Shisetsu=$(nameread "Shisetsu" ${namedata})
[ -z "${Shisetsu}" -o "${Shisetsu}" = "_" ] && Shisetsu="$(nameread "shisetsu" ${namedata})"
Tateya=$(nameread "Tateya" ${namedata})
[ -z "${Tateya}" -o "${Tateya}" = "_" ] && Tateya="$(awk '$1=="'${USERID}'"&&$2=="'${Shisetsu}'"{print $3}' ${tbl_dir}/JYUUGYOUIN_MASTER/USER_SHISETSU)" # 建屋がなければデフォルトシニア
[ -z "${Tateya}" -o "${Tateya}" = "_" ] && Tateya=$(awk '$1=="'${Shisetsu}'"{print $2}' ${tbl_dir}/SHISETSU_MASTER/SHISETSU_TATEYA_FLOOR | LANG=C sort |uniq |head -1)

TaishouYear=$(nameread "TaishouYear" ${namedata})
[ -z "${TaishouYear}" -o "${TaishouYear}" = "_" ] && TaishouYear=${thisyear}
TaishouMonth=$(nameread "TaishouMonth" ${namedata} | maezero 1.2)
[ -z "${TaishouMonth}" -o "${TaishouMonth}" = "_" ] && TaishouMonth=${thismonth}
TaishouNengetsu=$(echo "${TaishouYear}""${TaishouMonth}")

TaishouNengetsuFrom=$(echo "${TaishouNengetsu}""01")
TaishouNengetsuTo=$(echo "${TaishouNengetsu}""31")

  Shokuji=$(nameread      "SELECTShokuji"   $namedata)
  Shokushu=$(nameread     "SELECTShokushu"   $namedata)
  Taishousha=$(nameread   "SELECTTaishousha"   $namedata)
  Menu=$(nameread     "SELECTMenu"   $namedata)

# 現在の居室を取得
awk '$1=="'${Shisetsu}'"&&$2=="'${Tateya}'"&&$(NF-2)!="9"{print $0}' /DATA/E-LIFE/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
# 対象日よりﾀｲｷｮ日が後で2行以上あったら
awk '$7<="'${TaishouNengetsuTo}'"&&$8>="'${TaishouNengetsuFrom}'"{print $6,$0}' |
LANG=C sort -k1,1 -k8,9                 |
rank ref=1                 |
awk '$1=="1"'              |
self 8 7                   > $tmp-riyousha_kyoshitsu
# 1:利用者ID 2: 居室No

#------------------------------------------------------------
# データの絞込み
#----------------------
## 20140908変更
# 消費税率を取得
cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/ZEIRITSU  |
# 1:ID 2:税率 3:適用開始日 4:適用終了日 5:削除フラグ 6:更新日時 7:userid
awk '$3<="'${TaishouNengetsuFrom}'"&&$4>="'${TaishouNengetsuFrom}'"{print $0}'   |
self 2                                               > ${tmp}-zeiritsu
zeiritsu=$(cat ${tmp}-zeiritsu | awk '{print $1+"1"}')
###

#---------------------------------------
#ケータリング関連のデータ取込
#---------------------------------------
# スケジュールデータ
echo "_" "_" "_" "_" "_" "_" > $tmp-schedule_shousai
if [ -e ${schedule_dir}/SCHEDULE_SHOUSAI ] ; then
# 1:スケジュールID 2:開始時間 3:終了時間 4:場所 5:担当者
# 6:追記
   awk '$(NF-2)!="9"&&$1=="'${Shisetsu}'"{print $2,$6,$7,$9,$11,$13}' ${schedule_dir}/SCHEDULE_SHOUSAI |
   LANG=C sort -k1,1 > $tmp-schedule_shousai
fi

cp $tmp-schedule_shousai $work_dir/schedule_shousai

# ケータリング・ルームサービス
echo "_" "_" > $tmp-schedule_catering_order
if [ -e ${schedule_pompa_dir}/SCHEDULE_CATERING_ORDER ] ; then
   awk '$(NF-2)!="9"&&$1=="'${Shisetsu}'"{print $9,$2,$13}' ${schedule_pompa_dir}/SCHEDULE_CATERING_ORDER > $tmp-schedule_catering_order_work1
   #２つめの食事実績ＩＤがセットされている場合はそちらも 
   awk '$(NF-2)!="9"&&$1=="'${Shisetsu}'"&&$10!="_"{print $10,$2,$13}' ${schedule_pompa_dir}/SCHEDULE_CATERING_ORDER > $tmp-schedule_catering_order_work2
   cat $tmp-schedule_catering_order_work1 $tmp-schedule_catering_order_work2 |
# 1:食事実績ID 2:スケジュールID 3:ケータリング・ルームサービスフラグ
   LANG=C sort -k1,1 > $tmp-schedule_catering_order
fi

cp $tmp-schedule_catering_order $work_dir/schedule_catering_order

# 部屋予約データ
echo "_" "_" > $tmp-schedule_reservation
if [ -e ${schedule_pompa_dir}/SCHEDULE_RESERVATION ] ; then
   awk '$(NF-2)!="9"&&$1=="'${Shisetsu}'"{print $2,$3}' ${schedule_pompa_dir}/SCHEDULE_RESERVATION |
# 1:スケジュールID 2:部屋ID
   LANG=C sort -k1,1 > $tmp-schedule_reservation
fi

cp $tmp-schedule_reservation $work_dir/schedule_reservation

# サービス登録連携データ
echo "_" "_" > $tmp-cr_service_renkei 
if [ -e ${schedule_pompa_dir}/CATERING/${Shisetsu}/CR_SERVICE_RENKEI ] ; then
   awk '$(NF-2)!="9"{print $1,$4}' ${schedule_pompa_dir}/CATERING/${Shisetsu}/CR_SERVICE_RENKEI |
# 1:スケジュールID 2:ゲスト人数
   LANG=C sort -k1,1 > $tmp-cr_service_renkei
fi

cp  $tmp-cr_service_renkei $work_dir/cr_service_renkei

# 上記データを連結しておく
cat $tmp-schedule_catering_order |
# 1:食事実績ID 2:スケジュールID 3:ケータリング・ルームサービスフラグ
LANG=C sort -k2,2 |
join1 key=2 $tmp-schedule_shousai |
# 1:食事実績ID 2:スケジュールID 3:開始時間                           4:終了時間 5:場所
# 6:担当者     7:追記           8:ケータリング・ルームサービスフラグ
join2 +"_" key=2 $tmp-schedule_reservation |
# 1:食事実績ID 2:スケジュールID 3:部屋ID 4:開始時間                           5:終了時間
# 6:場所       7:担当者         8:追記   9:ケータリング・ルームサービスフラグ
join1 key=2 $tmp-cr_service_renkei |
# 1:食事実績ID 2:スケジュールID 3:ゲスト人数 4:部屋ID 5:開始時間
# 6:終了時間   7:場所           8:担当者     9:追記   10:ケータリング・ルームサービスフラグ
self 1 2 10 5 6 7 8 4 3 9 |
LANG=C sort -k1,2 > $tmp-catering_roomservice_info

cat ${pompa_dir}/${Shisetsu}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI |
# 1:利用者ID    2:施設ID                 3:建屋       4:居室           5:入居者ゲストフラグ
# 6:日付        7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニューID 10:食事メニュー名称
# 11:食事種類ID 12:単価(税抜き)          13:数量      14:色ID          15:税込み
# 16:予備項目2  17:予備項目3             18:予備項目4 19:予備項目5

awk '$1=="'${RIYOUSHAID}'"&&$(NF-2)!="9"{print $0}'    |
awk '{print $0,$10}' |
#awk '{if($5=="2"){print $0,"★ゲスト"$10}else{print $0,$10}}'  |
self 6/9 NF 14 15 13 5 12 |
# 1:日付 2:食事（朝昼夜おやつ他） 3:食事ID 4:食事メニューID     5:予備項目5
# 6:色ID 7:税込み                 8:数量   9:入居者ゲストフラグ 10:単価(税抜き)
# 0908以前のデータで税込価格が入力されていないものは計算する
awk '{print $0,$7!="_"?$7:$NF*"'${zeiritsu}'"}'       |
marume -sage 11.0                                     |
self 1/6 NF 8/NF-2                                    > $tmp-shokuji_jisseki_jyunbi_jyunbi

# 欠食情報の取得
awk '$1=="'${RIYOUSHAID}'"&&$(NF-2)!="9"{print $0}' ${seikyuu_dir}/${Shisetsu}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_KESSHOKU > $tmp-kesshoku
# 1:利用者(入居者)ID 2:施設ID     3:建屋 4:居室 5:欠食年月日
# 6:欠食食事         7:入院外泊ID

if [ -s $tmp-kesshoku ] ; then
  cat $tmp-kesshoku |
  awk '{print $5,$6,"00000","000","<b>欠食</b>","002","0","1","1"}' |
# 1:日付 2:食事(朝昼夜おやつ他） 3:食事ID 4:食事メニューid 5:メニュー名
# 6:色   7:単価(税抜き)          8:数量   9:入居者ゲストフラグ
  LANG=C sort -k1,4  > $tmp-kesshoku_data
  
  # 欠食のデータと欠食なしの人データを足す
  if [ -s $tmp-shokuji_jisseki_jyunbi_jyunbi ] ; then
    cat $tmp-shokuji_jisseki_jyunbi_jyunbi $tmp-kesshoku_data > $tmp-shokuji_jisseki_jyunbi
  else
    cat $tmp-kesshoku_data >$tmp-shokuji_jisseki_jyunbi
  fi

else
  cat $tmp-shokuji_jisseki_jyunbi_jyunbi > $tmp-shokuji_jisseki_jyunbi

fi

mdate ${TaishouNengetsu}m |
tarr                      > $tmp-taishou_nengetsu

cp $tmp-catering_roomservice_info $work_dir/catering_roomservice_info

cp $tmp-shokuji_jisseki_jyunbi $work_dir/shokuji_jisseki_jyunbi

self 3 0 $tmp-shokuji_jisseki_jyunbi |
LANG=C sort -k1,1 |
join1 key=1 $tmp-catering_roomservice_info |
self 11/NF 2/10 |
LANG=C sort -k1,1 > $tmp-shokuji_jisseki_jyunbi_catering

if [ -s $tmp-shokuji_jisseki_jyunbi_catering ] ; then
  cat $tmp-shokuji_jisseki_jyunbi_catering |
# 1:日付                                2:食事(朝昼夜おやつ他） 3:食事ID            4:食事メニューid     5:メニュー名
# 6:色                                  7:単価(税抜き)          8:数量              9:入居者ゲストフラグ 10:スケジュールID
# 11:ケータリング・ルームサービスフラグ 12:サービス開始時間     13:サービス終了時間 14:場所              15:担当者
# 16:部屋予約                           17:ゲスト人数           18:備考
  LANG=C sort -k6,6                    |
  join2 key=6 ${tbl_dir}/CONFIG/COLOR_TABLE -  |
  delf 6 8                             |
  LANG=C sort -k1,1                    |
  loopj num=1 - $tmp-taishou_nengetsu  |
  awk '{print $0}' > $tmp-shokuji_jisseki
# データがなかった場合
else
  cat $tmp-taishou_nengetsu |
  awk '{print $1,"_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_"}'  > $tmp-shokuji_jisseki
fi

if [ -s $tmp-shokuji_jisseki ] ; then
  cat $tmp-shokuji_jisseki
fi
# 1:日付            2:食事(朝昼夜おやつ他）               3:食事ID            4:食事メニューid     5:メニュー名
# 6:色              7:単価(税抜き)                        8:数量              9:入居者ゲストフラグ 10:食種
# 11:スケジュールID 12:ケータリング・ルームサービスフラグ 13:サービス開始時間 14:サービス終了時間  15:場所
# 16:担当者         17:部屋予約                           18:ゲスト人数       19:備考

## 終了
rm -f $tmp-*
exit 0
