#!/bin/bash
#
# KONDATE_TOUROKU.TOUROKU :
#
# Usage : KONDATE_TOUROKU.TOUROKU
#
# Written by aoyagi


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/SHOKUJI/CGI/KONDATE.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $lock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1
cp $namedata ${work}/namefile

# デフォルト値セット

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

# データ作成
# 処理する日付
cgi_date=$(echo $date | dayslash -r yyyy-mm-dd 1)
[ $(mdate -y ${cgi_date}) = 7 ] && cgi_date=$(mdate ${cgi_date}/+1)
sch_week=$(mdate -w ${cgi_date})
mdate ${sch_week} |
self 1/6          |
tarr              > $tmp-kari_seven

monday=$(awk 'NR==1' $tmp-kari_seven)
sunday=$(mdate ${monday}/-1)
echo ${sunday} |
cat - $tmp-kari_seven > $tmp-taisho_days
# 1:日付

for taisho_day in $(yarr $tmp-taisho_days);do

  # 初期化
  MAIN_A=""
  SUB1_A=""
  SUB2_A=""
  SUB3_A=""
  SUB4_A=""
  SUB5_A=""
  CAL_A=""
  SAL_A=""
  TANPAKU_A=""
  ABURA_A=""
  S_MENU_A=""
  HACHU_A=""
  TYORI_A=""
  KENSHOKU_A=""
  DAIGAE_A=""

  MAIN_B=""
  SUB1_B=""
  SUB2_B=""
  SUB3_B=""
  SUB4_B=""
  SUB5_B=""
  CAL_B=""
  SAL_B=""
  TANPAKU_B=""
  ABURA_B=""
  S_MENU_B=""
  HACHU_B=""
  TYORI_B=""
  KENSHOKU_B=""
  DAIGAE_B=""

  awk '$1~/'$taisho_day'/' $namedata |
  awk '{gsub(/'${taisho_day}'/,"",$1);print}' > $tmp-newname
  eval $(name-source $tmp-newname)

  # Aの話
  echo "$taisho_day A $kondate_shurui $MAIN_A $SUB1_A $SUB2_A $SUB3_A $SUB4_A $SUB5_A $CAL_A $SAL_A $TANPAKU_A $ABURA_A $S_MENU_A $HACHU_A $TYORI_A $KENSHOKU_A $DAIGAE_A _ _ _ _ _ 1 $sdaytime $userid" > $tmp-kari_A
  # 1:日付    2:AorB      3:食事種類 4:メイン      5:サブ1
  # 6:サブ2   7:サブ3     8:サブ4    9:サブ5       10:カロリ
  # 11:塩分   12:タンパク 13:脂質    14:食事メニュ 15:発注数
  # 16:調理数 17:検食数   18:代替品  19:予備       20:予備
  # 21:予備   22:予備     23:予備    24:有効フラグ 25:更新日時
  # 26:USERID

  # Bの話
  echo "$taisho_day B $kondate_shurui $MAIN_B $SUB1_B $SUB2_B $SUB3_B $SUB4_B $SUB5_B $CAL_B $SAL_B $TANPAKU_B $ABURA_B $S_MENU_B $HACHU_B $TYORI_B $KENSHOKU_B $DAIGAE_B _ _ _ _ _ 1 $sdaytime $userid" > $tmp-kari_B
  # 1:日付    2:AorB      3:食事種類 4:メイン      5:サブ1
  # 6:サブ2   7:サブ3     8:サブ4    9:サブ5       10:カロリ
  # 11:塩分   12:タンパク 13:脂質    14:食事メニュ 15:発注数
  # 16:調理数 17:検食数   18:代替品  19:予備       20:予備
  # 21:予備   22:予備     23:予備    24:有効フラグ 25:更新日時
  # 26:USERID

  [ $(gyo $tmp-kari_A) -ne 0 -a $(retu $tmp-kari_A) -eq 26 ] && cat $tmp-kari_A
  [ $(gyo $tmp-kari_B) -ne 0 -a $(retu $tmp-kari_B) -eq 26 ] && cat $tmp-kari_B

done |
# 1:日付    2:AorB      3:食事種類 4:メイン      5:サブ1
# 6:サブ2   7:サブ3     8:サブ4    9:サブ5       10:カロリ
# 11:塩分   12:タンパク 13:脂質    14:食事メニュ 15:発注数
# 16:調理数 17:検食数   18:代替品  19:予備       20:予備
# 21:予備   22:予備     23:予備    24:有効フラグ 25:更新日時
# 26:USERID
LANG=C sort -k1,3           > $tmp-koushin_input

FILEMEI=$(awk 'NR==1' $tmp-taisho_days)
#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
KONDATE_TOUROKU KONDATE_TOUROKU
FIN

input_detail_dir=KONDATE_TOUROKU/${shisetsu}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
koushin KONDATE_TOUROKU_${FILEMEI} 3 25 26 ${pompa_dir}/KONDATE_TOUROKU/${shisetsu} ${input_dir}
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 3 -l 10 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_exit "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat /home/hands/E-LIFE/SHOKUJI/POMPA/KONDATE_TOUROKU/${shisetsu}/KONDATE_TOUROKU_${FILEMEI}    |
awk '{if($3=="'${kondate_shurui}'"){$(NF-2)=9};print}'            |
cat - $tmp-koushin_input                                                            |
tee ${work}/koushin_pompa |
LANG=C sort -k25,25 -k1,3                                                           |
getlast 1 2                                                                         > $tmp-pompa_new
#--------------------------------------------------------------
# 列数チェック
[ $(retu $tmp-pompa_new) -ne 26 ] && : > $tmp-err
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-pompa_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
