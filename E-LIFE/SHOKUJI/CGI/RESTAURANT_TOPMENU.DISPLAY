#!/bin/bash
#
# RESTAURANT_TOPMENU.DISPLAY : レストラントップメニュー表示
#
# Usage : RESTAURANT_TOPMENU.DISPLAY
#
# Written by R.Ssuzuki Date:2015/08/10
#
# 補足：以下「大型ボタン」と表現してるのは献立メニュー名表示対象メニューのこと（青・黄のボタン）


# ログ
source /home/hands/E-LIFE/SHOKUJI/CGI/SHOKUJI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv

rm -f ${tmp}-*


# ディレクトリ設定
#test_tbl_dir="${home_dir}/TEST/TBL"
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

# 変数の定義
namedata=$1
#checkfile=$2
#result_data=$3
#koushin_data=$4

#20150803del
#target_day="$(date +%Y%m%d)"
#target_month="$(date +%Y%m)"

current_time="$(date +%H%M)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

#20150803add
target_month="$(echo $target_day | cut -c-6 )"

[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------


#入居者コードを中間ファイルにセット

echo ${nyukyosha_id} | awk '{print $1}'  > ${tmp}-user


##################################
# 入居者情報の取得
##################################

#入居者レコード有効判定(削除フラグ、有効期間)
# 取得対象を対象施設内の入居者情報に限定（複数施設所属のケースを考慮） 20150907
awk '$1=="'$shisetsu'" && $6=="'${nyukyosha_id}'" && $7<="'$target_day'" && "'$target_day'"<=$8 && $(NF-2)!="9"' \
 ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS       |
self 6 1 5 7 8 9                                          |
#1:入居者ID,2:施設ID,3:居室,4:入居日,5:退去日,6:削除フラグ
#LANG=C sort -k1,1
#この段階ではまれに複数レコード（複数部屋契約）の可能性あり、入居日付でソート
LANG=C sort -k4,5                                         |
#入居者の最新入居情報のみ抽出　20150907
getlast 1 1         > $tmp-restaurant_chk_user


#cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER             |
awk '$(NF-2)!="9"'  ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER  |
#対象ID絞込み ※利用者マスタは利用者IDでソート済みの前提
join1 key=1 - ${tmp}-restaurant_chk_user                       |
#マスタの氏名以外の情報は削除
delf 3/7                                      > ${tmp}-restaurant_ok_user
#1:入居者ID,2:利用者(入居者)氏名,3:施設ID,4:居室,5:入居日,6:退去日,7:削除フラグ

#エラーチェック
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="入居者情報取得エラー"

#入居者名前
nyukyosha_name=$(cat ${tmp}-restaurant_ok_user | awk '{print $2}')
#部屋番号
room_no=$(cat ${tmp}-restaurant_ok_user | awk '{print $4}')
#施設IDセット
#20150907 複数施設対応に伴い、クッキーからの取得(ここではＰＯＳＴから取得)に変更
#shisetsu=$(cat ${tmp}-restaurant_ok_user | awk '{print $3}')

#施設名称取得 20150907
shisetsu_name=$(awk '$1=="'$shisetsu'" && $(NF-2)!="9" {print $2}' ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON)


#上位階層のＣＧＩで実施してるのでコメントアウト
#if [ $(gyo ${tmp}-restaurant_ok_user) -lt 1 ]; then
#  message="お客様はご利用対象外です。"
#fi

##################################
# 食事メニューの取得
##################################


#20150803del
##食事時間帯（朝：昼：夕）の確認
#if [ $current_time -gt "1644" ] ; then
#  # 1645以降以は夕食メニュー
#  target_shokuji_jikantai=3
#  shokuji_title="夕"
#elif [ $current_time -gt "1044" ] ; then
#  # 1045以降以は昼食メニュー
#  target_shokuji_jikantai=2
#  shokuji_title="昼"
#elif [ $current_time -gt "0614" ] ; then
#  # 0615以降以は朝食メニュー
#  target_shokuji_jikantai=1
#  shokuji_title="朝"
#else
#  # 0614以前は夕食メニューのまま 
#  target_shokuji_jikantai=3
#  shokuji_title="夕"
#fi

#20150803add
if [ $target_shokuji_jikantai   = "3" ] ; then
  shokuji_title="夕"
elif [ $target_shokuji_jikantai = "2" ] ; then
  shokuji_title="昼"
elif [ $target_shokuji_jikantai = "1" ] ; then
  shokuji_title="朝"
fi



#メニュー表示制御マスタが存在しない場合への対処（ジョインエラー回避）
:> $tmp-restaurant_menu
if [ -s ${home_dir}/SHOKUJI/POMPA/${shisetsu}/SHOKUJI_RESTAURANT_MENU ] ; then
  self 1 2 ${home_dir}/SHOKUJI/POMPA/${shisetsu}/SHOKUJI_RESTAURANT_MENU |
  # 1:メニューID 2:レストラン非表示フラグ
  LANG=C sort -k1,1 > $tmp-restaurant_menu
fi

[ $(gyo $tmp-restaurant_menu) -eq 0 ] && echo "_" "_" > $tmp-restaurant_menu

# レストランメニュー
LANG=C sort -k1,1 ${home_dir}/SHOKUJI/POMPA/${shisetsu}/SHOKUJI_MENU |
# レストラン非表示の処理
join2 +"_" key=1 $tmp-restaurant_menu -  |
awk '$2!="1"' |
# レストラン非表示フラグ削除
delf 2        |
awk '$(NF-2)!="9" && $14<="'$target_day'" && "'$target_day'"<=$15 {print $1, $2, $3,$10,$11,$12,$17=="_"?"999999":$17}' |
# 1:メニューID 2:メニュー名 3:食事種類 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
# 7:表示順(スペースは999999に変換済み)
# 食事時間帯による表示メニュー判定
if [ $target_shokuji_jikantai -eq 1 ] ; then
awk '$4=="1"' 
elif [ $target_shokuji_jikantai -eq 2 ] ; then
awk '$5=="1"' 
else
awk '$6=="1"' 
fi    >  ${tmp}-restaurant_menu_data
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="レストラン表示メニュー取得エラー"

#############################################
# 注文カートから選択中のメニュー数量を取得
#############################################
#

if [ -s ${ap_dir}/SESSION/resutaurant-cart.$nyukyosha_id.$user_type ] ; then

  self 3 4 5 6 1  ${ap_dir}/SESSION/resutaurant-cart.$nyukyosha_id.$user_type |
  # 1:メニューID  2:入居者数量 3:ゲスト数量 4:予約フラグ(スケジュールID) 5:カート明細ID 
  LANG=C sort -k1,1 |
  join2 +"0" key=1 - ${tmp}-restaurant_menu_data  |
  self 1 6/NF 2/5    |
  # joinで結合できないものはゼロ埋めしてるため、予約フラグ(スケジュールID)、カート明細IDはここでゼロをアンスコに変換
  awk '{if($10=="0"){$10="_"};if($11=="0"){$11="_"};print $0;}' >  ${tmp}-restaurant_menu_data_addnum
  # 1:メニューID 2:メニュー名 3:食事種類 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み) 8:入居者数量 9:ゲスト数量 10:予約フラグ(スケジュールID) 11:カート明細ID
  # ※補足：「予約フラグ」はこの時点ではジョインするレコードがなければ_ではなく0がセットされてる
  #   　　　以降では使用箇所がないので2015.7.29時点では影響ないのでそのまま。使う要件が出た場合は要注意

  #予約済みメニュー以外(メニュー数量表示対象)を取得
  awk '$10=="_"' ${tmp}-restaurant_menu_data_addnum > ${tmp}-restaurant_menu_display 


  #予約済みメニューの件数取得
  chk_yoyaku=$(awk '$10!="_"' ${tmp}-restaurant_menu_data_addnum  | gyo)

  #エラーチェック
  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="選択中メニュー数量取得エラー"

  #予約済みメニュー以外(メニュー数量表示対象)がなかった場合、全メニューの数量にゼロをセット
  if [ ! -s ${tmp}-restaurant_menu_display ] ; then
    awk '{print $0 ,"0","0","_","_"}'  ${tmp}-restaurant_menu_data > ${tmp}-restaurant_menu_display    
  fi

else

  #注文カートが空の場合、全メニューの数量にゼロをセット
  awk '{print $0 ,"0","0","_","_"}'  ${tmp}-restaurant_menu_data  > ${tmp}-restaurant_menu_display
fi



#############################################
# 食事メニューと献立情報のジョイン
#############################################

#週初日曜日の取得（献立テーブル特定のため） ※対象日の曜日が日曜日ならそのままセット。それ以外はmdateで前週の日付一覧を取得し7番目の日を取得
#mdateの仕様上、日曜日は７番目に登場する
#week_first_day=$([ "$(date +'%w')" = "0" ] && echo "$target_day" || mdate week1 | self 7)
week_first_day=$([ "$(date -d $target_day +'%w')" = "0" ] && echo "$target_day" ||mdate $(mdate $(mdate -w $target_day)/-1 ) |self 7)


#該当週の献立ファイルがある場合
if [ -s ${pompa_dir}/KONDATE_TOUROKU/${shisetsu}/KONDATE_TOUROKU_${week_first_day} ] ; then
  #取得する献立情報の絞込み（今日の該当食事時間帯分　※メインが空なら無視）
  awk '$1=="'${target_day}'" && $3=="'${target_shokuji_jikantai}'" && $4!="_" && $(NF-2)!=9{print $14,$0}' \
  ${pompa_dir}/KONDATE_TOUROKU/${shisetsu}/KONDATE_TOUROKU_${week_first_day}                    | 
  #ジョイン準備(メニューIDでソート)
  self 1/14 |LANG=C sort -k1,1 | 
  # 1:食事メニュID 2:日付 3:A or B 4:食事種類 5:メイン 6:サブ１ 7:サブ２ 8:サブ３ 9:サブ４ 
  # 10:サブ５ 11:カロリ 12:塩分 13:タンパ>ク 14:脂質
  #食事メニューとジョイン（大型ボタン用メニュー、小型ボタン用メニューに分割）
  #　献立に登録されてるものは大型ボタン、登録されてないものは小型ボタンで表示
  join1 +ng key=1 - ${tmp}-restaurant_menu_display  1> ${tmp}-restaurant_menu_display_l 2> ${tmp}-restaurant_menu_display_s

  #エラーチェック
  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="献立情報取得取得エラー"

  #############################################
  #大型ボタン用メニューの編集
  #############################################i
# 廃止コメント
#  # 1:食事メニュID 2:メニュー名 3:食事種類 4:朝食フラグ 5:昼食フラグ
#  # 6:夕食フラグ 7:表示順(スペースは999999に変換済み) 8:日付 9:A or B 10:食事種類 2:メニュー名 3
#  # 11:メイン 12:サブ１ 13:サブ２ 14:サブ３ 15:サブ４ 16:サブ５ 17:カロリ 18:塩分
#  # 19:タンパ>ク 20:脂質

  # 1:食事メニュID 2:日付 3:A or B 4:食事種類 5:メイン 6:サブ１ 7:サブ２ 8:サブ３ 9:サブ４ 10:サブ５ 
  # 11:カロリ 12:塩分 13:タンパ>ク 14:脂質 15:メニュー名 16:食事種類 17:朝食フラグ 18:昼食フラグ
  # 19:夕食フラグ 20:表示順(スペースは999999に変換済み) 21:入居者数量 22:ゲスト数量 
  # 23:予約フラグ(スケジュールID) 24:カート明細ID

  self 1 3 5/14 21 22 23 24  ${tmp}-restaurant_menu_display_l |
  # 1:食事メニュID 2:A or B 3:メイン 4:サブ１ 5:サブ２ 6:サブ３ 7:サブ４
  # 8:サブ５ 9:カロリ 10:塩分 11:タンパ>ク 12:脂質 13:入居者数量 14:ゲスト数量 15:予約フラグ(スケジュールID
  # 16:カート明細ID
  #セット区分ABでソート
#20150810 ソートキーは文字のためnつけたら駄目
#  LANG=C sort -k2n,2n              |
  LANG=C sort -k2,2              |
  #メニュー名を全角変換
#  zen 3/8       |  sed -e 's/[＿_]/　/g'  > ${tmp}-restaurant_menu_display_l_zen
  zen 3/8       |  sed -e 's/[＿]/　/g'  > ${tmp}-restaurant_menu_display_l_zen
  #エラーチェック
  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="大型ボタン用メニューデータ編集エラー"

else

  :> ${tmp}-restaurant_menu_display_l_zen

  #献立がない場合はそのまま出力
  cat ${tmp}-restaurant_menu_display  > ${tmp}-restaurant_menu_display_s
  # 1:メニューID 2:メニュー名 3:食事種類 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み) 8:入居者数量 9:ゲスト数量 10:予約フラグ(スケジュールID) 
  # 11:カート明細ID


fi



#############################################
#小型ボタン用メニューをカテゴリ単位に分割
#############################################


#if [ "$MODE" != "drink" ] ; then

  # 1:メニューID 2:メニュー名 3:食事種類 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み)

#  #ドリンク除く
#  awk '$3!="03"' ${tmp}-restaurant_menu_display_s    |
#  self 3 1 2 4/7                   |

  self 3 1 2 4/NF   ${tmp}-restaurant_menu_display_s   |
  # 1:食事種類 2:メニューID 3:メニュー名 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み) 8:入居者数量 9:ゲスト数量 10:予約フラグ(スケジュールID)
  # 11:カート明細ID
  #食事種類、表示順でソート
  LANG=C sort -k1n,1n -k7n,7n      |
  #メニュー名を全角変換
  zen 3                            | keycut ${tmp}-restaurant_menu_display_s_list.%1

  #エラーチェック
  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="小型ボタン用メニューデータ編集エラー"

  #該当データがないときにファイルが作成されなくなるのを回避(トップメニュー)
  touch ${tmp}-restaurant_menu_display_s_list.01
  touch ${tmp}-restaurant_menu_display_s_list.02
  touch ${tmp}-restaurant_menu_display_s_list.04
  touch ${tmp}-restaurant_menu_display_s_list.03
  touch ${tmp}-restaurant_menu_display_s_list_drink.btn_drink_soft
  touch ${tmp}-restaurant_menu_display_s_list_drink.btn_drink_alc

  nomenu_main="block"
  #小型メニューがある場合
  if [ -s ${tmp}-restaurant_menu_display_s_list.01  ] ; then
      nomenu_main="none"
  #小型メニューはないけど、大型メニューがある場合
  elif [ $(gyo ${tmp}-restaurant_menu_display_l_zen) -gt 0 ] ; then
      nomenu_main="none"
  fi


  nomenu_side="block"
  if [ -s ${tmp}-restaurant_menu_display_s_list.02  ] ; then
    nomenu_side="none"
  fi
  nomenu_hoka="block"
  if [ -s ${tmp}-restaurant_menu_display_s_list.04  ] ; then
    nomenu_hoka="none"
  fi

#else
##ドリンクメニューの処理

  #ドリンクタイプマスタが存在しない場合への対処（ジョインエラー回避）
  :> $tmp-restaurant_drink_type
  if [ -s ${pompa_dir}/${shisetsu}/SHOKUJI_DRINKTYPE ] ; then
    LANG=C sort -k1,1  ${pompa_dir}/${shisetsu}/SHOKUJI_DRINKTYPE  > $tmp-restaurant_drink_type
    # 1:メニューID 2:ドリンクタイプ 3: 削除フラグ 4:日時 5:ユーザー
  fi
  [ $(gyo $tmp-restaurant_drink_type) -eq 0 ] && echo "DUMMY" "_" "_" "_" "_"> $tmp-restaurant_drink_type

  # 1:メニューID 2:メニュー名 3:食事種類 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み)
  #ドリンクのみ
#  awk '$3=="03"'  ${tmp}-restaurant_menu_display_s  |
#  self 3 1 2 4/7                   |
  # 1:食事種類 2:メニューID 3:メニュー名 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み)

  cat ${tmp}-restaurant_menu_display_s_list.03 |
  # 1:食事種類 2:メニューID 3:メニュー名 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み) 8:入居者数量 9:ゲスト数量 10:予約フラグ(スケジュールID) 
  # 11:カート明細ID


  #食事種類,メニューIDでソート
  LANG=C sort -k1,2                |
  #表示するドリンク種類を絞るため、レストラン用ドリンクタイプテーブルと結合
  join2 key=2  $tmp-restaurant_drink_type - |
  # 1:食事種類 2:メニューID 3:ドリンクタイプ 4: 削除フラグ 5:日時 6:ユーザー
  # 7:メニュー名 8:朝食フラグ 9:昼食フラグ 10:夕食フラグ
  # 11:表示順(スペースは999999に変換済み) 12:入居者数量 13:ゲスト数量 14:予約フラグ(スケジュールID) 
  # 15:カート明細ID

#  if [ "$drink_type" = "soft" ] ; then
#    #ジョインできて１のもの、またはジョインできないものはソフトドリンク
#    awk '$3=="1" || $3=="_" {print $0,"btn_drink_soft"}'
#  else
#    awk '$3!="1" && $3!="_"  {print $0,"btn_drink_alc"}'
#  fi|

  #ドリンクも一緒にTOPに表示する
  #ドリンクタイプが２ならアルコール、１のものまたはジョインできないものはソフトドリンク
  awk '{print $0,$3=="2"?"btn_drink_alc":"btn_drink_soft"}' |

  #レストラン用ドリンクタイプテーブルの項目削除
  delf 3/6                         |
  # 1:食事種類 2:メニューID 3:メニュー名 4:朝食フラグ 5:昼食フラグ 6:夕食フラグ
  # 7:表示順(スペースは999999に変換済み), 8:入居者数量 9:ゲスト数量 10:予約フラグ(スケジュールID
  #  11:カート明細ID 12:ボタンカラー書式用クラス名

#  #食事種類、表示順でソート
#  LANG=C sort -k1n,1n -k7n,7n      |
#  #メニュー名を全角変換
#  zen 3                            > ${tmp}-restaurant_menu_display_s_list_drink

  #食事種類,ボタンカラー書式用クラス名(ソフト/アルコール区分),表示順でソート
  LANG=C sort -k1n,1n -k12,12  -k7n,7n       |

  #ドリンクタイプでファイル分割（※ドリンクタイプの値はアンダースコアの場合もあるので、ボタンカラー書式用クラス名で分類）
  keycut ${tmp}-restaurant_menu_display_s_list_drink.%12

  #エラーチェック

  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="小型ボタン(ドリンク)用メニューデータ編集エラー"


  nomenu_drink_soft="block"
  if [ -s ${tmp}-restaurant_menu_display_s_list_drink.btn_drink_soft  ] ; then
    nomenu_drink_soft="none"
  fi

  nomenu_drink_alc="block"
  if [ -s ${tmp}-restaurant_menu_display_s_list_drink.btn_drink_alc  ] ; then
    nomenu_drink_alc="none"
  fi

#fi

#はめ込み文字データまとめファイル作成
echo "###NYUKYOSHA_NAME###" $nyukyosha_name    >  ${tmp}-calsed_result
echo "###NYUKYOSHA_ID###"   $nyukyosha_id      >> ${tmp}-calsed_result
echo "###ROOM_NO###"        $room_no           >> ${tmp}-calsed_result
echo "###SHISETSU_ID###"    $shisetsu          >> ${tmp}-calsed_result
echo "###SHISETSU_NAME###"  $shisetsu_name     >>  $tmp-calsed_result
echo "###SHOKUJI_TITLE###"  $shokuji_title     >> ${tmp}-calsed_result
echo "###MSGNOMENU_MAIN###" $nomenu_main       >> ${tmp}-calsed_result
echo "###MSGNOMENU_SIDE###" $nomenu_side       >> ${tmp}-calsed_result
echo "###MSGNOMENU_DRINK_SOFT###" $nomenu_drink_soft >> ${tmp}-calsed_result
echo "###MSGNOMENU_DRINK_ALC###"  $nomenu_drink_alc  >> ${tmp}-calsed_result
echo "###MSGNOMENU_HOKA###" $nomenu_hoka       >> ${tmp}-calsed_result
echo "###MODE###"           $MODE              >> ${tmp}-calsed_result
echo "###CHUMON_NO###"     ${chumon_no}        >> ${tmp}-calsed_result
echo "###CHUMON_RECIEVE_TIME###" $receive_time >> ${tmp}-calsed_result
echo "###CHECK_YOYAKU###"     $chk_yoyaku   >> ${tmp}-calsed_result


#20150803 add
echo "###TARGET_DAY###"     $target_day   >> ${tmp}-calsed_result
echo "###TARGET_SHOKUJI_JIKANTAI###"     $target_shokuji_jikantai   >> ${tmp}-calsed_result


#大型ボタンメニューのエリア表示判定（献立がないときに大型ボタンメニュー分の空白ができてしまうのを解消）
if [ $(gyo ${tmp}-restaurant_menu_display_l_zen) -gt 0 ] ; then
  echo "###KONDATE_SHOW###"          "1"       >> ${tmp}-calsed_result
else
  echo "###KONDATE_SHOW###"          ""       >> ${tmp}-calsed_result
fi

#ユーザ種別（エンドユーザor管理ユーザ）:画面遷移を制御する
#TOPメニューまたは予約確認画面、から開始した場合はエンドユーザとする。
#注文一覧から開始した場合は管理ユーザとする。
#それ以外はPOSTされるuser_typeの内容で判定
if [ "$user_type" = "" ] ; then
  echo "###USER_TYPE###"   "enduser"    >> ${tmp}-calsed_result
else
  echo "###USER_TYPE###"   $user_type   >> ${tmp}-calsed_result
fi


#if [ "$MODE" = "drink" ] ; then
#
#  if [ "$drink_type" = "soft" ] ; then
#    echo "###DRINK_SHURUI###"   "ソフトドリンク"   >> ${tmp}-calsed_result
#  else
#    echo "###DRINK_SHURUI###"   "アルコール飲料"   >> ${tmp}-calsed_result
#  fi
#
#  #ドリンクメニューHTMLはめ込み
#  mojihame -l###SMALLMENU_DRINK###  ${html_dir}/RESTAURANT_DRINKMENU.html  ${tmp}-restaurant_menu_display_s_list_drink  |
#  #はめ込みまとめデータのはめ込み
#  calsed -f ${tmp}-calsed_result -  > ${tmp}-html
#
#  #エラーチェック
#  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="ドリンクメニュー表示データはめ込みエラー"
#
#else

#20150810
#  if [ $(gyo ${tmp}-restaurant_menu_display_l_zen) = 1 ] ; then
#    #大型ボタンの対象が１件のみの場合(ボタンが一つなので中央表示する)
#    echo "###LARGE_ONLY1_LI###"       "width:100%;"                  >> ${tmp}-calsed_result
#    echo "###LARGE_ONLY1_BUTTON###"   "width:60%;margin-left:15%;"   >> ${tmp}-calsed_result
#  else
#    #大型ボタンの対象が2件の場合
#    echo "###LARGE_ONLY1_LI###"       ""                  >> ${tmp}-calsed_result
#    echo "###LARGE_ONLY1_BUTTON###"   ""                  >> ${tmp}-calsed_result
#  fi
    echo "###LARGE_ONLY1_LI###"       ""                  >> ${tmp}-calsed_result
    echo "###LARGE_ONLY1_BUTTON###"   ""                  >> ${tmp}-calsed_result

  #メインの食事メニューHTMLはめ込み
  mojihame -l###LARGEMENU###  ${html_dir}/RESTAURANT_TOPMENU.html  ${tmp}-restaurant_menu_display_l_zen  |

  #メインの食事メニューHTMLはめ込み
  mojihame -l###SMALLMENU_MAIN### -  ${tmp}-restaurant_menu_display_s_list.01                            |
  #サイドの食事メニューHTMLはめ込み
  mojihame -l###SMALLMENU_SIDE### -  ${tmp}-restaurant_menu_display_s_list.02                            |
  #ドリンクの食事メニューHTMLはめ込み
  #mojihame -l###SMALLMENU_DRINK### ${html_dir}/RESTAURANT_TOPMENU.html ${tmp}-restaurant_menu_display_s_list.03

  #ソフトドリンクの食事メニューHTMLはめ込み
  mojihame -l###SMALLMENU_DRINK_SOFT### -  ${tmp}-restaurant_menu_display_s_list_drink.btn_drink_soft    |

  #アルコール飲料の食事メニューHTMLはめ込み
  mojihame -l###SMALLMENU_DRINK_ALC###  -  ${tmp}-restaurant_menu_display_s_list_drink.btn_drink_alc     |

  #その他の食事メニューHTMLはめ込み
  mojihame -l###SMALLMENU_HOKA### - ${tmp}-restaurant_menu_display_s_list.04                             |
  #はめ込みまとめデータのはめ込み
  calsed -f ${tmp}-calsed_result -  > ${tmp}-html

  #エラーチェック
  [ $(plus ${PIPESTATUS[@]}) -ne 0 ] && message="トップメニュー表示データはめ込みエラー"

#fi


if [ "${message}" != "" ] ; then

  #カートファイルが存在している場合、削除
  if [ -e ${ap_dir}/SESSION/resutaurant-cart.$nyukyosha_id.$user_type ] ; then
    rm -f ${ap_dir}/SESSION/resutaurant-cart.$nyukyosha_id.$user_type
  fi

  #はめ込み文字データまとめファイル作成
  echo "###MESSAGE###" $message     >  $tmp-calsed_result
  echo "###USER_TYPE###" $user_type >> $tmp-calsed_result

  #20150803 add
  echo "###TARGET_DAY###"     $target_day   >> $tmp-calsed_result
  echo "###TARGET_SHOKUJI_JIKANTAI###"     $target_shokuji_jikantai   >> $tmp-calsed_result

  #はめ込みまとめデータのはめ込み
  calsed -f $tmp-calsed_result  ${html_dir}/RESTAURANT_MESSAGE.html > $tmp-html

fi


# HTMLファイルを表示する
cat  ${tmp}-html

#--------------------------------------------------------------

#rm -f ${tmp}-*
exit 0
