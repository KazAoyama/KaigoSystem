#!/bin/bash
#
# SHOKUJI_JISSEKI_ICHIRAN_NEW.TOUROKU
# 食事実績登録　入居者一覧
#
# Written by E.Okuda 20140114

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/SHOKUJI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d%H%M%S"); set -xv

# 設定ファイル読込
source  /home/hands/E-LIFE/SHOKUJI/CGI/SHOKUJI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

# 変数設定
tmp=/var/tmp/${$}
today=$(date +%Y%m%d)
yday=$(mdate ${today}/-1)
# ディレクトリ設定
home_dir="/home/hands/E-LIFE"
app_dir="${home_dir}/SHOKUJI"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/SHOKUJI/KANRI"
# pompaとkanriなどは下に
#--------------------------------------------------------------
#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------
#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------
  Shisetsu=$(nameread     "shisetsu"   $namedata)
  Tateya=$(nameread       "Tateya"     $namedata)
  USERID=$(nameread       "USERID"     $namedata)
  Taishoubi=$(nameread    "SelectTaishoubi"  $namedata | sed 's/\///g')
  TaishouNengetsu=$(echo "${Taishoubi}" | awk '{print substr($1,1,6)}')

  ArrShokujiID=$(nameread "ARR_SHOKUJIID" $namedata)
  ArrRiyoushaID=$(nameread "ARR_RIYOUSHAID" $namedata)
  ArrRiyoushaKyoshitsu=$(nameread "ARR_RIYOUSHA_KYOSHITSU" $namedata)
  ArrShokuji=$(nameread "ARR_Shokuji" $namedata)
  ArrShokushu=$(nameread "ARR_Shokushu" $namedata)
  ArrMenu=$(nameread "ARR_Menu" $namedata)
  ArrTaishousha=$(nameread "ARR_Taishousha" $namedata)
  ArrSuuryou=$(nameread "ARR_Suuryou" $namedata)

  echo "${ArrShokujiID}" | sed 's/,/ /g' > $tmp-arr-shokujiid
  echo "${ArrRiyoushaID}" | sed 's/,/ /g' > $tmp-arr-riyoushaid
  echo "${ArrRiyoushaKyoshitsu}" | sed 's/,/ /g' > $tmp-arr-kyoshitsu
  echo "${ArrShokuji}" | sed 's/,/ /g' > $tmp-arr-shokuji
  echo "${ArrShokushu}" | sed 's/,/ /g' > $tmp-arr-shokushu
  echo "${ArrMenu}" | sed 's/,/ /g' > $tmp-arr-menu
  echo "${ArrTaishousha}" | sed 's/,/ /g' > $tmp-arr-taishousha
  echo "${ArrSuuryou}" | sed 's/,/ /g' > $tmp-arr-suuryou

# 1:食事ID     2:居室   3:利用者ID 4:食事 5:食種
# 6:メニューID 7:対象者 8:数量
  cat $tmp-arr-shokujiid $tmp-arr-kyoshitsu $tmp-arr-riyoushaid $tmp-arr-shokuji $tmp-arr-shokushu $tmp-arr-menu $tmp-arr-taishousha $tmp-arr-suuryou |
  tateyoko |
# 完全に空のレコードは省く
  awk '$1!="_"||$6!="_"{print $0}' > $tmp-shokuji-input
  
  cp $tmp-shokuji-input $work_dir/shokuji-input

#--------------------------------------------------------------
#--------------------------------------------------------------
# テーブル続き
 pompa_dir="${app_dir}/POMPA/${Shisetsu}"
 mkdir -p ${pompa_dir}/${Tateya}/${TaishouNengetsu}
 touch ${pompa_dir}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI
 touch ${pompa_dir}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA
# kanri_dir="/DATA/E-LIFE/SHOKUJI/KANRI/${Shisetsu}/${Tateya}/${TaishouNengetsu}"
# mkdir -p ${kanri_dir}
# touch ${kanri_dir}/RIYOUSHA_SHOKUJI_JISSEKI
# touch ${kanri_dir}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA

 seikyu_dir="/DATA/E-LIFE/SEIKYU/SHISETSU/SHOKUJI/${Shisetsu}/${Tateya}/${TaishouNengetsu}"
 mkdir -p ${seikyu_dir}
 touch ${seikyu_dir}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA

 pompa_staff_dir="${pompa_dir}/STAFF/${TaishouNengetsu}"
 mkdir -p ${pompa_staff_dir}
 touch ${pompa_staff_dir}/STAFF_SHOKUJI_JISSEKI
 

# 請求確定後のデータかどうか
kakutei_nengetsu="$(LANG=C sort -k1,1 /DATA/E-LIFE/SEIKYU/SHISETSU/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${Shisetsu} | awk '$(NF-2)!="9"' | getlast 1 1 | self 2)"
kakunin_nengetsu="$(echo "${Taishoubi}" | self 1.1.6)"
[ "${kakutei_nengetsu}" -lt "${kakunin_nengetsu}" ] || error_exit "請求確定月以前のデータを入力することができません"

# 入力チェック

echo "${Taishoubi}" |
awk '$1~/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/' > $tmp-taishoubi_ok
[ -z "${Taishoubi}" -o ! -s $tmp-taishoubi_ok ] && error_exit "対象日を入力してください"

#--------------------------------------------------------------
# 金額取得
#-------------------------------------
## 20140908追記
# 消費税率を取得
cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/ZEIRITSU  |
# 1:ID 2:税率 3:適用開始日 4:適用終了日 5:削除フラグ 6:更新日時 7:userid
awk '$3<="'${Taishoubi}'"&&$4>="'${Taishoubi}'"{print $0}'   |
self 2                                               > ${tmp}-zeiritsu
zeiritsu=$(cat ${tmp}-zeiritsu | awk '{print $1+"1"}')


  #Shokuji=$(nameread      "SELECTShokuji"   $namedata)
  #Shokushu=$(nameread     "SELECTShokushu"   $namedata)
  #Taishousha=$(nameread   "SELECTTaishousha"   $namedata)
  #Menu=$(nameread     "SELECTMenu"   $namedata)

# 1:食事ID     2:居室   3:利用者ID 4:食事 5:食種
# 6:メニューID 7:対象者 8:数量
cat $tmp-shokuji-input |
awk '$8!~/^[0-9]*$/{print $0}' > $tmp-shokuji-suuryou_error
cat $tmp-shokuji-suuryou_error |
awk '$6!="_"{print $0}' > $tmp-yuko_suuryou_error
[ -s $tmp-yuko_suuryou_error ] && error_exit "数量の値が不正です。(半角数字で入力してください。)"
cat $tmp-shokuji-input |
awk '$8=="0"&&$6!="_"{print $0}' > $tmp-yuko_suuryou_error
[ -s $tmp-yuko_suuryou_error ] && error_exit "数量の値が不正です。(半角数字で、1以上の数字を入力してください。)"
cat $tmp-shokuji-input |
awk '$1=="00000"{print $0}'  > $tmp-kesshoku_error
if [ -s $tmp-kesshoku_error ] ; then
   self 3 $tmp-kesshoku_error |
   LANG=C sort -k1,1          |
   join1 key=1 <(self 1 2 /DATA/E-LIFE/UNEI/RIYOUSHA/RIYOUSHA_MASTER)
   delf 1                     |
   tail -1                    > $tmp-error-riyousha
   kesshoku_riyousha=$(cat tmp-error-riyousha)
   error_exit "欠食登録されている方("${kesshoku_riyousha}")の実績は登録できないため、対象からはずしてください。"
fi

cat $tmp-shokuji-input |
awk '$1=="_"'          > $tmp-new_shokuji_input_before_getno

cat $tmp-shokuji-input |
awk '$1!="_"'          > $tmp-mod_shokuji_input

new_jisseki_num=$(gyo $tmp-new_shokuji_input_before_getno)

# 新規データならばIDをふる(食事ID)
### 管理IDの発番
# 今回取得するID数
last_no=${new_jisseki_num}

# 食事ID
mkdir -p ${kanri_dir}/${Shisetsu}
touch ${kanri_dir}/${Shisetsu}/SHOKUJI_ID
[ -s ${kanri_dir}/${Shisetsu}/SHOKUJI_ID ] || echo "00000001" > ${kanri_dir}/${Shisetsu}/SHOKUJI_ID
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/${Shisetsu}/SHOKUJI_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

# 超えてたらリセット
[ ${new_last_no} -gt "99999999" ] && echo "00000001" > ${kanri_dir}/${Shisetsu}/SHOKUJI_ID

get_no ${last_no} ${kanri_dir}/${Shisetsu}/SHOKUJI_ID > $tmp-id_all

# 新規のレコードに新規のIDをくっつける
ycat $tmp-new_shokuji_input_before_getno $tmp-id_all |
self NF 2/NF-1                          > $tmp-new_shokuji_input

cat $tmp-mod_shokuji_input $tmp-new_shokuji_input > $tmp-shokuji_input_all

cp -p $tmp-shokuji_input_all $work_dir/shokuji_input_all

cat $tmp-shokuji_input_all |
LANG=C sort -k6,6      |
# 1:食事ID              2:居室        3:利用者ID         4:食事               5:食種
# 6:メニューID          7:メニュー名  8:入居者価格税抜き 9:ゲスト１価格税抜き 10:ゲスト２価格税抜き
# 11:スタッフ価格税抜き 12:メニュー色 13:対象者          14:数量
join2 key=6 <(self 1 2 6 7 8 9 16 ${app_dir}/POMPA/${Shisetsu}/SHOKUJI_MENU) |
tee $work_dir/test1 |
# 1:食事ID              2:居室                3:利用者ID            4:食事               5:食種
# 6:メニューID          7:メニュー名          8:入居者価格税抜き    9:ゲスト１価格税抜き 10:ゲスト２価格税抜き
# 11:スタッフ価格税抜き 12:メニュー色         13:対象者             14:数量              15:入居者価格税込み
# 16:ゲスト１価格税込み 17:ゲスト２価格税込み 18:スタッフ価格税込み
lcalc '$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$8*'${zeiritsu}',$9*'${zeiritsu}',$10*'${zeiritsu}',$11*'${zeiritsu}''  |
marume -sage 15.0 16.0 17.0 18.0 |
# 1:食事ID              2:居室                3:利用者ID            4:食事               5:食種
# 6:メニューID          7:メニュー名          8:入居者価格税抜き    9:ゲスト１価格税抜き 10:ゲスト２価格税抜き
# 11:スタッフ価格税抜き 12:メニュー色         13:対象者             14:数量              15:入居者価格税込み
# 16:ゲスト１価格税込み 17:ゲスト２価格税込み 18:スタッフ価格税込み 19:有効フラグ
awk '{if($6=="_"){yuko="9"}else{yuko="1"};print $0,yuko}' > $tmp-jisseki_data_jyunbi

cp -p $tmp-jisseki_data_jyunbi $work_dir/shokuji_data_jyunbi

# チェックの入ったデータがなかったら
if [ ! -s $tmp-jisseki_data_jyunbi ] ; then
  error_exit "実績データがありません。"

# チェックがあれば
else

 # スタッフデータ
 if [ "${NyuuryokuMODE}" = "StaffNyuuryoku" ] ; then

    cat $tmp-jisseki_data_jyunbi |
# 1:スタッフID 2:食事(数字) 3:食事ID 4:金額 5:金額 6:ゲストフラグ
    awk '{print $3,"'${Shisetsu}'","'${Taishoubi}'",$4,$1,$6,$7,$5,$11,$14,$12,$18,"_","_","_","_",$19,"'${cur_time}'","'${USERID}'"}' > $tmp-jisseki_data_input
    #awk '{print $1,"'${Shisetsu}'","'${Taishoubi}'",$2,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${StaffKakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${StaffKakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'  > $tmp-jisseki_data_input
 else

    cat $tmp-jisseki_data_jyunbi |
#    sed 's/_/ /g' |
#    self 2/NF 1   |
# 1:居室No 2:入居者 3:食事(数字) 4:食事ID 5:金額 6:ゲストフラグ(1なら入居者,2ならゲスト)

    # 対象者により食事単価の処理を分ける
    #if [ "${Taishousha}" = "3" ] ; then
    awk '{if($13=="3"){print $3,"'${Shisetsu}'","'${Tateya}'","_",$13,"'${Taishoubi}'",$4,$1,$6,$7,$5,$10,$14,$12,$17,"_","_","_","_",$19,"'${cur_time}'","'${USERID}'"}
    else if($13=="2"){print $3,"'${Shisetsu}'","'${Tateya}'","_",$13,"'${Taishoubi}'",$4,$1,$6,$7,$5,$9,$14,$12,$16,"_","_","_","_",$19,"'${cur_time}'","'${USERID}'"}
    else{print $3,"'${Shisetsu}'","'${Tateya}'","_",$13,"'${Taishoubi}'",$4,$1,$6,$7,$5,$8,$14,$12,$15,"_","_","_","_",$19,"'${cur_time}'","'${USERID}'"}}' > $tmp-jisseki_data_input
      #awk '{print $2,"'${Shisetsu}'","'${Tateya}'","_","'${Taishousha}'","'${Taishoubi}'",$3,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${Guest2KakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${Guest2Kakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
    #elif [ "${Taishousha}" = "2" ] ; then
      #awk '{print $3,"'${Shisetsu}'","'${Tateya}'","_",$13,"'${Taishoubi}'",$1,$6,$7,$5,$9,$14,$12,$16,"_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
      #awk '{print $2,"'${Shisetsu}'","'${Tateya}'","_","'${Taishousha}'","'${Taishoubi}'",$3,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${Guest1KakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${Guest1Kakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
    #else
      #awk '{print $3,"'${Shisetsu}'","'${Tateya}'","_",$13,"'${Taishoubi}'",$1,$6,$7,$5,$8,$14,$12,$15,"_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
      #awk '{print $2,"'${Shisetsu}'","'${Tateya}'","_","'${Taishousha}'","'${Taishoubi}'",$3,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${NyuukyoshaKakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${NyuukyoshaKakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
    #fi   > $tmp-jisseki_data_input
# 1:利用者ID    2:施設ID                 3:建屋       4:居室          5:入居者ゲストフラグ
# 6:日付        7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニュー  10:食事メニュー名
# 11:食事種類ID 12:単価(税抜き)          13:数量      14:メニュー色ID 15:予備項目1
# 16:予備項目2  17:予備項目3             18:予備項目4 19:予備項目5    20:削除フラグ
# 21:更新日     22:更新者

 fi
fi




############
# 変更の場合
############

#elif [ "${MODE}" = "henkou" ] ; then

  # チェックの入ったデータがなかったら
#  if [ ! -s $tmp-jisseki_data_jyunbi ] ; then
#    error_exit "変更する入居者の食事にチェックを入れてください。"
  # チェックの入ったデータがあったら
#  else

    # 変更元データの用意
#    cat $tmp-jisseki_data_jyunbi |
#    awk '{print $0,$NF!="_"?$NF:"@_@_@"}' |
#    delf NF-1                    | 
#    sed 's/_/ /g'                |
#    self 2/NF 1                  |
# 1:居室No 2:入居者 3:食事(数字) 4:食事ID 5:金額 6:ゲストフラグ(1なら入居者,2ならゲスト)
#> $tmp-henkou_moto_data
#    awk '{print $2,"'${Shisetsu}'","'${Tateya}'","_",$NF,"'${Taishoubi}'",$3,$4}' |
#    LANG=C sort                > $tmp-shokuji_moto_data
# 1:利用者ID 2:施設ID 3:建屋   4:居室 5:入居者ゲストフラグ
# 6:日付     7:食事   8:食事ID

#  [ "${Shokuji}" = "9" -a ! "$(awk '$NF!="@"' $tmp-shokuji_moto_data |gyo)" -ge "1" ] && error_exit "削除対象データがありません"

#    : >$tmp-jisseki_data_input

 # スタッフデータ
# if [ "${NyuuryokuMODE}" = "StaffNyuuryoku" ] ; then
#   cat $tmp-shokuji_moto_data |
#   self 1 2 6/8 |
# 1:利用者(入居者)ID 2:施設ID       3:日付 4:食事（朝昼夜おやつ他） 5:食事ID

#   join2 key=1/5 ${pompa_staff_dir}/STAFF_SHOKUJI_JISSEKI - |
   
# 1:利用者(入居者)ID 2:施設ID       3:日付 4:食事（朝昼夜おやつ他） 5:食事ID
# 6:食事メニュー     7:単価(税抜き) 8:数量
#    delf NF-2/NF |
#    awk '$5!="@"{print $0,"9","'${cur_time}'","'${USERID}'"}'    >> $tmp-jisseki_data_input
 # 入居者データ
# else
#    cat ${pompa_dir}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI |
# 1:利用者(入居者)ID 2:施設ID                 3:建屋       4:居室           5:入居者ゲストフラグ
# 6:日付             7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニューID 10:食事メニュー名称
# 11:食事種類ID      12:単価(税抜き)          13:数量      14:色ID          15:予備項目1
# 16:予備項目2       17:予備項目3             18:予備項目4 19:予備項目5
#    join2 key=1/8 - $tmp-shokuji_moto_data    |
#    delf NF-2/NF |
#    awk '$8!="@"{print $0,"9","'${cur_time}'","'${USERID}'"}'         >> $tmp-jisseki_data_input
# 1:利用者(入居者)ID 2:施設ID                 3:建屋       4:居室           5:入居者ゲストフラグ
# 6:日付             7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニューID 10:食事メニュー名称
# 11:食事種類ID      12:単価(税抜き)          13:数量      14:色ID          15:予備項目1
# 16:予備項目2       17:予備項目3             18:予備項目4 19:予備項目5 
#  fi
 
   #####################
   # 変更登録の場合
   #####################
#    if [ "${Shokuji}" != "9" ] ; then

   # 新規データならばIDをふる(食事ID)
   ### 管理IDの発番
   # 今回取得するID数
#   last_no="1"

# 食事ID
#    mkdir -p ${kanri_dir}/${Shisetsu}
#    touch ${kanri_dir}/${Shisetsu}/SHOKUJI_ID
#    [ -s ${kanri_dir}/${Shisetsu}/SHOKUJI_ID ] || echo "00000001" > ${kanri_dir}/${Shisetsu}/SHOKUJI_ID
   # 現状の最終番号
#    now_last_no=$(cat ${kanri_dir}/${Shisetsu}/SHOKUJI_ID)
    # 今回の発番後に、数字が限度を超えないかチェック
#    new_last_no=$(expr ${now_last_no} + ${last_no})

    # 超えてたらリセット
#    [ ${new_last_no} -gt "99999999" ] && echo "00000001" > ${kanri_dir}/${Shisetsu}/SHOKUJI_ID

#    get_no ${last_no} ${kanri_dir}/${Shisetsu}/SHOKUJI_ID > $tmp-id_all

    # この場合取得するのは一つなのでそのまま変数に
#    shokuji_id="$(cat $tmp-id_all)"
    #data_id="${today}${new_no}"

     # スタッフデータ
#    if [ "${NyuuryokuMODE}" = "StaffNyuuryoku" ] ; then
#      cat $tmp-shokuji_moto_data |
# 1:利用者(入居者)ID 2:施設ID 3:建屋   4:居室 5:入居者ゲストフラグ
# 6:日付             7:食事   8:食事ID
#      self 1 2 6 7 |
# 1:利用者(入居者)ID 2:施設ID 3:日付 4:食事（朝昼夜おやつ他）
#      awk '{print $0,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${StaffKakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${StaffKakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'  >> $tmp-jisseki_data_input

 
#    else
#      cat $tmp-shokuji_moto_data |
# 1:利用者(入居者)ID 2:施設ID 3:建屋   4:居室 5:入居者ゲストフラグ
# 6:日付             7:食事   8:食事ID
#      self 1/7 |
#      awk '{if($5=="1"){print $0,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${NyuukyoshaKakaku}'","'${Suuryou}'","'${MenuColor}'","_","_","_","_","_","1","'${cur_time}'","'${USERID}'"}
#         else{print $0,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${GuestKakaku}'","'${Suuryou}'","'${MenuColor}'","_","_","_","_","_","1","'${cur_time}'","'${USERID}'"}
#         }'  >> $tmp-jisseki_data_input
#    awk '{print $0,"'${Taishousha}'"}' |
#    self 1/4 NF 6 7 |
#    if [ "${Taishousha}" = "3"  ] ; then
#      awk '{print $0,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${Guest2KakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${Guest2Kakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
#    elif [ "${Taishousha}" = "2" ] ; then
#      awk '{print $0,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${Guest1KakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${Guest1Kakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
#    else
#      awk '{print $0,"'${shokuji_id}'","'${Menu}'","'${MenuName}'","'${Shokushu}'","'${NyuukyoshaKakakuZeinuki}'","'${Suuryou}'","'${MenuColor}'","'${NyuukyoshaKakaku}'","_","_","_","_","1","'${cur_time}'","'${USERID}'"}'
#    fi  >> $tmp-jisseki_data_input

#    fi

   #####################
   # 削除の場合
   #####################
#    else
#      echo "最初に用意した$tmp-jisseki_data_inputでOK"
#    fi

#  fi
#fi

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

cp -p $tmp-jisseki_data_input $work_dir/jisseki_data_input



################
# 請求用データ
################

if [ "${NyuuryokuMODE}" != "StaffNyuuryoku" ] ; then
    # 消費税率を取得
    cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/ZEIRITSU  |
    # 1:ID 2:税率 3:適用開始日 4:適用終了日 5:削除フラグ 6:更新日時 7:userid
    awk '$3<="'${Taishoubi}'"&&$4>="'${Taishoubi}'"{print $0}'   |
    self 2                                               > ${tmp}-zeiritsu
    ### 20140908変更
#    zeiritsu=$(cat ${tmp}-zeiritsu | awk '{print $1}')
    zeiritsu=$(cat ${tmp}-zeiritsu | awk '{print $1+"1"}')

    # 単価が0円じゃないもの(税計算するもの)
    cat $tmp-jisseki_data_input |
# 1:利用者(入居者)ID 2:施設ID                 3:建屋       4:居室           5:入居者ゲストフラグ
# 6:日付             7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニューID 10:食事メニュー名称
# 11:食事種類ID      12:単価(税抜き)          13:数量      14:色ID          15:予備項目1
# 16:予備項目2       17:予備項目3             18:予備項目4 19:予備項目5     20:削除
# 21:更新日          22:更新者
    awk '$12!="0"{print $0}'     |
    self 1/13 NF-2/NF            > $tmp-shokuji_jisseki_tankaari

    # 単価が0円のもの(税計算しないもの)
    cat $tmp-jisseki_data_input |
    awk '$12=="0"{print $0}'      > $tmp-shokuji_jisseki_0

  : >$tmp-shokuji_jisseki_seikyutaishou_input

  if [ -s $tmp-shokuji_jisseki_tankaari ] ; then
    cat $tmp-shokuji_jisseki_tankaari |
# 1:利用者(入居者)ID 2:施設ID                 3:建屋       4:居室           5:入居者ゲストフラグ
# 6:日付             7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニューID 10:食事メニュー名称
# 11:食事種類ID      12:単価(税抜き)          13:数量   
    lcalc '$12 * '${zeiritsu}''    |
    marume -sage 1.0            |
    ycat $tmp-shokuji_jisseki_tankaari - |
#    awk '{print $0,"1","'${zeiritsu}'"}'     |                        
    awk '{print $0,"1","'${zeiritsu}'",$12}'     |
    marume -sage 20.0              |
# 1:利用者(入居者)ID 2:施設ID                 3:建屋    4:居室           5:入居者ゲストフラグ
# 6:日付             7:食事（朝昼夜おやつ他） 8:食事ID  9:食事メニューID 10:食事メニュー名称
# 11:食事種類ID      12:単価(税抜き)          13:数量   14:削除          15:更新日
# 16:更新者          17:税込み                18:税区分 19:税率          20.税抜き
    ### 20140908変更
#    awk '{if($(NF-2)>$12){print $0,$(NF-1),$NF,$12,$(NF-2)-$12,$(NF-2),$13,$14,$15,$16}
#          else{print $0,$(NF-1),$NF,$12,"0",$(NF-2),$13,$14,$15,$16}
#         }' |
    awk '{if($(NF-3)>$NF){print $0,$(NF-2),$(NF-1),$12,$(NF-3)-$NF,$(NF-3),$13,$14,$15,$16}
          else{print $0,$(NF-2),$(NF-1),$12,"0",$(NF-3),$13,$14,$15,$16}
         }' |
    self 1/11 NF-8/NF  > $tmp-shokuji_jisseki_seikyutaishou_tochuu
# 1:利用者(入居者)ID 2:施設ID                 3:建屋   4:居室           5:入居者ゲストフラグ
# 6:日付             7:食事（朝昼夜おやつ他） 8:食事ID 9:食事メニューID 10:食事メニュー名称
# 11:食事種類I       12:税区分                13:税率  14:単価(税抜き)  15:税額
# 16:税込み金額      17:数量                  18:削除  19:更新日        20:更新者

   # 合計金額を計算する
    cat $tmp-shokuji_jisseki_seikyutaishou_tochuu    |
#    lcalc '$14 * $17','$15 *$17','$16*$17'           |
#   合計金額の税抜き合計金額は合計金額（税込み）から割り戻す
#   合計金額の税額は合計金額（税込）－合計金額（税抜）で計算する。
# 1:税込み合計金額 2:税率
    lcalc '$16 * $17','$13'           |
# 1:税抜き合計金額 2:税込み合計金額
    lcalc '$1/$2','$1'               |
    marume -sage 1.0                  |
# 1:税抜き合計金額 2:税額 3:税込み合計金額
    lcalc '$1','$2-$1','$2'                          |
    awk '{if($2<0){$2="0"};print $0}'                 |
    ycat $tmp-shokuji_jisseki_seikyutaishou_tochuu - |
    self 1/17 NF-2/NF 18/NF-3             |
    ### 20140908変更
    marume -sage 18.0 19.0                |
    awk '{print $0,"_","_","_","_","_",$(NF-2),$(NF-1),$NF}'  |
# 1:利用者ID    2:施設ID                 3:建屋            4:居室                  5:入居者ゲストフラグ
# 6:日付        7:食事（朝昼夜おやつ他） 8:食事ID          9:食事メニューID        10:食事メニュー名称
# 11:食事種類ID 12:税区分                13:税率           14:単価(税抜き)         15:税額
# 16:税込価格   17:数量                  18:合計金額(税抜) 19:合計税金額(税額のみ) 20:合計金額(税込)
# 21:削除フラグ 22:更新時間              23:更新者         24:予備項目1            25:予備項目2
# 26:予備項目3  27:予備項目4             28:予備項目5      29:削除フラグ           30:更新時間
# 31:更新者
    self 1/20 24/NF             >> $tmp-shokuji_jisseki_seikyutaishou_input
# 1:利用者ID    2:施設ID                 3:建屋            4:居室                  5:入居者ゲストフラグ
# 6:日付        7:食事（朝昼夜おやつ他） 8:食事ID          9:食事メニューID        10:食事メニュー名称
# 11:食事種類ID 12:税区分                13:税率           14:単価(税抜き)         15:税額
# 16:税込価格   17:数量                  18:合計金額(税抜) 19:合計税金額(税額のみ) 20:合計金額(税込)
# 21:予備項目1  22:予備項目2             23:予備項目3      24:予備項目4            25:予備項目5
# 26:削除フラグ 27:更新時間              28:更新者
  fi
  if [ -s $tmp-shokuji_jisseki_0 ] ; then

    cat $tmp-shokuji_jisseki_0 |
# 1:利用者ID    2:施設ID                 3:建屋       4:居室          5:入居者ゲストフラグ
# 6:日付        7:食事（朝昼夜おやつ他） 8:食事ID     9:食事メニュー  10:食事メニュー名
# 11:食事種類ID 12:単価(税抜き)          13:数量      14:メニュー色ID 15:予備項目1
# 16:予備項目2  17:予備項目3             18:予備項目4 19:予備項目5    20:削除フラグ
# 21:更新日     22:更新者
    awk '{print $0,"1","0",$12,"0","0",$13,"0","0","0","_","_","_","_","_",$(NF-2),$(NF-1),$NF}'   |
    self 1/11 23/NF  >> $tmp-shokuji_jisseki_seikyutaishou_input
# 1:利用者ID    2:施設ID                 3:建屋            4:居室                  5:入居者ゲストフラグ
# 6:日付        7:食事（朝昼夜おやつ他） 8:食事ID          9:食事メニューID        10:食事メニュー名称
# 11:食事種類ID 12:税区分                13:税率           14:単価(税抜き)         15:税額
# 16:税込価格   17:数量                  18:合計金額(税抜) 19:合計税金額(税額のみ) 20:合計金額(税込)
# 21:予備項目1  22:予備項目2             23:予備項目3      24:予備項目4            25:予備項目5
# 26:削除フラグ 27:更新時間              28:更新者

  fi
fi

cp -p $tmp-shokuji_jisseki_seikyutaishou_input $work_dir/shokuji_jisseki_seikyutaishou_input

#  cp $tmp-* /home/hands/work/okuda 
### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
 if [ "${NyuuryokuMODE}" = "StaffNyuuryoku" ] ; then
  cat $tmp-jisseki_data_input  > $tmp-jisseki_staff_data_input


#cat <<- FIN | LANG=C sort -u > $tmp-target-table
#STAFF_SHOKUJI_JISSEKI STAFF_SHOKUJI_JISSEKI
#20150910mod ロック単位変更
cat <<- FIN | LANG=C sort -u > $tmp-target-table
STAFF_SHOKUJI_JISSEKI STAFF_SHOKUJI_JISSEKI_${Shisetsu}_${TaishouNengetsu}
FIN

cat <<- FIN > $tmp-koushin_pompa
jisseki_staff_data STAFF_SHOKUJI_JISSEKI 5 18 19 ${pompa_staff_dir} ${input_dir}
FIN

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_staff_dir}/${file_name} ${pompa_staff_dir}/back/${file_name}.${today}
done



  else
#cat <<- FIN | LANG=C sort -u > $tmp-target-table
#RIYOUSHA_SHOKUJI_JISSEKI RIYOUSHA_SHOKUJI_JISSEKI
#RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA
#20150910mod ロック単位変更
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RIYOUSHA_SHOKUJI_JISSEKI RIYOUSHA_SHOKUJI_JISSEKI_${Shisetsu}_${TaishouNengetsu}
RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA_${Shisetsu}_${TaishouNengetsu}
FIN

cat <<- FIN > $tmp-koushin_pompa_nyukyosha
jisseki_data RIYOUSHA_SHOKUJI_JISSEKI 7 28 22 ${pompa_dir}/${Tateya}/${TaishouNengetsu} ${input_dir}
shokuji_jisseki_seikyutaishou RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA 7 34 28 ${pompa_dir}/${Tateya}/${TaishouNengetsu} ${input_dir}
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
#--------------------------------------------------------------

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 mkdir -p ${pompa_dir}/${Tateya}/${TaishouNengetsu}/back
 cp ${pompa_dir}/${Tateya}/${TaishouNengetsu}/${file_name} ${pompa_dir}/${Tateya}/${TaishouNengetsu}/back/${file_name}.${today}
done

fi
#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
 # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
# 20150910mod
# ロック処理で失敗したときにアンロック（ロックファイルを削除）すると、他ユーザによるロックを解除してしまうのでerror_exitに変更。
# ロック成功後、ロック解除までの間にエラーが起きてシェルをexitする場合はerror_unlockで確実にロックファイルを削除する。
    error_exit "ロック処理失敗"
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}          > $tmp-${input_name}_new
done
#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa_nyukyosha         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  self 1/4 6/8 0               |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        |
  delf 1/7                     > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa_nyukyosha         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${Shisetsu}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${Shisetsu}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa_nyukyosha         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${Shisetsu}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${Shisetsu}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done

#20150915mod ロック解放後の位置から移動
cp -p ${pompa_dir}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA ${seikyu_dir}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA

#--------------------------------------------------------------
#cp $tmp-* /home/hands/work/okuda
#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
: ;done
#--------------------------------------------------------------
#20150915mod ロック範囲外のためロック解放前に移動（請求のみ)
# cp -p ${pompa_dir}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA ${seikyu_dir}/RIYOUSHA_SHOKUJI_JISSEKI_SEIKYUDATA
## cp -p ${pompa_dir}/${Tateya}/${TaishouNengetsu}/RIYOUSHA_SHOKUJI_JISSEKI ${kanri_dir}/RIYOUSHA_SHOKUJI_JISSEKI  

echo "result ok"


## 終了
rm -f $tmp-*
exit 0
