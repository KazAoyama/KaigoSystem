#!/bin/bash
#
# SHOKUJI_SIGN.TOUROKU
# 食事メニュー登録
#
# Written by E.Okuda 20140110

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/SHOKUJI/APLOG/$(date "+%Y%m%d")/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d%H%M%S"); set -xv

# 設定ファイル読込
source  /home/hands/E-LIFE/SHOKUJI/CGI/SHOKUJI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
app_dir="${home_dir}/SHOKUJI"
pompa_dir="${app_dir}/POMPA"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/SHOKUJI/KANRI"
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1
# ファイルをそのまま変数にいれてファイルを作成
filedata=$2

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------

  shisetsu=$(nameread        "shisetsu"            $namedata)
  nyukyosha_id=$(nameread    "nyukyosha_id"        $namedata)
  MODE=$(nameread            "MODE"                $namedata)
  target_day=$(nameread      "target_day"          $namedata)
  chumon_no=$(nameread       "chumon_no"           $namedata)
  cat ${filedata} |
  sed 's/data%3Aimage%2Fpng%3Bbase64%2C/data:image\/png;base64,/g' > $tmp-sign_file
#--------------------------------------------------------------
###############################
# # MODE=tourokuのとき
###############################

if [ "${MODE}" = "regist" ] ; then

# 入力データのチェック
#

#--------------------------------------------------------------
# 入力チェック

#--------------------------------------------------------------
# 食事注文ID？

   # 新規データならばIDをふる(利用者ID)
   ### 管理IDの発番
   # 今回取得するID数
#   last_no="1"
#   nengetsu=$(date "+%Y%m");
   [ -z "${target_day}" -o "${target_day}" = "_" ] && target_day=$(date "+%Y%m%d")
#   mkdir -p ${kanri_dir}/${Shisetsu}/${nengetsu}
#   touch ${kanri_dir}/${Shisetsu}/${nengetsu}/RESTAURANT_CHUMON_ID_${hiduke}
#   [ -s ${kanri_dir}/${Shisetsu}/${nengetsu}/RESTAURANT_CHUMON_ID_${hiduke} ] || echo "0001" > ${kanri_dir}/${Shisetsu}/${nengetsu}/RESTAURANT_CHUMON_ID_${hiduke}
   # 現状の最終番号
#    now_last_no=$(cat ${kanri_dir}/${Shisetsu}/${nengetsu}/RESTAURANT_CHUMON_ID_${hiduke})
    # 今回の発番後に、数字が限度を超えないかチェック
#    new_last_no=$(expr ${now_last_no} + ${last_no})

    # 超えてたらリセット
#    [ ${new_last_no} -gt 9999 ] && echo "0001" > ${kanri_dir}/${Shisetsu}/${nengetsu}/RESTAURANT_CHUMON_ID_${hiduke}

#    get_no ${last_no} ${kanri_dir}/${Shisetsu}/${nengetsu}/RESTAURANT_CHUMON_ID_${hiduke} > $tmp-id_all

    # この場合取得するのは一つなのでそのまま変数に
#    shokujiorderid="$(cat $tmp-id_all)"

   [ -z "${chumon_no}" -o "${chumon_no}" = "_" ] && chumon_no="0003"


   fileid=${shisetsu}${nyukyosha_id}${target_day}${chumon_no}
#--------------------------------------------------------------
# 更新テーブル
#
# レストランサインテーブル
#
#------------------------------------------------------------------------------------
# データの作成
  echo "${shisetsu}" "${nyukyosha_id}" "${target_day}" "${chumon_no}" "${fileid}" "_" "_" "_" "_" "_" "${cur_time}" >  $tmp-restaurant_sign_input
# 1:施設 2:入居者ID  3:日付    4:注文ＩＤ          5:サイン
# 6:予備１ 7:予備２ 8:予備３ 9:予備４    10:予備５
# 11:更新時間

fi
### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RESTAURANT_SIGN/${shisetsu} RESTAURANT_SIGN
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
restaurant_sign RESTAURANT_SIGN 4 11 11 ${pompa_dir}/${shisetsu} ${input_dir}/${shisetsu}
FIN

#--------------------------------------------------------------

cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 1 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_unlock "ロック処理に失敗しました。"

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ $(gyo $tmp-${input_name}_new) -gt 0 ] ; then
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
  fi
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------
#cp $tmp-* /home/hands/work/okuda

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/SHOKUJI_SIGN/${shisetsu}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/SHOKUJI_SIGN/${shisetsu}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
    rm -f $tmplock_dir/$table/$base.lock 
: ;done
#--------------------------------------------------------------

#とりあえずのファイル置き場
file_dir="/home/hands/E-LIFE/SHOKUJI/DOWNLOAD"
mkdir -p ${file_dir}/${shisetsu}/${nyukyosha_id}
cp -p $tmp-sign_file ${file_dir}/${shisetsu}/${nyukyosha_id}/${fileid}

echo "result ok" "${chumon_no}"


## 終了
rm -f $tmp-*
exit 0
