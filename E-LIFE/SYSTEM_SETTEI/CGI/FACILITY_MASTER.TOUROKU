#!/bin/bash
#
# FACILITY_MASTER.TOUROKU : 居宅訪問サービス事業所登録
#
# Usage : FACILITY_MASTER.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/SYSTEM_SETTEI/CGI/SYSTEM_SETTEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f  $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $lock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1


# デフォルト値セット

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"

#--------------------------------------------------------------


# データ作成
# スケジュールID
echo ${dataCsvEventID} |
sed 's/,/ /g'    > $tmp-facility_id
# スケジュール名
echo ${dataCsvEventmei} |
sed 's/,/ /g'    > $tmp-facility
# スケジュールタイプ
echo ${dataCsvEventType} |
sed 's/,/ /g'    > $tmp-facilitytype
# 費用
echo ${dataCsvEventFee} |
sed 's/,/ /g'    > $tmp-facilityfee
# 課税区分
echo ${dataCsvEventKazei} |
sed 's/,/ /g'    > $tmp-facilitykazei

cat $tmp-facility_id $tmp-facility $tmp-facilitytype $tmp-facilityfee $tmp-facilitykazei |
tateyoko         |
# 1:施設       2:スケジュールID 3:スケジュール 4:スケジュールタイプ 5:費用
# 6:課税区分 7:有効フラグ     8:処理時間     9:ユーザID
awk '{print "'${shisetsu}'",$0,"1","'${sdaytime}'","'${userid}'"}' > $tmp-facility1

cp $tmp-facility1 $work_dir/facility1

cat $tmp-facility1           |
awk '$2=="_"'                           > $tmp-facility_new

cat $tmp-facility1           |
awk '$2!="_"'                           > $tmp-facility_upd

new_facility_num=$(gyo $tmp-facility_new)

#--------------------------------------------------------------
# スケジュールＩＤがない場合（登録）ならデータIDをふる
# スケジュールタイプマスタと合わせる必要あり
### 管理IDの発番
# 今回取得するID数
if [ $new_facility_num -gt 0 ] ; then
last_no="${new_facility_num}"
# ディレクトリを作成
#mkdir -p ${kanri_dir}/FACILITY/${shisetsu}
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/ScheduleTypeID)
#now_last_no=$(cat ${kanri_dir}/FACILITY/${shisetsu}/FacilityID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})
#new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/ScheduleTypeID ] || echo "00001" > ${kanri_dir}/ScheduleTypeID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/ScheduleTypeID
get_no ${last_no} ${kanri_dir}/ScheduleTypeID > $tmp-id_all

fi

#[ -e ${kanri_dir}/FACILITY/${shisetsu}/FacilityID ] || echo "00001" > ${kanri_dir}/FACILITY/${shisetsu}/FacilityID
# 超えてたらリセット
#[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/FACILITY/${shisetsu}/FacilityID
#get_no ${last_no} ${kanri_dir}/FACILITY/${shisetsu}/FacilityID > $tmp-id_all

#fi

#---------------------------------------------------------------

ycat $tmp-id_all $tmp-facility_new             |
self 2 1 4/NF                                  > ${tmp}-facility_new2

cat $tmp-facility_upd ${tmp}-facility_new2  |
LANG=C sort -k1,2          > ${tmp}-facility_input

cp ${tmp}-facility_input $work_dir/facility_input

cp ${tmp}-facility_input ${tmp}-facility2_input

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
FACILITY_MASTER/FACILITY_MASTER FACILITY_MASTER
FIN

input_detail_dir=FACILITY_MASTER/${shisetsu}

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
facility FACILITY_MASTER 2 8 9 ${home_dir}/TBL/FACILITY_MASTER ${input_dir}
facility2 FACILITY_MASTER 2 8 9 ${pompa_dir}/FACILITY_MASTER ${input_dir}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 3 -l 10 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_exit "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'$shisetsu'"{print $0}' ${pompa_dir_name}/${file_name}) -
#    cat <(gawk '{$6="9" print $0}' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'${KyotakuJigyoushoID}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
