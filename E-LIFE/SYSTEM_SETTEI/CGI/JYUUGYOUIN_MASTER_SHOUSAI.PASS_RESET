#!/bin/bash
#
# JYUUGYOUIN_MASTER_SHOUSAI.PASS_RESET
# 従業員マスタ登録
#
# Written by Jun Aoyagi

#--------------------------------------------------------------
# ログ
mkdir -p /home/hands/E-LIFE/SYSTEM_SETTEI/APLOG/$(date +%Y%m%d)
exec 2> /home/hands/E-LIFE/SYSTEM_SETTEI/APLOG/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d"); set -xv

# 設定ファイル読込
source  /home/hands/E-LIFE/SYSTEM_SETTEI/CGI/SYSTEM_SETTEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/SYSTEM_SETTEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
input_dir="${app_dir}/INPUT/${today}/$(basename ${0})"
pompa_dir="${app_dir}/POMPA/JYUUGYOUIN"
kanri_dir="/DATA/E-LIFE/SYSTEM_SETTEI/KANRI"
tbl_di="${home_dir}/E-LIFE/TBL/CONFIG"
work=${app_dir}/WORK
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------

  JYUUGYOUINID="$(nameread "JYUUGYOUINID" ${namedata})"
  KinmuKikanFrom=$(nameread  "KinmuKikanFrom"  $namedata | sed 's/\///g')
  KinmuKikanTo=$(nameread    "KinmuKikanTo"    $namedata | sed 's/\///g')
  JyuugyouinName=$(nameread  "JyuugyouinName"  $namedata | sed 's/ /　/g')
#  JyuugyouinName=$(nameread  "JyuugyouinName"  $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  JyuugyouinNameKana=$(nameread  "JyuugyouinNameKana" $namedata | sed 's/ /　/g')
#  JyuugyouinNameKana=$(nameread  "JyuugyouinNameKana" $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  Id=$(nameread   "JyuugyouinLoginId"   $namedata | sed 's/ //g'| sed 's/\\n/###KAIGYO###/g')
#  Id=$(nameread   "Id"   $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  Pass=$(nameread  "JyuugyouinLoginPass"  $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  Pass="e-life-pass"

  [ -z "${KinmuKikanTo}" -o "${KinmuKikanTo}" = "_" ] && KinmuKikanTo="99999999"

#--------------------------------------------------------------
# 入力データのチェック
#
  [ -z "${KinmuKikanFrom}" -o "${KinmuKikanFrom}" = "_" ] && error_exit "期間を入力してください。"
  [ "${KinmuKikanTo}" != "_" -a "${KinmuKikanFrom}" -ge "${KinmuKikanTo}" ] && error_exit "期間(自)より期間(至)は後の日付を入力してください。"

  [ -z "${JyuugyouinName}" -o "${JyuugyouinName}" = "_" -o "${JyuugyouinName}" = "　" ] && error_exit "従業員名は必須項目です。"
#  [ -z "${JyuugyouinNameKana}" -o "${JyuugyouinNameKana}" = "_" ] && error_exit "従業員名カナは必須項目です。"
  [ -z "${Id}" -o "${Id}" = "_" ] && error_exit "IDを入力してください。"
  [ -z "${Pass}" -o "${Pass}" = "_" ] && error_exit "パスワードを入力してください。"
# IDのチェック
  cat ${pompa_dir}/USER_KIHON |
  awk '$1!="'${JYUUGYOUINID}'"&&$6=="'${Id}'"{print $0}' > $tmp-choufuku_data

  [ -s $tmp-choufuku_data ] && error_exit "登録済みのidは使用できません。"


#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -n "${JYUUGYOUINID}" -a "${JYUUGYOUINID}" != "_" ] ; then
   jyuugyouin_id="$(echo "${JYUUGYOUINID}")"
else
  echo "muri" > $tmp-muri
fi
[ -e $tmp-muri ] && error_exit "パスワードリセットできません"

#--------------------------------------------------------------

# 更新テーブル一覧
#
# 従業員マスタ
# 従業員基本マスタ
# 従業員所属施設マスタ
#--------------------------------------------------------------

  #####################
  # 1:従業員マスタ
  #####################

# 追加データの作成

  echo "${jyuugyouin_id}" "${JyuugyouinName}" "${JyuugyouinNameKana}" "1" "${cur_time}" "${USERID}">  $tmp-jyuugyouin_master_input
# 1:従業員ID 2:従業員名 3:従業員名カナ 4:削除フラグ 5:更新日時 7:更新者

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit


  #######################
  # 3:従業員基本マスタ
  #######################

  cat $tmp-jyuugyouin_master_input |
  self 1/3 |
# 1:従業員ID 2:従業員名 3:従業員名カナ

  awk '{print $0,"'${KinmuKikanFrom}'","'${KinmuKikanTo}'","'${Id}'","'${Pass}'","1","'${cur_time}'","'${USERID}'"}' > $tmp-jyuugyouin_kihon_input
# 1:従業員ID 2:従業員名 3:従業員名カナ 4:勤務期間FROM 5:勤務期間TO
# 6:ID       7:PASS     8:削除フラグ   9:更新日時     10:UserID

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
JYUUGYOUIN/USER_KIHON USER_KIHON
FIN
# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
jyuugyouin_kihon USER_KIHON 1 9 10 ${pompa_dir} ${input_dir}
FIN

#--------------------------------------------------------------

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_dir}/USER_KIHON ${pompa_dir}/back/${file_name}.${today}
done

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ $file_name = "USER_KIHON" ];then
    if [ -e ${pompa_dir_name}/${file_name} ] ; then
      awk '{if($1=="'${jyuugyouin_id}'"){$(NF-2)=9};print}' ${pompa_dir_name}/${file_name} |
      cat - $tmp-${input_name}_input |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
    else
      cat $tmp-${input_name}_input |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
    fi
  else
    cat $tmp-${input_name}_input |
    if [ -e ${pompa_dir_name}/${file_name} ] ; then
      cat ${pompa_dir_name}/${file_name} -
    else
      cat -
    fi |
    LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
    getlast 1 ${sort_key}        > $tmp-${input_name}_new
  fi
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------
#cp $tmp-* /home/hands/work/okuda

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
: ;done
#--------------------------------------------------------------
 cp -p ${pompa_dir}/USER_KIHON ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/USER_KIHON

echo "result ok" "${jyuugyouin_id}"


## 終了
rm -f $tmp-*
exit 0
