#!/bin/bash
#
# JYUUGYOUIN_MASTER_SHOUSAI.TOUROKU
# 従業員マスタ登録
#
# Written by E.Okuda (Tokyu-hands.co.jp) :20130123

#--------------------------------------------------------------
# ログ
mkdir -p /home/hands/E-LIFE/SYSTEM_SETTEI/APLOG/$(date +%Y%m%d)
exec 2> /home/hands/E-LIFE/SYSTEM_SETTEI/APLOG/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d"); set -xv

# 設定ファイル読込
source  /home/hands/E-LIFE/SYSTEM_SETTEI/CGI/SYSTEM_SETTEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
# 鈴木さん作新ロックファイル処理
source /home/hands/E-LIFE/COMMON/COMMON_001.func &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/SYSTEM_SETTEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
input_dir="${app_dir}/INPUT/${today}/$(basename ${0})"
pompa_dir="${app_dir}/POMPA/JYUUGYOUIN"
kanri_dir="/DATA/E-LIFE/SYSTEM_SETTEI/KANRI"
tbl_di="${home_dir}/E-LIFE/TBL/CONFIG"
work=${app_dir}/WORK
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  # 新ロックファイル対応
  unlock_func $tmp-target-table
#  cat $tmp-target-table |
#  while read table base ;do
#    rm -f $tmplock_dir/$base.lock
#  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------

  JYUUGYOUINID="$(nameread "JYUUGYOUINID" ${namedata})"
  ShozokuShisetsu=$(nameread "ShozokuShisetsu" $namedata)
  ShozokuTateya=$(nameread   "ShozokuTateya"   $namedata)
  ShozokuFloor=$(nameread    "ShozokuFloor"    $namedata)
  ShozokuUnit=$(nameread     "ShozokuUnit"     $namedata)
  KinmuKikanFrom=$(nameread  "KinmuKikanFrom"  $namedata | sed 's/\///g')
  KinmuKikanTo=$(nameread    "KinmuKikanTo"    $namedata | sed 's/\///g')
  JyuugyouinName=$(nameread  "JyuugyouinName"  $namedata | sed 's/ /　/g')
#  JyuugyouinName=$(nameread  "JyuugyouinName"  $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  JyuugyouinNameKana=$(nameread  "JyuugyouinNameKana" $namedata | sed 's/ /　/g')
#  JyuugyouinNameKana=$(nameread  "JyuugyouinNameKana" $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  Id=$(nameread   "JyuugyouinLoginId"   $namedata | sed 's/ //g'| sed 's/\\n/###KAIGYO###/g')
#  Id=$(nameread   "Id"   $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  Pass=$(nameread  "JyuugyouinLoginPass"  $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
#  Pass=$(nameread  "Pass"  $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
  ShozokuYakushoku1=$(nameread "ShozokuYakushoku1"    $namedata)
  ShozokuYakushoku2=$(nameread "ShozokuYakushoku2"    $namedata)
  JYUUGYOUINID=$(nameread     "JYUUGYOUINID"     $namedata)
  SenmoninNumber=$(nameread     "SenmoninNumber"     $namedata)

  [ -z "${KinmuKikanTo}" -o "${KinmuKikanTo}" = "_" ] && KinmuKikanTo="99999999"
  [ -z "${ShozokuTateya}" -o "${ShozokuTateya}" = "_" ] && ShozokuTateya="_"
  [ -z "${ShozokuFloor}" -o "${ShozokuFloor}" = "_" ] && ShozokuFloor="_"
  [ -z "${ShozokuUnit}" -o "${ShozokuUnit}" = "_" ] && ShozokuUnit="_"
  [ -z "${ShozokuYakushoku1}" -o "${ShozokuYakushoku1}" = "_" ] && ShozokuYakushoku1="_"
  [ -z "${ShozokuYakushoku2}" -o "${ShozokuYakushoku2}" = "_" ] && ShozokuYakushoku2="_"
  [ -z "${SenmoninNumber}" -o "${SenmoninNumber}" = "_" ] && SenmoninNumber="_"

#--------------------------------------------------------------
# 入力データのチェック
#
#  [ -z "${riyousha_i}" -o "${riyousha_i}" = "_" ] && error_exit "利用者を選択してください。"
  [ -z "${KinmuKikanFrom}" -o "${KinmuKikanFrom}" = "_" ] && error_exit "期間を入力してください。"
#  [ -z "${KinmuKikanTo}" -o "${KinmuKikanTo}" = "_" ] && error_exit "期間を入力してください。"
  [ "${KinmuKikanTo}" != "_" -a "${KinmuKikanFrom}" -ge "${KinmuKikanTo}" ] && error_exit "期間(自)より期間(至)は後の日付を入力してください。"

  [ -z "${JyuugyouinName}" -o "${JyuugyouinName}" = "_" -o "${JyuugyouinName}" = "　" ] && error_exit "従業員名は必須項目です。"
#  [ -z "${JyuugyouinNameKana}" -o "${JyuugyouinNameKana}" = "_" ] && error_exit "従業員名カナは必須項目です。"
  [ -z "${Id}" -o "${Id}" = "_" ] && error_exit "IDを入力してください。"
  [ -z "${Pass}" -o "${Pass}" = "_" ] && error_exit "パスワードを入力してください。"
  [ -z "${ShozokuShisetsu}" -o "${ShozokuShisetsu}" = "_" ] && error_exit "所属施設・事業所を選択してください。"
#  [ "${ShozokuYakushoku1}" = "1" -a "${ShozokuYakushoku2}" != "_" -a "${SenmoninNumber}" = "_" ] && error_exit "ケアマネを選択した場合は介護支援専門員番号してください。"
   [ -z "${SenmoninNumber}" ] && SenmoninNumber="_"
# IDのチェック
  cat ${pompa_dir}/USER_KIHON |
  awk '$1!="'${JYUUGYOUINID}'"&&$6=="'${Id}'"{print $0}' > $tmp-choufuku_data

  [ -s $tmp-choufuku_data ] && error_exit "登録済みのidは使用できません。"


# 施設所属だったら居宅情報の消去
if [ "$(echo "${ShozokuShisetsu}" | awk '{print substr($1,1,1)}')" != "1" ]; then
  ShozokuYakushoku1="_"
  ShozokuYakushoku2="_"
#  SenmoninNumber="_"
# 事業所所属だったら建屋以下情報を消去
else
  ShozokuTateya="_"
  ShozokuFloor="_"
  ShozokuUnit="_"
fi
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -n "${JYUUGYOUINID}" -a "${JYUUGYOUINID}" != "_" ] ; then
   jyuugyouin_id="$(echo "${JYUUGYOUINID}")"
else
   # 新規データならばIDをふる(利用者ID)
   ### 管理IDの発番
   # 今回取得するID数
   last_no="1"
   # 現状の最終番号
    now_last_no=$(cat ${kanri_dir}/JYUUGYOUIN_ID)
    # 今回の発番後に、数字が限度を超えないかチェック
    new_last_no=$(expr ${now_last_no} + ${last_no})

    mkdir -p ${kanri_dir}
    touch ${kanri_dir}/JYUUGYOUIN_ID
    [ -e ${kanri_dir}/JYUUGYOUIN_ID ] || echo "00001" > ${kanri_dir}/JYUUGYOUIN_ID
    # 超えてたらリセット
    [ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/JYUUGYOUIN_ID

    get_no ${last_no} ${kanri_dir}/JYUUGYOUIN_ID > $tmp-id_all

    # この場合取得するのは一つなのでそのまま変数に
    jyuugyouin_id="$(cat $tmp-id_all)"
    #data_id="${today}${new_no}"
fi

#--------------------------------------------------------------

# 更新テーブル一覧
#
# 従業員マスタ
# 従業員基本マスタ
# 従業員所属施設マスタ
#--------------------------------------------------------------

  #####################
  # 1:従業員マスタ
  #####################

# 追加データの作成

  echo "${jyuugyouin_id}" "${JyuugyouinName}" "${JyuugyouinNameKana}" "1" "${cur_time}" "${USERID}">  $tmp-jyuugyouin_master_input
# 1:従業員ID 2:従業員名 3:従業員名カナ 4:削除フラグ 5:更新日時 7:更新者

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

  #####################
  # 2:従業員所属施設マスタ
  #####################

# 追加データの作成

  echo "${jyuugyouin_id}" "${ShozokuShisetsu}" "${ShozokuTateya}" "${ShozokuFloor}" "${ShozokuUnit}" "${ShozokuYakushoku1}" "${ShozokuYakushoku2}" "${SenmoninNumber}" "1" "${cur_time}" "${USERID}">  $tmp-jyuugyouin_shisetsu_input
# 1:従業員ID   2:施設ID 3:建屋ID             4:フロア     5:ユニットID
# 6:事業所詳細 7:役職   8:介護支援専門員番号 9:削除フラグ 10:更新日時
# 11:更新者

# 追加データの作成(パスワード変更期間)
echo "${jyuugyouin_id} ${henko_kikan} 1 ${cur_time} ${USERID}" > $tmp-henko_kikan_input

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

  #######################
  # 3:従業員基本マスタ
  #######################

  cat $tmp-jyuugyouin_master_input |
  self 1/3 |
# 1:従業員ID 2:従業員名 3:従業員名カナ

  awk '{print $0,"'${KinmuKikanFrom}'","'${KinmuKikanTo}'","'${Id}'","'${Pass}'","1","'${cur_time}'","'${USERID}'"}' > $tmp-jyuugyouin_kihon_input
# 1:従業員ID 2:従業員名 3:従業員名カナ 4:勤務期間FROM 5:勤務期間TO
# 6:ID       7:PASS     8:削除フラグ   9:更新日時     10:UserID

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

  #######################
  # 4:兼務施設マスタ
  #######################

if [ ! -z "${KenmuShisetsu}" -a "${KenmuShisetsu}" != "_" ] ; then
  # 追加データの作成
  echo "${jyuugyouin_id}" "${KenmuShisetsu}" "${KenmuTateya}" "${KenmuFloor}" "${KenmuUnit}" "${KenmuYakushoku1}" "${KenmuYakushoku2}" "${KenmuSenmoninNumber}" "1" "${cur_time}" "${USERID}" >  $tmp-kenmu_shisetsu_input
# 1:従業員ID   2:施設ID 3:建屋ID             4:フロア     5:ユニットID
# 6:事業所詳細 7:役職   8:介護支援専門員番号 9:削除フラグ 10:更新日時
# 11:更新者

else
  # 兼務施設が設定してあれば削除
  awk '$1=="'${jyuugyouin_id}'"&&$(NF-2)!="9"{print $0}' ${pompa_dir}/EXTRA_USER_SHISETSU  > $tmp-kenmu_ari

  if [ -s "$tmp-kenmu_ari" ] ; then
    cat $tmp-kenmu_ari |
    delf NF-2/NF  |
    awk '{print $0,"9","'${cur_time}'","'${USERID}'"}' > $tmp-kenmu_shisetsu_input
  else
    :
  fi
  
fi


### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
JYUUGYOUIN/USER_MASTER USER_MASTER 0
JYUUGYOUIN/USER_SHISETSU USER_SHISETSU 0
JYUUGYOUIN/USER_KIHON USER_KIHON 0
JYUUGYOUIN/USER_PASS_KIKAN USER_PASS_KIKAN 0
FIN
# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

[ -s $tmp-kenmu_shisetsu_input ] && echo "JYUUGYOUIN/EXTRA_USER_SHISETSU EXTRA_USER_SHISETSU 0" >> $tmp-target-table

## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
jyuugyouin_master USER_MASTER 1 5 6 ${pompa_dir} ${input_dir}
jyuugyouin_shisetsu USER_SHISETSU 1 10 11 ${pompa_dir} ${input_dir}
jyuugyouin_kihon USER_KIHON 1 9 10 ${pompa_dir} ${input_dir}
henko_kikan USER_PASS_KIKAN 1 4 5 ${pompa_dir} ${input_dir}
FIN

[ -s $tmp-kenmu_shisetsu_input ] && echo "kenmu_shisetsu EXTRA_USER_SHISETSU 1 10 11 ${pompa_dir} ${input_dir}" >> $tmp-koushin_pompa

#--------------------------------------------------------------

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_dir}/${file_name} ${pompa_dir}/back/${file_name}.${today}
done

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
# 新ロック処理
filelock_func $tmp-target-table 1 3 10
if [ $? -ne 0 ]; then
   #エラー時処理　※ロックファイル未作成なのでここではロック解除しない。
   error_exit "ロック処理失敗"
fi
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  if [ $file_name = "USER_KIHON" ];then
    if [ -e ${pompa_dir_name}/${file_name} ] ; then
      awk '{if($1=="'${jyuugyouin_id}'"){$(NF-2)=9};print}' ${pompa_dir_name}/${file_name} |
      cat - $tmp-${input_name}_input |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
    else
      cat $tmp-${input_name}_input |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
    fi
  elif [ $file_name = "EXTRA_USER_SHISETSU" ];then
    if [ -e ${pompa_dir_name}/${file_name} ] ; then
      awk '$1!="'${jyuugyouin_id}'"{print}' ${pompa_dir_name}/${file_name} > $tmp-nokoshi
      awk '$1=="'${jyuugyouin_id}'"{print}' ${pompa_dir_name}/${file_name} |
      cat - $tmp-${input_name}_input |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
      getlast 1 ${sort_key}          > $tmp-nokosanai
      cat $tmp-nokoshi $tmp-nokosanai |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
    else
      cat $tmp-${input_name}_input |
      LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
    fi
  else
    cat $tmp-${input_name}_input |
    if [ -e ${pompa_dir_name}/${file_name} ] ; then
      cat ${pompa_dir_name}/${file_name} -
    else
      cat -
    fi |
    LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
    getlast 1 ${sort_key}        > $tmp-${input_name}_new
  fi
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------
#cp $tmp-* /home/hands/work/okuda

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
# 新ロック処理
unlock_func $tmp-target-table
#cat $tmp-target-table |
#while read table base ;do
#  rm -f $tmplock_dir/$base.lock
#: ;done
#--------------------------------------------------------------
 cp -p ${pompa_dir}/USER_MASTER ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/USER_MASTER
 cp -p ${pompa_dir}/USER_SHISETSU ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU
 cp -p ${pompa_dir}/USER_KIHON ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/USER_KIHON
 cp -p ${pompa_dir}/USER_PASS_KIKAN ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/USER_PASS_KIKAN
# cp -p  ${pompa_dir}/EXTRA_USER_SHISETSU ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/EXTRA_USER_SHISETSU
# 園田さん要暫定対応
 echo "00011 0006 01 _ _ _ _ _ 1 20150327114742 00077" > $tmp-extra_user
 cat ${pompa_dir}/EXTRA_USER_SHISETSU $tmp-extra_user |
 LANG=C sort -k1,2 > ${home_dir}/E-LIFE/TBL/JYUUGYOUIN_MASTER/EXTRA_USER_SHISETSU

echo "result ok" "${jyuugyouin_id}"


## 終了
rm -f $tmp-*
exit 0
