#!/bin/bash
#
# KYOTAKU_JIGYOUSHO_MASTER.TOUROKU : 居宅訪問サービス事業所登録
#
# Usage : KYOTAKU_JIGYOUSHO_MASTER.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/SYSTEM_SETTEI/CGI/SYSTEM_SETTEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $lock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1


# デフォルト値セット
KyotakuJigyoushoID="_"
delete="1"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"

#--------------------------------------------------------------


#--------------------------------------------------------------
# 居宅事業所ＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ -z "${KyotakuJigyoushoID}" -o "${KyotakuJigyoushoID}" = "_" ] ; then
last_no="1"
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/KyotakuJigyoushoID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/KyotakuJigyoushoID ] || echo "1001" > ${kanri_dir}/KyotakuJigyoushoID
# 超えてたらリセット
[ ${new_last_no} -gt 9999 ] && echo "1001" > ${kanri_dir}/KyotakuJigyoushoID
get_no ${last_no} ${kanri_dir}/KyotakuJigyoushoID > $tmp-id_all

# この場合取得するのは一つなのでそのまま変数に
KyotakuJigyoushoID=$(cat $tmp-id_all)
fi
#---------------------------------------------------------------

# データ作成
# 1:居宅事業所ID     2:居宅事業所名 3:電話番号  4:住所   5:口座金融機関
# 6:口座金融機関支店 7:口座種類     8:口座番号  9:口座名 10:郵便番号
# 11:有効フラグ      12:処理時刻    13:ユーザID
echo "${KyotakuJigyoushoID}" "${jigroupname}" "${telno}" "${address}" "${slKinyuKikan}" \
"${slKinyuShiten}" "${KouzaShurui}" "${KouzaNumber}" "${KouzaName}" "${postno}" \
"${delete}" "${sdaytime}" "${userid}" > ${tmp}-kyotaku_jigyousho_input

cp ${tmp}-kyotaku_jigyousho_input ${tmp}-kyotaku_jigyousho2_input

cp ${tmp}-kyotaku_jigyousho_input $work_dir/kyotaku_jigyousho_input

# 委託者番号
echo "${KyotakuJigyoushoID}" "${ItakushaBangou}" "_" "_" "_" "_" "_" "${delete}" "${sdaytime}" "${userid}" > ${tmp}-kyotaku_itakushabangou_input

cp ${tmp}-kyotaku_itakushabangou_input ${tmp}-kyotaku_itakushabangou2_input

# サービス数
seq $ServiceNum  |
while read servicenum ; do
   snum=$((servicenum-1))
   servicetype=$(nameread ServiceType$snum $namedata | head -1)
   jigyousha=$(nameread Jigyousha$snum $namedata | head -1)
# 1:居宅事業所ID 2:事業所ID 3:サービスタイプ 4:有効フラグ 5:処理時刻
# 6:ユーザID
   echo "$KyotakuJigyoushoID" "$jigyousha" "$servicetype" "${delete}" "${sdaytime}" "${userid}" >> ${tmp}-service_jigyousha_input
done

cp ${tmp}-service_jigyousha_input $work_dir/service_jigyousha_input


#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER JIGYOUSHO_GROUP_MASTER
JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER JIGYOUSHO_GROUP_ITAKUSHABANGOU
FIN

input_detail_dir=JIGYOUSHO_GROUP_MASTER

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
kyotaku_jigyousho JIGYOUSHO_GROUP_MASTER 1 12 13 ${home_dir}/TBL/JIGYOUSHO_MASTER ${input_dir}
kyotaku_jigyousho2 JIGYOUSHO_GROUP_MASTER 1 12 13 ${pompa_dir}/JIGYOUSHO_MASTER ${input_dir}
kyotaku_itakushabangou JIGYOUSHO_GROUP_ITAKUSHABANGOU 1 9 10 ${home_dir}/TBL/JIGYOUSHO_MASTER ${input_dir}
kyotaku_itakushabangou2 JIGYOUSHO_GROUP_ITAKUSHABANGOU 1 9 10 ${pompa_dir}/JIGYOUSHO_MASTER ${input_dir}
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
service_jigyousha JIGYOUSHO_GROUP_HIMODUKE_MASTER 1 5 6 ${home_dir}/TBL/JIGYOUSHO_MASTER ${input_dir}
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 3 -l 10 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_exit "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'${KyotakuJigyoushoID}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
