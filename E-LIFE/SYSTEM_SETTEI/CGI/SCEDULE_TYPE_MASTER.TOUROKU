#!/bin/bash
#
# SCEDULE_TYPE_MASTER.TOUROKU : 居宅訪問サービス事業所登録
#
# Usage : SCEDULE_TYPE_MASTER.TOUROKU
#
# Written by K.Aoyama(HANDS.LAB)


#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/SYSTEM_SETTEI/CGI/SYSTEM_SETTEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f  $tmp-*


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $lock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#---- 処理日時 ----
sdaytime=$(date +%Y%m%d%H%M%S)


# 引数設定
namedata=$1

work="/home/hands/E-LIFE/SYSTEM_SETTEI/WORK"
# デフォルト値セット
CategoryID="_"
delete="1"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"

#--------------------------------------------------------------


# データ作成
echo ${ScheduleTypeID} |
sed 's/,/ /g'    > $tmp-schedule_id

echo ${ScheduleType} |
sed 's/,/ /g'    > $tmp-schedule

echo ${ScheduleTypeColor} |
sed 's/,/ /g'    > $tmp-schedule_color

cat $tmp-schedule_id $tmp-schedule $tmp-schedule_color |
tateyoko         |
# 1:スケジュールタイプID 2:スケジュールタイプ 3:色 4:有効フラグ 5:処理時間
# 6:ユーザID
awk '{print $0,"'$schedule_shurui'","'${shisetsu}'","1","'${sdaytime}'","'${userid}'"}' > $tmp-schedule1

cp $tmp-schedule1 $work_dir/scedule_type_check

# スケジュールタイプ名重複チェック
if [ -s ${home_dir}/TBL/SCHEDULE_MASTER/SCEDULE_TYPE_MASTER ] ; then
  awk '$4!="01"' $tmp-schedule1 |
  self 2 5 |
  LANG=C sort -k1,1 > $tmp-scheduletype_nocare_check

  sm2 +count 1 1 2 2 $tmp-scheduletype_nocare_check |
  awk '$2>"1"' > $tmp-nocare_screen_dblcheck

  awk '$4=="01"' $tmp-schedule1 |
  self 2 5 |
  LANG=C sort -k1,1 > $tmp-scheduletype_care_check

  sm2 +count 1 1 2 2 $tmp-scheduletype_care_check |
  awk '$2>"1"' > $tmp-care_screen_dblcheck

  cp $tmp-scheduletype_care_check $work_dir/scedule_care_type_check

  awk '$(NF-2)!="9"&&$4!="01"&&$4!="'$schedule_shurui'"&&$5=="'${shisetsu}'"' ${home_dir}/TBL/SCHEDULE_MASTER/SCEDULE_TYPE_MASTER |
  self 2               |
  LANG=C sort -k1,1      |
  join0 key=1 $tmp-scheduletype_nocare_check > $tmp-double_nocare_check

  awk '$(NF-2)!="9"&&$4=="'$schedule_shurui'"&&$5=="'${shisetsu}'"' ${home_dir}/TBL/SCHEDULE_MASTER/SCEDULE_TYPE_MASTER |
  self 2               |
  LANG=C sort -k1,1      |
  tee $work_dir/schedule_type_master_check |
  join2 +"_" key=1 - $tmp-scheduletype_care_check |
  sm2 1 1 2 2 |
  self 2 |
  LANG=C sort -k1,1 -u > $tmp-double_care_check

  [ $(gyo $tmp-double_nocare_check) -gt 0 -o $(gyo $tmp-double_care_check) -gt 1 ] && error_exit "スケジュールタイプ名が重複しています"
  [ $(gyo $tmp-care_screen_dblcheck) -gt 0 -o $(gyo $tmp-nocare_screen_dblcheck) -gt 0 ] && error_exit "スケジュールタイプ名が重複しています"
  
fi





cat $tmp-schedule1           |
awk '$1=="_"'                           > $tmp-schedule_new

cat $tmp-schedule1           |
awk '$1!="_"'                           > $tmp-schedule_upd

new_schedule_num=$(gyo $tmp-schedule_new)

#--------------------------------------------------------------
# スケジュールタイプＩＤがない場合（登録）ならデータIDをふる
### 管理IDの発番
# 今回取得するID数
if [ $new_schedule_num -gt 0 ] ; then
last_no="${new_schedule_num}"
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/ScheduleTypeID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/ScheduleTypeID ] || echo "00001" > ${kanri_dir}/ScheduleTypeID
# 超えてたらリセット
[ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/ScheduleTypeID
get_no ${last_no} ${kanri_dir}/ScheduleTypeID > $tmp-id_all

fi

#---------------------------------------------------------------

ycat $tmp-id_all $tmp-schedule_new             |
self 1 3/NF                                               > ${tmp}-schedule_new2

cat $tmp-schedule_upd ${tmp}-schedule_new2  |
LANG=C sort -k1,1          > ${tmp}-schedule_input

cp ${tmp}-schedule_input $work_dir/schedule_input

cp ${tmp}-schedule_input ${tmp}-schedule2_input

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
SCEDULE_TYPE_MASTER SCEDULE_TYPE_MASTER
FIN


# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時>間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
schedule SCEDULE_TYPE_MASTER 1 7 8 ${home_dir}/TBL/SCHEDULE_MASTER ${input_dir}
schedule2 SCEDULE_TYPE_MASTER 1 7 8 ${pompa_dir}/SCHEDULE_MASTER ${input_dir}
FIN

input_detail_dir=SCHEDULE_TYPE_MASTER

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-add_pompa
FIN


#--------------------------------------------------------------
# データロック
#$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
#if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
#fi
cat $tmp-target-table |
while read table base ;do
   mkdir -p $tmplock_dir/$table
   lockfile -1 -r 3 -l 10 $tmplock_dir/$table/$base.lock
   [ $? -ne 0 ] && :> $tmp-err
   [ -e $tmp-err ] && break;
: ; done

[ -e $tmp-err ] && error_exit "ロック処理に失敗しました。"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
#    cat <(gawk '$4!="'$schedule_shurui'"||$5!="'$shisetsu'"{print $0}' ${pompa_dir_name}/${file_name}) -
    cat <(awk '{if($4=="'$schedule_shurui'"&&$5=="'$shisetsu'"){$(NF-2)="9"};print $0}' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  self 5 4 0                                          |
  LANG=C sort -k1,3 -k9,9 |
  getlast 1 3        |
  delf 1 2           > $tmp-${input_name}_new
done
#--------------------------------------------------------------

cp $tmp-koushin_pompa ${work}/koushin_pompa

# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 追加版作成
# POMPAと指定されたキー項目をつかってキー項目のレコードを入れ替える
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
#  cp -p $tmp-${input_name}_input ${input_name}_input
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat <(gawk '$1!="'${KyotakuJigyoushoID}'"' ${pompa_dir_name}/${file_name}) -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} > $tmp-${input_name}_new
#  cp -p $tmp-${input_name}_new ${input_name}_new
done
#--------------------------------------------------------------

# 列数チェック
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


#--------------------------------------------------------------
# 更新
cat $tmp-add_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/${input_detail_dir}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${input_detail_dir}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$table/$base.lock
: ;done
#--------------------------------------------------------------

echo "result ok"

rm -f ${tmp}-*
exit 0
