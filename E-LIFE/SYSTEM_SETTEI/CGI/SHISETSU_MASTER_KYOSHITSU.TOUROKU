#!/bin/bash
#
# SHISETSU_MASTER_KYOSHITSU.TOUROKU : 施設マスタ居室登録
#
# Written by S.Otsubo

#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/SYSTEM_SETTEI/CGI/SYSTEM_SETTEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*

# 変数の定義
namedata=$1


#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})

sdaytime=$(date +%Y%m%d%H%M%S)
#--------------------------------------------------------


#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo -e 'Content-type:text/plain; \n\n' |
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat ${tmp}-taisyou |
  self 1 |
  while read File;do
    rm -f ${home_dir}/TBL/SHISETSU_MASTER/${File}.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#--------------------------------------------------------------
# 変数をinputに入れるものだけ抽出し整える

# 抽出
grep -E "^teiin_|^kyoshitsu1_|^kyoshitsu2_" ${namedata} |
# 区切り文字のアンスコのみ変換
fsed -e 's/_/ /1' |
# nullを_に変換
sed -e 's/null/_/g' > ${tmp}-hensuu_henkan
# 1:データタイプ 2:施設ID         3:建屋ID 4:フロア 5:ユニット
# 6:部屋番号     7:データないよう
# -
# 変数を整えたデータの列確認
rm $tmp-err
[ "$(retu ${tmp}-hensuu_henkan )" != "7" ] && : > $tmp-err
[ "$(retu ${tmp}-hensuu_henkan | gyo)" != "1" ] && : > $tmp-err
[ "$(awk 'NF!="7"' ${tmp}-hensuu_henkan | gyo)" != "0" ] && : > $tmp-err
[ -e ${tmp}-err ] && error_exit "変数列エラー"
# -

# データ内容の確認
rm ${tmp}-err
cat ${tmp}-hensuu_henkan |
while read datatype s_id t_id f_id u_id r_id data; do
  case "${datatype}" in
    # -----------------
    # 定員
    teiin )
      # 定員は必須項目半角で0以上の数字
      [[ "${data}" =~ [123456789] ]] || echo "部屋番号${r_id}の定員は半角数字で0以上を入力してください" > ${tmp}-err
      [ -e ${tmp}-err ] && break;
    ;;
    # -----------------
    # -----------------
#    # 居室タイプ1
#    kyoshitsu1 )
#      # なにかしら入力して
#      [ "${data}" == "_" ] && echo "部屋番号${r_id}の居室タイプ1は必須項目です" > ${tmp}-err
#      [ -e ${tmp}-err ] && break;
#    ;;
#    # -----------------
#    # -----------------
#    # 居室タイプ2
#    kyoshitsu2 )
#      # なにかしら入力して
#      [ "${data}" == "_" ] && echo "部屋番号${r_id}の居室タイプ2は必須項目です" > ${tmp}-err
#      [ -e ${tmp}-err ] && break;
#    ;;
    # -----------------
  esac
done
# エラーファイルがあったら終了
[ -e ${tmp}-err ] && error_exit "$(cat ${tmp}-err)"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新対象の設定
cat << FIN > ${tmp}-taisyou
SHISETSU_TATEYA_FLOOR_UNIT_ROOM 9 10 1 5 11
FIN
# 1:テーブル名 2:削除フラグフィールド 3:更新時間フィールド 4:キーFROM 5:キーTO
# 6:列数

# SHISETSU_TATEYA_FLOOR_UNIT_ROOM
# 1:施設ID    2:建屋ID      3:フロア      4:ユニットID 5:居室
# 6:居室定員  7:居室タイプ1 8:居室タイプ2 9:削除フラグ 10:更新日時
# 11:ユーザID
#--------------------------------------------------------------

#--------------------------------------------------------
# 本日のinputディレクトリ作成

[ -e ${input_dir}/${today} ] || mkdir ${input_dir}/${today}
#--------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"

#--------------------------------------------------------------

# ------------------------------------------
# 更新データの作成

# ロックファイル作成
cat ${tmp}-taisyou |
self 1 |
while read File ; do
  lockfile -1 -r 3 -l 10 ${home_dir}/TBL/SHISETSU_MASTER/${File}.LOCK
  [ "${?}" != "0" ] && : > ${tmp}-err
done
[ -e ${tmp}-err ] && error_unlock "再度登録してください"


# データの作成
# 繰り返し処理で作成
# -
# ${tmp}-hensuu_henkan
# 1:データタイプ 2:施設ID         3:建屋ID 4:フロア 5:ユニット
# 6:部屋番号     7:データないよう

# input
self 2/6 1 NF ${tmp}-hensuu_henkan |
# 1:施設ID       2:建屋ID         3:フロア 4:ユニット 5:部屋番号
# 6:データタイプ 7:データないよう
# -
# ソートの都合上データタイプを番号に変換する
fsed -e 's/teiin/1/6' |
fsed -e 's/kyoshitsu1/2/6' |
fsed -e 's/kyoshitsu2/3/6' |
LANG=C sort |
delf 6 |
# 1:施設ID         2:建屋ID 3:フロア 4:ユニット 5:部屋番号
# 6:データないよう
# -
# キーでよこ展開
yarr num=5 |
# 1:施設ID 2:建屋ID      3:フロア      4:ユニット 5:部屋番号
# 6:定員   7:居室タイプ1 8:居室タイプ2
#　-
# 共通項目の付与
awk '{print $0,"1","'${sdaytime}'","'${userid}'"}' - > ${tmp}-input_SHISETSU_TATEYA_FLOOR_UNIT_ROOM
# 1:施設ID    2:建屋ID      3:フロア      4:ユニット   5:部屋番号
# 6:定員      7:居室タイプ1 8:居室タイプ2 9:削除フラグ 10:更新日時
# 11:ユーザID

# pompa
cat ${tmp}-taisyou |
delf 6 |
while read File d_flg u_flg s_flg_from s_flg_to ; do
  cat ${home_dir}/TBL/SHISETSU_MASTER/${File} ${tmp}-input_${File} |
  LANG=C sort -k${s_flg_from},${s_flg_to} -k${u_flg},${u_flg} |
  getlast ${s_flg_from} ${s_flg_to} > ${tmp}-pompa_${File}
done

# 列チェック
cat  ${tmp}-taisyou |
self 1 6 |
while read File retu_no; do
  [ "$(retu ${tmp}-input_${File})" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu ${tmp}-input_${File} | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' ${tmp}-input_${File} | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"


# 更新
cat ${tmp}-taisyou |
self 1 |
while read Name ; do
  # input
  cp -p ${tmp}-input_${Name} ${input_dir}/${today}/$(basename ${0}).$(date +%Y%m%d%H%M%S).${userid}.${HOSTNAME}
  [ "${?}" != "0" ] && : > ${tmp}-err
  # pompa
  cp -p ${tmp}-pompa_${Name} ${home_dir}/TBL/SHISETSU_MASTER/${Name}
  [ "${?}" != "0" ] && : > ${tmp}-err
done
[ -e ${tmp}-err ] && error_unlock "更新に失敗しました"


# ロックファイル削除
cat ${tmp}-taisyou |
self 1 |
while read File; do
  rm ${home_dir}/TBL/SHISETSU_MASTER/${File}.LOCK
done
# ------------------------------------------

# ここまできたらokかえす
echo "result ok"

rm -f ${tmp}-*
exit 0
