#!/bin/bash
#
# JOURNAL_KENSAKU.DISPLAY
# HDBジャーナル検索　表示用CGI
#
# Written by T.Osako (Tokyu-hands.co.jp) :20100615

#--------------------------------------------------------------
# ログ
source /home/hands/BUSINESS_AIRPORT/SAMPLE/CGI/SAMPLE.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d%H%M%S).$$ ; set -xv
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $lock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
USER_NAME=$(awk '$1=="'${USER_ID}'"{print $2}' ${tbl_dir}/JYUGYOIN_NAME)
#--------------------------------------------------------------

#--------------------------------------------------------------
# 入力データのチェック
### 内容に応じてチェックをしてください
[ -z "${INPUT_TEXT1}" -o "${INPUT_TEXT1}" = "_" ] && error_exit "データ不正"
#--------------------------------------------------------------

#--------------------------------------------------------------
# OKならデータIDをふる
### 管理IDの発番
# 今回取得するID数
last_no="1"
# 現状の最終番号
now_last_no=$(cat ${kanri_dir}/SAMPLE_ID)
# 今回の発番後に、数字が限度を超えないかチェック
new_last_no=$(expr ${now_last_no} + ${last_no})

[ -e ${kanri_dir}/SAMPLE_ID ] || echo "001" > ${kanri_dir}/SAMPLE_ID
# 超えてたらリセット
[ ${new_last_no} -gt 999 ] && echo "001" > ${kanri_dir}/SAMPLE_ID
get_no ${last_no} ${kanri_dir}/SAMPLE_ID > $tmp-id_all

# この場合取得するのは一つなのでそのまま変数に
new_no=$(cat $tmp-id_all)
data_id="${today}${new_no}"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新データを作成
### INPUTデータの作成
### 後で見てわかりやすいように書く
echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
awk '{$1="'${data_id}'";
      $3="'${USER_ID}'";
      $4="'${USER_NAME}'";
      $5="'${cur_time}'";
      $6="'${USER_ID}'";
      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
SAMPLE_DATA   SAMPLE_DATA
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所
## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
sample SAMPLE_DATA 1 5 6 ${pompa_dir} ${input_dir}
FIN
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
[ -e ${tmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $lock_dir/$base.lock
: ;done
#--------------------------------------------------------------



## 終了
rm -f $tmp-*
echo "result ok"
exit 0
