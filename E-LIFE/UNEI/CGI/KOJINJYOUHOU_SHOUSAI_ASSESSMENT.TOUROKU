#!/bin/bash
#
# KOJINJYOUHOU_SHOUSAI_SONOTA.TOUROKU
# その他情報登録(加算給付同意)
#
# Written by E.Okuda 2013/12/26

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/UNEI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d"); set -xv

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/UNEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
pompa_dir="${app_dir}/POMPA/RIYOUSHA"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/UNEI/KANRI/RIYOUSHA"
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------
#--------------------------------------------------------------
# 利用者データ
  RIYOUSHAID="$(nameread "RIYOUSHAID" ${namedata})"
  ASSESSMENTID="$(nameread "ASSESSMENTID" ${namedata})"
  Shisetsu="$(nameread "shisetsu" ${namedata})"
  USERID="$(nameread "USERID" ${namedata})" 

# 利用者IDがなければ不正
  [ -z "${RIYOUSHAID}" -o "${RIYOUSHAID}" = "_" ] && error_exit "入居者を選択し、検索ボタンを押してください"


#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新テーブル一覧
#
# 利用者緊急時個人情報テーブル
#--------------------------------------------------------------
  #####################
  # 利用者緊急時個人情報テーブル
  #####################
KOUSHINBI="$(nameread "KOUSHINBI"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
KOUSHINSHA="$(nameread "KOUSHINSHA"   $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a4="$(nameread  "SeikatsuKishou"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a5="$(nameread  "SeikatsuAsa"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a6="$(nameread  "SeikatsuHiru"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a7="$(nameread  "SeikatsuYoru"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a8="$(nameread  "SeikatsuShuushin"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a9="$(nameread  "SeikatsuNyuuyoku"     $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a10="$(nameread "SeikatsuGozen"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a11="$(nameread "SeikatsuGogo"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a12="$(nameread "SeikatsuSonota"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a13="$(nameread "Event"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a14="$(nameread "Shumi"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a15="$(nameread "Tokugi"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a16="$(nameread "Seikaku"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a17="$(nameread "Novelist"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a18="$(nameread "Book"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a19="$(nameread "Actor"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a20="$(nameread "Movie"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a21="$(nameread "Singer"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
a22="$(nameread "Song"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a23="$(nameread "TvRadio"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a24="$(nameread "MachiTocchi"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a25="$(nameread "FavoriteFood"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
a26="$(nameread "HateFood"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"
a27="$(nameread "FavoriteDrink"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"      
a28="$(nameread "HateDrink"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a29="$(nameread "Alcohol"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"    
a30="$(nameread "AlcoholShurui"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"    
a31="$(nameread "TabakoNumber"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a32="$(nameread "TabakoBikou"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a33="$(nameread "Kiraukoto"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a34="$(nameread "TeikiHeader1"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"     
a35="$(nameread "Teiki1"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a36="$(nameread "TeikiHeader2"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"       
a37="$(nameread "Teiki2"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"    
a38="$(nameread "TeikiHeader3"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"      
a39="$(nameread "Teiki3"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"    
a40="$(nameread "TeikiHeader4"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
a41="$(nameread "Teiki4"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')" 
a42="$(nameread "TeikiHeader5"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"     
a43="$(nameread "Teiki5"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"    
a44="$(nameread "TeikiHeader6"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a45="$(nameread "Teiki6"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
a46="$(nameread "TeikiHeader7"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"   
a47="$(nameread "Teiki7"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
a48="$(nameread "Seikatsureki"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"  
a49="$(nameread "Kazoku"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"    
a50="$(nameread "NyuukyonoKikkake"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"     
  # 追加データの作成

echo  "${RIYOUSHAID}" "${Shisetsu}" "${a4}" "${a5}" "${a6}" "${a7}" "${a8}" "${a9}" "${a10}" \
      "${a11}" "${a12}" "${a13}" "${a14}" "${a15}" "${a16}" "${a17}" "${a18}" "${a19}" "${a20}" \
      "${a21}" "${a22}" "${a23}" "${a24}" "${a25}" "${a26}" "${a27}" "${a28}" "${a29}" "${a30}" \
      "${a31}" "${a32}" "${a33}" "${a34}" "${a35}" "${a36}" "${a37}" "${a38}" "${a39}" "${a40}" \
      "${a41}" "${a42}" "${a43}" "${a44}" "${a45}" "${a46}" "${a47}" "${a48}" "${a49}" "${a50}" \
      "1" "${cur_time}" "${USERID}"  |
      sed 's/ _ / ###KARA### /g'     |
      sed 's/ _ / ###KARA### /g'     > $tmp-data

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

# 後から追加された入力項目対応（2015/02/05）
a51="$(nameread "BikouRan"    $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')"

echo  "${RIYOUSHAID}" "${Shisetsu}" "${a51}" "_" "_" "_" "_" "_" "_" "_" "_" "_" "_" \
      "_" "_" "_" "_" "_" "_" "_" "_" "_" "_" \
      "1" "${cur_time}" "${USERID}"  |
      sed 's/ _ / ###KARA### /g'     |
      sed 's/ _ / ###KARA### /g'     > $tmp-data2

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

# 追加データがあったらアセスメントIDを初版する
# →登録だったら追加するように変更
#if [ -s $tmp-data ] ; then
if [ "$MODE" = "touroku" -a -s $tmp-data ] ; then
  last_no="1"

  mkdir -p ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID
  [ -s ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID/${RIYOUSHAID} ] || echo "001" > ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID/${RIYOUSHAID}

  get_no ${last_no} ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID/${RIYOUSHAID} > $tmp-assessmentid
  ASSESSMENTID="$(cat $tmp-assessmentid)"

  awk '{print $0,"'${ASSESSMENTID}'"}' $tmp-data |
  self 1 NF 2/NF-1                               > $tmp-riyousha_assessment_input

  # 後から追加された入力項目対応（2015/02/05）
  awk '{print $0,"'${ASSESSMENTID}'"}' $tmp-data2 |
  self 1 NF 2/NF-1                               > $tmp-riyousha_assessment_additional_input
elif [ "$MODE" = "koushin" -a -s $tmp-data ] ; then
  if [ -z "${Rireki}" -o "${Rireki}" = "_" ] ; then
     last_no="1"

     mkdir -p ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID
     [ -s ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID/${RIYOUSHAID} ] || echo "001" > ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID/${RIYOUSHAID}

     get_no ${last_no} ${kanri_dir}/RIYOUSHA_ASSESSMENT_ID/${RIYOUSHAID} > $tmp-assessmentid
     Rireki="$(cat $tmp-assessmentid)"
  fi
  awk '{print $0,"'${Rireki}'"}' $tmp-data |
  self 1 NF 2/NF-1                               > $tmp-riyousha_assessment_input

  # 後から追加された入力項目対応（2015/02/05）
  awk '{print $0,"'${Rireki}'"}' $tmp-data2 |
  self 1 NF 2/NF-1                               > $tmp-riyousha_assessment_additional_input
  ASSESSMENTID=$Rireki
else
  error_exit "データ取得に失敗しました。"
fi

### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |

### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新処理
mkdir -p ${pompa_dir}/RIYOUSHA_ASSESSMENT/${RIYOUSHAID}

# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RIYOUSHA_ASSESSMENT/${RIYOUSHAID}/${RIYUSHAID}_${ASSESSMENTID}_ASSESSMENT ${RIYOUSHAID}_${ASSESSMENTID}_ASSESSMENT
RIYOUSHA_ASSESSMENT/${RIYOUSHAID}/${RIYUSHAID}_${ASSESSMENTID}_ASSESSMENT_ADDITIONAL ${RIYOUSHAID}_${ASSESSMENTID}_ASSESSMENT_ADDITIONAL
FIN

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
riyousha_assessment ${RIYOUSHAID}_${ASSESSMENTID}_ASSESSMENT 2 52 53 ${pompa_dir}/RIYOUSHA_ASSESSMENT/${RIYOUSHAID} ${input_dir}
riyousha_assessment_additional ${RIYOUSHAID}_${ASSESSMENTID}_ASSESSMENT_ADDITIONAL 2 26 27 ${pompa_dir}/RIYOUSHA_ASSESSMENT/${RIYOUSHAID} ${input_dir}
FIN
#--------------------------------------------------------------

cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_dir}/${file_name} ${pompa_dir}/back/${file_name}.${today}
done

#cp $tmp-* /home/hands/work/okuda
#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
  # エラー（ロックに失敗）
  error_unlock "ロック処理失敗"
  ## error_exit ではなく error_unlock である点に注意！
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/RIYOUSHA

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/RIYOUSHA/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
: ;done
#--------------------------------------------------------------
mkdir -p /DATA/E-LIFE/UNEI/RIYOUSHA/RIYOUSHA_ASSESSMENT/${RIYOUSHAID}
cp -p ${pompa_dir}/RIYOUSHA_ASSESSMENT/${RIYOUSHAID}/${RIYOUSHAID}_${ASSESSMENTID}_ASSESSMENT /DATA/E-LIFE/UNEI/RIYOUSHA/RIYOUSHA_ASSESSMENT/${RIYOUSHAID}
cp -p ${pompa_dir}/RIYOUSHA_ASSESSMENT/${RIYOUSHAID}/${RIYOUSHAID}_${ASSESSMENTID}_ASSESSMENT_ADDITIONAL /DATA/E-LIFE/UNEI/RIYOUSHA/RIYOUSHA_ASSESSMENT/${RIYOUSHAID}

echo "result touroku_ok"


## 終了
rm -f $tmp-*
exit 0
