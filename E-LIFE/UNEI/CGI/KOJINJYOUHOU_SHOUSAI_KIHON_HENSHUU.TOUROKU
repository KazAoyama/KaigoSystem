#!/bin/bash
#
# KOJINJYOUHOU_SHOUSAI_KIHON_HENSHUU.TOUROKU
# 個人情報詳細　基本編集タブ　登録
#
# Written by E.Okuda 20140526

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/UNEI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d%H%M%S"); set -xv

# 設定ファイル読込
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
home_dir="/home/hands"
app_dir="${home_dir}/E-LIFE/UNEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
pompa_dir="${app_dir}/POMPA/RIYOUSHA"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/UNEI/KANRI/RIYOUSHA"
data_dir="/DATA/E-LIFE/UNEI/RIYOUSHA"
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
#  cp -p $tmp-* /home/hands/work/okuda
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#################################################################################################
# 変更するのはここから
#################################################################################################

#--------------------------------------------------------------
# 変数の定義
namedata=$1
checkdata=$2

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------
# チェックがNGだったら 
if [ $(awk '$1=="result"{print $2}' "${checkdata}") = "check_ng" ] ; then
  cat ${checkdata}
# チェックがokだったら
else
#--------------------------------------------------------------
##########################
# 入力データのチェック
##########################

 [ -z "${Shimei}" -o "${Shimei}" = "_" ] && error_exit "氏名を入力してください。"
 [ -z "${Shimeikana}" -o "${Shimeikana}" = "_" ] && error_exit "氏名カナを入力してください。"
 [ -z "${SeinengappiYear}" -o "${SeinengappiYear}" = "_" ] && error_exit "生年月日を入力してください。"
 [ -z "${SeinengappiMonth}" -o "${SeinengappiMonth}" = "_" ] && error_exit "生年月日を入力してください。"
 [ -z "${SeinengappiDay}" -o "${SeinengappiDay}" = "_" ] && error_exit "生年月日を入力してください。"

#------------------------
# 生年月日の計算とチェック
#------------------------

  SeinengappiGengou=$(nameread "SeinengappiGengou" ${namedata}| sed 's/\\n//g' | sed 's/_//g')
  SeinengappiYear=$(nameread "SeinengappiYear" ${namedata}| sed 's/\\n//g' | sed 's/_//g'| sed 's/^0//g')
  SeinengappiMonth=$(nameread "SeinengappiMonth" ${namedata}| sed 's/\\n//g' | sed 's/_//g' | sed 's/^0//g')
  SeinengappiDay=$(nameread "SeinengappiDay" ${namedata}| sed 's/\\n//g' | sed 's/_//g' | sed 's/^0//g')


[ ! -z "${SeinengappiMonth}" -o "${SeinengappiMonth}" != "_" ] && SeinengappiMonth_Maezero="$(echo ${SeinengappiMonth} | maezero 1.2)"
[ ! -z "${SeinengappiDay}" -o "${SeinengappiDay}" != "_" ] && SeinengappiDay_Maezero="$(echo ${SeinengappiDay} | maezero 1.2)"

[ "${SeinengappiYear}" = "0" ] && error_exit "生年月日に0年は入力できません。"
[ "${SeinengappiMonth}" = "0" ] && error_exit "生年月日に0月は入力できません。"
[ "${SeinengappiDay}" = "0" ] && error_exit "生年月日に0日は入力できません。"


  # 数字のみのチェック
  echo "${SeinengappiGengou}"    |
  awk '$1!~/^[0-9]*$/{print $0}' |
  awk '$1!="_"{print $0}'        > $tmp-seinengappi_error1
  echo "${SeinengappiYear}"      |
  awk '$1!~/^[0-9]*$/{print $0}' |
  awk '$1!="_"{print $0}'  > $tmp-seinengappi_error2

  echo "${SeinengappiMonth_Maezero}" |
  awk '$1!~/^[0-9]*$/{print $0}'     |
  awk '$1!="_"{print $0}'         > $tmp-seinengappi_error3
  echo "${SeinengappiMonth_Maezero}" |
  awk '$1>12{print $0}'                > $tmp-seinengappi_error4

  echo "${SeinengappiDay_Maezero}" |
  awk '$1!~/^[0-9]*$/{print $0}'   |
  awk '$1!="_"{print $0}'          > $tmp-seinengappi_error5
  echo "${SeinengappiDay_Maezero}" |
  awk '$1>31{print $0}'          > $tmp-seinengappi_error6

  [ -s $tmp-seinengappi_error1 ] && error_exit "生年月日の元号選択が不正です。"
  [ -s $tmp-seinengappi_error2 ] && error_exit "生年月日の年号の値が不正です。"
  [ -s $tmp-seinengappi_error3 ] && error_exit "生年月日の月の値が不正です。"
  [ -s $tmp-seinengappi_error4 ] && error_exit "生年月日の月の値が不正です。"
  [ -s $tmp-seinengappi_error5 ] && error_exit "生年月日の日の値が不正です。"
  [ -s $tmp-seinengappi_error6 ] && error_exit "生年月日の日の値が不正です。"


  # 西暦の計算
  cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/GENGOU |
  awk '$1=="'${SeinengappiGengou}'"{print substr($3,1,4)}' |
  awk '{print $1+"'${SeinengappiYear}'"-1}' |
# 1:西暦年号
  awk '{print $1"'${SeinengappiMonth_Maezero}'""'${SeinengappiDay_Maezero}'"}' > $tmp-seinengappi

  Seinengappi="$(head -1 $tmp-seinengappi | self 1)"

  isdate "${Seinengappi}" 
  echo $?              > $tmp-seinegappi_check

  [ -s $tmp-seinegappi_check -a $(cat $tmp-seinegappi_check) = "1" ] && error_exit "存在しない生年月日です。"


#--------------------------------------------------------------
#--------------------------------------------------------------

# 利用者データがすでにあるものならばその利用者番号を使う
  RIYOUSHAID="$(nameread "RIYOUSHAID" ${namedata} | awk '$1~/[0-9]/{print $0}')"

  riyousha_no="$(echo "${RIYOUSHAID}")"

#--------------------------------------------------------------
# 編集テーブル一覧
#
# 利用者テーブル
# 利用者基本

#--------------------------------------------------------------

  #####################
  # 1:利用者テーブル
  #####################

  awk '$1=="'${riyousha_no}'"{print $0}' ${pompa_dir}/RIYOUSHA_MASTER  > $tmp-riyousha_master

#  Shimei="$(nameread "Shimei" ${namedata} | sed 's/_//g' | sed 's/　//g')"
  Shimei="$(nameread "Shimei" ${namedata} | sed 's/_/　/g' | sed 's/^　//g')"
  Shimeikana="$(nameread "Shimeikana" ${namedata} | sed 's/_/　/g' | sed 's/^　//g' | zen -)"
  USERID="$(nameread "USERID" ${namedata})"

 [ -z "${GaijiKyuuji}" -o "${GaijiKyuuji}" = "${Shimei}" ] && GaijiKyuuji="_"

# 編集データの作成
  cat $tmp-riyousha_master |
  self 1 4                 |
  awk '{print $1,"'${Shimei}'","'${Shimeikana}'",$2,"1","'${cur_time}'","'${USERID}'"}' >  $tmp-riyousha_master_input
# 1:利用者ID 2:氏名 3:氏名カナ 4:外字旧字 5:削除フラグ 6:更新日時 7:UserID

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

  #######################
  # 2:利用者基本テーブル
  #######################

  awk '$1=="'${riyousha_no}'"{print $0}' ${pompa_dir}/RIYOUSHA_KIHON  > $tmp-riyousha_kihon

  Seibetsu=$(nameread "Seibetsu" ${namedata} | sed 's/_//g' | sed 's/　//g')

[ ! -z "${SeinengappiMonth}" -o "${SeinengappiMonth}" != "_" ] && SeinengappiMonth_Maezero="$(echo ${SeinengappiMonth} | maezero 1.2)"
[ ! -z "${SeinengappiDay}" -o "${SeinengappiDay}" != "_" ] && SeinengappiDay_Maezero="$(echo ${SeinengappiDay} | maezero 1.2)"

  # 西暦の計算
  cat ${tbl_dir}/ZEIRITSU_GENGOU_MASTER/GENGOU |
  awk '$1=="'${SeinengappiGengou}'"{print substr($3,1,4)}' |
  awk '{print $1+"'${SeinengappiYear}'"-1}' |
# 1:西暦年号
  awk '{print $1"'${SeinengappiMonth_Maezero}'""'${SeinengappiDay_Maezero}'"}' > $tmp-seinengappi

  Seinengappi="$(head -1 $tmp-seinengappi | self 1)"

  # 編集データの作成
  cat $tmp-riyousha_kihon  |
  awk '{print $1,"'${Shimei}'","'${Shimeikana}'","'${Seibetsu}'","'${SeinengappiGengou}'","'${SeinengappiYear}'","'${SeinengappiMonth}'","'${SeinengappiDay}'","'${Seinengappi}'",$10,$11,$12,$13,$14,$15,$16,$17,$18,"1","'${cur_time}'","'${USERID}'"}' > $tmp-riyousha_kihon_input
# 1:利用者(入居者)ID 2:利用者(入居者)氏名 3:利用者(入居者)氏名カナ 4:性別           5:和暦：元号
# 6:和暦：誕生年     7:和暦：誕生月       8:和暦：誕生日           9:西暦：生年月日 10:感染症
# 11:入居前郵便番号  12:入居前住所        13:現郵便番号            14:現住所        15:携帯電話番号
# 16:E-MAILアドレス  17:趣味特技          18:備考                  19:削除フラグ    20:更新日時
# 21:UserID

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

# 2人目として登録だった場合
if [ ! -z "${Futarime}" -a "${Futarime}" = "1" ] ; then
  self 1 $tmp-riyousha_kihon_input |
  awk '{print $1,"1","'${cur_time}'","'${USERID}'"}' > $tmp-futarime_input
# 2人目としての登録じゃなかった場合
else
  # 過去に2人目として登録されていたかどうか
  awk '$1=="'${riyousha_no}'"&&$(NF-2)!="9"{print $0}' ${pompa_dir}/RIYOUSHA_CHOUFUKU_OK > $tmp-futarime_old

  if [ -s $tmp-futarime_old ] ; then
    cat $tmp-futarime_old |
    awk '{print $1,"9","'${cur_time}'","'${USERID}'"}' > $tmp-futarime_input
  else
    :
  fi

fi

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit
#--------------------------------------------------------------

# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RIYOUSHA_KIHON RIYOUSHA_KIHON
RIYOUSHA_MASTER RIYOUSHA_MASTER
FIN

[ -s $tmp-futarime_input ] && echo "RIYOUSHA_CHOUFUKU_OK" "RIYOUSHA_CHOUFUKU_OK" >> $tmp-target-table

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

## 更新ファイルの作成とチェック用のテーブル
## 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
riyousha_master RIYOUSHA_MASTER 1 6 7 ${pompa_dir} ${input_dir}
riyousha_kihon RIYOUSHA_KIHON  1 20 21 ${pompa_dir} ${input_dir}
FIN

[ -s $tmp-futarime_input ] && echo "futarime RIYOUSHA_CHOUFUKU_OK 1 3 4 ${pompa_dir} ${input_dir}" >> $tmp-koushin_pompa

#--------------------------------------------------------------
cat $tmp-target-table |
awk '$1!~/*tbl_dir*/{print $0}' |
while read file_name base ;do
 cp ${pompa_dir}/${file_name} ${pompa_dir}/back/${file_name}.${today}
done

#################################################################################################
# 変更するのはここまで
#################################################################################################

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
 # エラー（ロックに失敗）
  error_unlock "ロック処理失敗"
 ## error_exit ではなく error_unlock である点に注意！
fi
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# バッチ側で処理中なら更新させずに落とす
#[ -e ${tmptmplock_dir}/BATCH.SAMPLE_LOCK ] && error_unlock "システム処理中"
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/RIYOUSHA

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/RIYOUSHA/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------

#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
: ;done
#--------------------------------------------------------------
 cp -p ${pompa_dir}/RIYOUSHA_MASTER ${data_dir}/RIYOUSHA_MASTER
 cp -p ${pompa_dir}/RIYOUSHA_KIHON ${data_dir}/RIYOUSHA_KIHON
 cp -p ${pompa_dir}/RIYOUSHA_CHOUFUKU_OK ${data_dir}/RIYOUSHA_CHOUFUKU_OK
  echo "result touroku_ok" "${riyousha_no}"
fi


## 終了
rm -f $tmp-*
exit 0
