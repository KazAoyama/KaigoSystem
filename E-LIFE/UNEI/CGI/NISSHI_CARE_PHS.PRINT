#!/bin/bash
#
# NISSHI_CARE.DISPLAY : 日誌（ケア表示)
#
# Usage : NISSHI_CARE.DISPLAY
#
# Written by K.Aoyama(HANDS.LAB)

# ログ
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*

# ディレクトリ設定
test_tbl_dir="${home_dir}/TEST/TBL"
test_pompa_dir="${home_dir}/SYSTEM_SETTEI/POMPA/KENGEN_KANRI"
uneitbl_dir="${home_dir}/UNEI/TBL"
uneitmp_dir="${home_dir}/UNEI/TMP"
kengen_dir="${home_dir}/SYSTEM_SETTEI/POMPA/KENGEN_KANRI"

# 変数の定義
namedata=$1
checkfile=$2
today="$(date +%Y%m%d)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu

# ログインUSER名と施設の取得（仮）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
tee ${tmp}-jugyoin                                 |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst

cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

[ -z "${displayShisetsu}" -o "${displayShisetsu}" = "_" ] && displayShisetsu=$shisetsu

echo ${displayShisetsu} > $tmp-displayShisetsu

# フロア
echo ${Floor}  > ${tmp}-floor

[ -z "$hdKijunDate" -o "$hdKijunDate" = "_" ] && hdKijunDate=$(mdate today | self 1)

# 本日の日付を取得
taishoutoday=$(mdate $hdKijunDate | awk '{print substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2)}')
echo "${taishoutoday}" > $tmp-today

# 施設利用者テーブルより取得
# 1:利用者ID 2:施設ID   3:建屋ID 4:フロアID 5:ユニットID
# 6:部屋番号 7:from日付 8:to日付
self 6 1/5 7 8 $data_dir/SHISETSU_RIYOUSHA_STATUS  |
awk '$7<="'$hdKijunDate'"&&"'$hdKijunDate'"<=$8'  |
LANG=C sort -k1,1                                  > $tmp-shisetsu_riyousha


##############################################################
# 利用者基本情報
##############################################################
: > $tmp-riyousha_master
if [ -s ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER ] ; then
# 1:利用者ID 2:利用者名
  self 1 2 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER |
# 1:利用者ID 2:施設ID   3:建屋ID 4:フロアID 5:ユニットID
# 6:居室ID   7:from日付 8:to日付 9:利用者名
  join1 key=1 $tmp-shisetsu_riyousha |
  LANG=C sort -k2,2                               |
# 施設絞込み
  join0 key=2 $tmp-displayShisetsu                |
# 建屋絞込み
  awk '$3=="02"'                                 |
  LANG=C sort -k4,4                               |
  if [ -z "${Floor}" -o "${Floor}" = "0" -o "${Floor}" = "_" ] ; then
     cat - 
  else
# 居室番号をつける
     join0 key=4 ${tmp}-floor
  fi |
# 1:利用者ID 2:利用者名 3:居室ID
  self 1 9 6 |
  LANG=C sort -k1,1           > $tmp-riyousha_master
else
  message="利用者基本情報がありません"
fi

cp $tmp-riyousha_master $work_dir/riyousha_master


# 表示内容をセットするため、簡易マスタ生成
echo "0" "介護" > $tmp-shokusyu_master
echo "1" "看護" >> $tmp-shokusyu_master

echo "0" "日勤" > $tmp-shift_master
echo "1" "夜勤" >> $tmp-shift_master
echo "2" "早出" >> $tmp-shift_master
echo "3" "遅番" >> $tmp-shift_master

###########################################################
# 日誌登録情報
###########################################################
nisshiday=$(mdate $hdKijunDate | self 1)
lastday=$(mdate -e $nisshiday/-1 | self 1)
if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   tee $tmp-nisshi_care_yesterday        |
   awk '$3=="'${nisshiday}'"'            |
   tee $tmp-nisshi_care_work             |
#   if [ -z "$Floor" -o "$Floor" = "_" -o "$Floor" = "0" ] ; then
#       awk '$2!="0"'
#   else
       awk '$2=="'$Floor'"'              |
#   fi |
# 1:施設            2:フロア          3:登録日付     4:フロア職種0   5:シフト0
# 6:担当者0         7:フロア職種1     8:シフト1      9:担当者1       10:フロア職種2
# 11:シフト2        12:担当者2        13:フロア職種3 14:シフト3      15:担当者3
# 16:フロア職種4    17:シフト4        18:担当者4     19:フロア職種5  20:シフト5
# 21:担当者5        22:フロア職種6    23:シフト6     24:担当者6      25:フロア職種7
# 26:シフト7        27:担当者7        28:フロア職種8 29:シフト8      30:担当者8
# 31:フロア職種9    32:シフト9        33:担当者9     34:フロア職種10 35:シフト10
# 36:担当者10       37:フロア職種11   38:シフト11    39:担当者11     40:入浴備考
# 41:日勤業務引継ぎ 42:夜勤業務引継ぎ 43:有効フラグ  44:処理時間     45:ユーザID
   delf NF-2/NF                          > $tmp-nisshi_care_base
   cp $tmp-nisshi_care_base $work_dir/nisshi_care_base
   FloorShokusyu0=$(self 4 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift0=$(self 5 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha0=$(self 6 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu1=$(self 7 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift1=$(self 8 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha1=$(self 9 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu2=$(self 10 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift2=$(self 11 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha2=$(self 12 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu3=$(self 13 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift3=$(self 14 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha3=$(self 15 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu4=$(self 16 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift4=$(self 17 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha4=$(self 18 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu5=$(self 19 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift5=$(self 20 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha5=$(self 21 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu6=$(self 22 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift6=$(self 23 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha6=$(self 24 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu7=$(self 25 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift7=$(self 26 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha7=$(self 27 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu8=$(self 28 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift8=$(self 29 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha8=$(self 30 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu9=$(self 31 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift9=$(self 32 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha9=$(self 33 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu10=$(self 34 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift10=$(self 35 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha10=$(self 36 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu11=$(self 37 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift11=$(self 38 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha11=$(self 39 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   NyuyokuBiko=$(self 40 $tmp-nisshi_care_base)
   NikkinHikitsugi=$(awk '$2=="'$Floor'"{print $41}' $tmp-nisshi_care_work)
   YakinHikitsugi=$(awk '$2=="'$Floor'"{print $42}' $tmp-nisshi_care_work)
#  前日のデータより夜勤データを取得
   LastYakinHikitsugi=$(cat $tmp-nisshi_care_yesterday | awk '$2=="'$Floor'"&&$3=="'${lastday}'"{print $42}')
fi

#####################################
# PHS早見表
#####################################

# フロア全体の場合は全てのフロア集計
if [ -z "$Floor" -o "$Floor" = "_" -o "$Floor" = "0" ] ; then
   if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS -a -s ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS         |
   awk '$2!="0"'                                             |
   delf NF-2/NF                                              > $tmp-care_phs
   self 3 $tmp-care_phs > $tmp-phs0
   self 4 $tmp-care_phs > $tmp-phs1
   self 5 $tmp-care_phs > $tmp-phs2
   self 6 $tmp-care_phs > $tmp-phs3
   self 7 $tmp-care_phs > $tmp-phs4
   self 8 $tmp-care_phs > $tmp-phs5
   self 9 $tmp-care_phs > $tmp-phs6
   self 10 $tmp-care_phs > $tmp-phs7
   self 11 $tmp-care_phs > $tmp-phs8
   self 12 $tmp-care_phs > $tmp-phs9
   self 13 $tmp-care_phs > $tmp-phs10
   self 14 $tmp-care_phs > $tmp-phs11

   cat ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   awk '$3=="'${nisshiday}'"'            |
   awk '$2!="0"'                         |
# 1:施設            2:フロア          3:登録日付     4:フロア職種0   5:シフト0
# 6:担当者0         7:フロア職種1     8:シフト1      9:担当者1       10:フロア職種2
# 11:シフト2        12:担当者2        13:フロア職種3 14:シフト3      15:担当者3
# 16:フロア職種4    17:シフト4        18:担当者4     19:フロア職種5  20:シフト5
# 21:担当者5        22:フロア職種6    23:シフト6     24:担当者6      25:フロア職種7
# 26:シフト7        27:担当者7        28:フロア職種8 29:シフト8      30:担当者8
# 31:フロア職種9    32:シフト9        33:担当者9     34:フロア職種10 35:シフト10
# 36:担当者10       37:フロア職種11   38:シフト11    39:担当者11     40:入浴備考
# 41:日勤業務引継ぎ 42:夜勤業務引継ぎ 43:有効フラグ  44:処理時間     45:ユーザID
   delf NF-2/NF                          > $tmp-nisshi_care_base
   self 4 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2  $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu0
   self 5 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift0
   self 6 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha0
   self 7 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu1
   self 8 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift1
   self 9 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha1
   self 10 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu2
   self 11 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift2
   self 12 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha2
   self 13 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu3
   self 14 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift3
   self 15 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha3
   self 16 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu4
   self 17 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift4
   self 18 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha4
   self 19 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu5
   self 20 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift5
   self 21 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha5
   self 22 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu6
   self 23 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift6
   self 24 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha6
   self 25 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu7
   self 26 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift7
   self 27 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha7
   self 28 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu8
   self 29 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift8
   self 30 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha8
   self 31 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu9
   self 32 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift9
   self 33 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha9
   self 34 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu10
   self 35 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift10
   self 36 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha10
   self 37 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu11
   self 38 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift11
   self 39 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha11

   ycat $tmp-phs0 $tmp-floor_shokushu0 $tmp-shift0 $tmp-tantousha0 > $tmp-all0
   ycat $tmp-phs1 $tmp-floor_shokushu1 $tmp-shift1 $tmp-tantousha1 > $tmp-all1
   ycat $tmp-phs2 $tmp-floor_shokushu2 $tmp-shift2 $tmp-tantousha2 > $tmp-all2
   ycat $tmp-phs3 $tmp-floor_shokushu3 $tmp-shift3 $tmp-tantousha3 > $tmp-all3
   ycat $tmp-phs4 $tmp-floor_shokushu4 $tmp-shift4 $tmp-tantousha4 > $tmp-all4
   ycat $tmp-phs5 $tmp-floor_shokushu5 $tmp-shift5 $tmp-tantousha5 > $tmp-all5
   ycat $tmp-phs6 $tmp-floor_shokushu6 $tmp-shift6 $tmp-tantousha6 > $tmp-all6
   ycat $tmp-phs7 $tmp-floor_shokushu7 $tmp-shift7 $tmp-tantousha7 > $tmp-all7
   ycat $tmp-phs8 $tmp-floor_shokushu8 $tmp-shift8 $tmp-tantousha8 > $tmp-all8
   ycat $tmp-phs9 $tmp-floor_shokushu9 $tmp-shift9 $tmp-tantousha9 > $tmp-all9
   ycat $tmp-phs10 $tmp-floor_shokushu10 $tmp-shift10 $tmp-tantousha10 > $tmp-all10
   ycat $tmp-phs11 $tmp-floor_shokushu11 $tmp-shift11 $tmp-tantousha11 > $tmp-all11

   cat $tmp-all0 $tmp-all1 $tmp-all2 $tmp-all3 $tmp-all4 $tmp-all5 > $tmp-phs_list
   cat $tmp-all6 $tmp-all7 $tmp-all8 $tmp-all9 $tmp-all10 $tmp-all11 > $tmp-phs_list2
   fi

else

if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS         |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   awk '$2=="'$Floor'"'                  |
   delf NF-2/NF                          > $tmp-care_phs
# 1:施設      2:フロア    3:PHS0   4:PHS1   5:PHS2
# 6:PHS3      7:PHS4      8:PHS5   9:PHS6   10:PHS7
# 11:PHS8     12:PHS9     13:PHS10 14:PHS11
   phs0=$(self 3 $tmp-care_phs)
   phs1=$(self 4 $tmp-care_phs)
   phs2=$(self 5 $tmp-care_phs)
   phs3=$(self 6 $tmp-care_phs)
   phs4=$(self 7 $tmp-care_phs)
   phs5=$(self 8 $tmp-care_phs)
   phs6=$(self 9 $tmp-care_phs)
   phs7=$(self 10 $tmp-care_phs)
   phs8=$(self 11 $tmp-care_phs)
   phs9=$(self 12 $tmp-care_phs)
   phs10=$(self 13 $tmp-care_phs)
   phs11=$(self 14 $tmp-care_phs)
fi

if [ "$(gyo $tmp-care_phs)" != "0" ] ; then 
# PHSリスト表を生成
[ -z "$FloorShokusyu0" ] && FloorShokusyu0="@"
[ -z "$FloorShokusyu1" ] && FloorShokusyu1="@"
[ -z "$FloorShokusyu2" ] && FloorShokusyu2="@"
[ -z "$FloorShokusyu3" ] && FloorShokusyu3="@"
[ -z "$FloorShokusyu4" ] && FloorShokusyu4="@"
[ -z "$FloorShokusyu5" ] && FloorShokusyu5="@"
[ -z "$FloorShokusyu6" ] && FloorShokusyu6="@"
[ -z "$FloorShokusyu7" ] && FloorShokusyu7="@"
[ -z "$FloorShokusyu8" ] && FloorShokusyu8="@"
[ -z "$FloorShokusyu9" ] && FloorShokusyu9="@"
[ -z "$FloorShokusyu10" ] && FloorShokusyu10="@"
[ -z "$FloorShokusyu11" ] && FloorShokusyu11="@"
[ -z "$Shift0" ] && Shift0="@"
[ -z "$Shift1" ] && Shift1="@"
[ -z "$Shift2" ] && Shift2="@"
[ -z "$Shift3" ] && Shift3="@"
[ -z "$Shift4" ] && Shift4="@"
[ -z "$Shift5" ] && Shift5="@"
[ -z "$Shift6" ] && Shift6="@"
[ -z "$Shift7" ] && Shift7="@"
[ -z "$Shift8" ] && Shift8="@"
[ -z "$Shift9" ] && Shift9="@"
[ -z "$Shift10" ] && Shift10="@"
[ -z "$Shift11" ] && Shift11="@"
echo "$phs0" "$FloorShokusyu0" "$Shift0" "$Tantousha0" > $tmp-phs_list
echo "$phs1" "$FloorShokusyu1" "$Shift1" "$Tantousha1" >> $tmp-phs_list
echo "$phs2" "$FloorShokusyu2" "$Shift2" "$Tantousha2" >> $tmp-phs_list
echo "$phs3" "$FloorShokusyu3" "$Shift3" "$Tantousha3" >> $tmp-phs_list
echo "$phs4" "$FloorShokusyu4" "$Shift4" "$Tantousha4" >> $tmp-phs_list
echo "$phs5" "$FloorShokusyu5" "$Shift5" "$Tantousha5" >> $tmp-phs_list
echo "$phs6" "$FloorShokusyu6" "$Shift6" "$Tantousha6" > $tmp-phs_list2
echo "$phs7" "$FloorShokusyu7" "$Shift7" "$Tantousha7" >> $tmp-phs_list2
echo "$phs8" "$FloorShokusyu8" "$Shift8" "$Tantousha8" >> $tmp-phs_list2
echo "$phs9" "$FloorShokusyu9" "$Shift9" "$Tantousha9" >> $tmp-phs_list2
echo "$phs10" "$FloorShokusyu10" "$Shift10" "$Tantousha10" >> $tmp-phs_list2
echo "$phs11" "$FloorShokusyu11" "$Shift11" "$Tantousha11" >> $tmp-phs_list2
fi

fi

# PHS情報がないものは省く
cat $tmp-phs_list |
awk '$1!="_"'     > $tmp-phs_list_output

cp $tmp-phs_list_output $work_dir/phs_list

cat $tmp-phs_list2 |
awk '$1!="_"'     > $tmp-phs_list2_output
cp $tmp-phs_list2_output $work_dir/phs_list2


# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou



echo "5" > $tmp-cgi

# 施設名はログインユーザーの権限のある施設を取得
cat ${test_pompa_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
LANG=C sort -k4,4                                          |
join0 key=4 $tmp-cgi                                       |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
cp ${tmp}-kengen $work_dir/kengen
# 1:userid 2:SHISETSU_ID
#if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = 0 ];then
#  awk '$1!=0' ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON       |
#  tee $work_dir/shisetsu                                           |
#  awk '{if($1=="'$displayShisetsu'"){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_list
# 1:SHISESTU_ID 2:施設名
#else
#  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
#  join1 key=2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON |
#  tee $work_dir/shisetsu                                           |
# 1:userid 2:SHISETSU_ID 3:施設名
#  awk '$2!=0{print $2,$3}'                 |
#  awk '{if($1=="'$displayShisetsu'"){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_list
#fi

self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON |
join0 key=1 $tmp-shisetsu > $tmp-shisetsu_list


# 所属建屋によって登録可否を判定
self 1 3 $home_dir/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU |
awk '$1=="'$userid'"' > $tmp-user_tateya

user_tateya=$(self 2 $tmp-user_tateya)

disabled_touroku=""
#if [ "$user_tateya" != "02" ] ; then
#   disabled_touroku="disabled"
#fi

#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
##else
##cat << FIN > $tmp-html2
##    <script type="text/javascript" language="javascript">
##      window.close();
##    </script>
##FIN
fi
#--------------------------------------------------------------

[ "$Floor" = "0" -o -z "$Floor" -o "$Floor" = "_" ] && displayFloor="全" || displayFloor=$Floor

cat $checkfile > $tmp-calsed
cat << FIN | sed 's/ _$/ @/g' >> $tmp-calsed
###TAISHOUDATE### $taishoutoday
###USERID### $userid
###PASSWORD### $password
###SHISETSUID### $shisetsu
###DISPLAYFLOOR### $displayFloor
###DOMAIN### $domain
FIN

cat $tmp-calsed      |
sed 's/\\n/###KAIGYO###/g'     >  $tmp-calsed_kaigyozumi

# HTMLの作成
cat ${html_dir}/PRINT_PHS_NISSHI_CARE.html |
calsed -f $tmp-calsed_kaigyozumi - |
mojihame -l###PHSLIST1### - $tmp-phs_list_output |
mojihame -l###PHSLIST2### - $tmp-phs_list2_output |
sed 's/###KAIGYO###/\n/g'     |
sed 's/\\n//g'                |
sed 's/###SPACE###/ /g'       |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
#formhame -d"_" - ${namedata}  |
cat - > $tmp-nisshi_care_phs_base_pdf.html
#--------------------------------------------------------------

mkdir -p ${home_dir}/UNEI/DOWNLOAD/${userid}

# 過去のPDFを一旦消す
rm ${home_dir}/UNEI/DOWNLOAD/${userid}/NISSHI_CARE_PHS.pdf

/home/hands/E-LIFE/TOOL/wkhtmltopdf-amd64 $tmp-nisshi_care_phs_base_pdf.html ${home_dir}/UNEI/DOWNLOAD/${userid}/NISSHI_CARE_PHS.pdf

  # HTML の出力
cat << EOF > ${tmp}-html.html
<HTML>
  <HEAD>
    <SCRIPT type="text/javascript" language="Javascript">
      //<![CDATA[
      window.onload=init
      function init(){
           window.open("/E-LIFE/UNEI/DOWNLOAD/${userid}/NISSHI_CARE_PHS.pdf","pdfprint");
           window.self.close();
      }
      //]]>
    </SCRIPT>
  </HEAD>
</HTML>
EOF

cat ${tmp}-html.html


rm -f ${tmp}-*
exit 0
