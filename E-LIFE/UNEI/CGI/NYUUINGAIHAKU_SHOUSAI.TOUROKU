#!/bin/bash
#
# NYUUINGAIHAKU_SHOUSAI.TOUROKU
# 入院外泊情報
#
# Written by Y.kashiyama (Tokyu-hands.co.jp) :2013/3/14

#--------------------------------------------------------------
# ログ
exec 2> /home/hands/E-LIFE/UNEI/APLOG/LOG.$(basename ${0}).${HOSTNAME}.$(date "+%Y%m%d%H%M%S"); set -xv

# 設定ファイル読込
source /home/hands/.bashrc &> /dev/null
source  /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null

# 変数設定
tmp=/var/tmp/${$}

# ディレクトリ設定
app_dir="${home_dir}/UNEI"
cgi_dir="${app_dir}/CGI"
html_dir="${app_dir}/HTML"
#--------------------------------------------------------------

#--------------------------------------------------------------
#ゴミtmpの消去
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  message="$1"
  echo "message ${message}"
  echo "result ng"
  rm -f $tmp-*
  exit 1
}
function error_unlock {
  message="$1"
  cat $tmp-target-table |
  while read table base ;do
    rm -f $tmplock_dir/$base.lock
  : ;done
  error_exit ${message}
}
#--------------------------------------------------------------

#--------------------------------------------------------------
# 変数の定義
namedata=$1
thismonth="$(date +%Y%m)"
lastmonth="$(mdate ${thismonth}m/-1)"
nextmonth="$(mdate ${thismonth}m/+1)"

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------
KikanFrom=$(nameread  "KikanFrom"           $namedata | sed 's/\///g')
KikanTo=$(nameread    "KikanTo"             $namedata | sed 's/\///g')
TimeFrom="$(nameread  "TimeFrom"           $namedata)"
TimeTo="$(nameread    "TimeTo"           $namedata)"
KikanFromZaiseki="$(nameread    "KikanFromZaiseki"   $namedata)"
KikanToZaiseki="$(nameread    "KikanToZaiseki"   $namedata)"

NyuuinGaihakusaki=$(nameread   "NyuuinGaihakusaki"   $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
NyuuinGaihakubikou=$(nameread  "NyuuinGaihakubikou"  $namedata | sed 's/ /###SPACE###/g'| sed 's/\\n/###KAIGYO###/g')
ShokujiKikanFrom=$(nameread "ShokujiKikanFrom" ${namedata} | sed 's/\///g')
ShokujiKikanTo=$(nameread "ShokujiKikanTo" ${namedata} | sed 's/\///g')
ShokujiFrom=$(nameread "ShokujiFrom" ${namedata})
ShokujiTo=$(nameread "ShokujiTo" ${namedata})

 [ -z "${ShokujiKikanFrom}" ] && ShokujiKikanFrom=$(nameread "ShokujiKikanFromKakutei" ${namedata} | sed 's/\///g')
 [ -z "${ShokujiKikanTo}" ] && ShokujiKikanTo=$(nameread "ShokujiKikanToKakutei" ${namedata} | sed 's/\///g')
 [ -z "${ShokujiFrom}" ] && ShokujiFrom=$(nameread "ShokujiFromKakutei" ${namedata})
 [ -z "${ShokujiTo}" ] && ShokujiTo=$(nameread "ShokujiToKakutei" ${namedata})

 [ -z "${TimeFrom}" ] && TimeFrom="_"
 [ -z "${TimeTo}" ] && TimeTo="_"

Shisetsu=$(nameread  "Shisetsu"   $namedata)
Tateya=$(nameread    "Tateya"     $namedata)
Floor=$(nameread     "Floor"      $namedata)
Unit=$(nameread      "Unit"       $namedata)
Kyoshitsu=$(nameread "Kyoshitsu"  $namedata)

 [ -z "${Shisetsu}" ] && Shisetsu=$(nameread   "HiddenShisetsu"   $namedata)
 [ -z "${Tateya}" ] && Tateya=$(nameread       "HiddenTateya"     $namedata)
 [ -z "${Floor}" ] && Floor=$(nameread         "HiddenFloor"      $namedata)
 [ -z "${Unit}" ] && Unit=$(nameread           "HiddenUnit"       $namedata)
 [ -z "${Kyoshitsu}" ] && Kyoshitsu=$(nameread "HiddenKyoshitsu"  $namedata)

RIYOUSHAID=$(nameread  "RIYOUSHAID"   $namedata)
riyousha_i=$(nameread  "riyousha_i"   $namedata)

 [ -z "${RIYOUSHAID}" ] && RIYOUSHAID="_"
 [ -z "${riyousha_i}" ] && riyousha_i="_"

# 施設を含むディレクトリ設定
pompa_dir="${app_dir}/POMPA/NYUUINGAIHAKU/${Shisetsu}/${Tateya}"
input_dir="${app_dir}/INPUT"
kanri_dir="/DATA/E-LIFE/UNEI/KANRI/NYUUINGAIHAKU/${Shisetsu}/${Tateya}"
data_dir="/DATA/E-LIFE/UNEI/NYUUINGAIHAKU/${Shisetsu}/${Tateya}"
seikyuu_dir="/DATA/E-LIFE/SEIKYU/SHISETSU/SHOKUJI/${Shisetsu}/${Tateya}"
mkdir -p ${data_dir}
mkdir -p ${seikyuu_dir}/${lastmonth}
mkdir -p ${seikyuu_dir}/${thismonth}
mkdir -p ${seikyuu_dir}/${nextmonth}

[ -z "${KikanTo}" -o "${KikanTo}" = "_" ] && KikanTo="99999999"
#--------------------------------------------------------------
# 入力データのチェック
if [ "${Shubetsu}" != "4" ] ; then
  [ -z "${KikanFrom}" -o "${KikanFrom}" = "_" ] && error_exit "期間を入力してください。"

  echo "${KikanFrom}" |
  awk '$1~/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/' > $tmp-kikanfrom_ok
  [ -z "${KikanFrom}" -o ! -s $tmp-kikanfrom_ok ] && error_exit "期間(自)を正しく入力してください。"

  isdate "${KikanFrom}"
  echo $?  > $tmp-kikan_from_check
  [ "$(cat $tmp-kikan_from_check)" != "0" ] && error_exit "期間(自)に不正な日付が入力されています。"

  if [ "${KikanTo}" != "99999999" ] ; then
      isdate "${KikanTo}"
      echo $?  > $tmp-kikan_to_check
    [ "$(cat $tmp-kikan_to_check)" != "0" ] && error_exit "期間(至)に不正な日付が入力されています。"
  else
   :
  fi
else
  KikanFrom=$(echo ${ShokujiKikanFrom})
  KikanTo=$(echo ${ShokujiKikanTo})
  TimeFrom="_"
  TimeTo="_"
  KikanFromZaiseki="_"
  KikanToZaiseki="_"

  [ "${KesshyokuTouroku}" == "1" ] || error_exit "種別で欠食を選んだ場合欠食登録は必須です"
fi
# 時間のチェック
#[ "${TimeFrom}" = "_" ] && error_exit "期間(自)の時間を入力してください。"
[ "${TimeFrom}" = "_" ] && TimeFrom="_"
#[ "${TimeTo}" = "_" ] && TimeTo="_"
#[ "${KikanTo}" != "99999999" -a "${TimeTo}" = "_" ] && error_exit "期間(至)の時間を入力してください。"
[ "${KikanTo}" != "99999999" -a "${TimeTo}" = "_" ] && TimeTo="_"
TimeFrom_sed="$(echo "${TimeFrom}" | sed 's/://g')"
TimeTo_sed="$(echo "${TimeTo}" | sed 's/://g')"

[ "${KikanFrom}" -eq "${KikanTo}" -a "${TimeFrom_sed}" -gt "${TimeTo_sed}" ] && error_exit "期間(自)は期間(至)より前の日付・あるいは時間を入力してください。"

# 利用者IDがなければ不正
[ "${RIYOUSHAID}" = "_" -a "${riyousha_i}" = "_" ] && error_exit "データが不正です。"
[ "${RIYOUSHAID}" = "_" ] && RIYOUSHAID="$(echo ${riyousha_i})"
[ "${riyousha_i}" != "_" -a "${RIYOUSHAID}" != "${riyousha_i}" ] && RIYOUSHAID=$(nameread  "riyousha_i"  $namedata)
# 建屋がなければ不正
[ -z "${Tateya}" -o "${Tateya}" = "_" ] && error_exit "建屋が不正です。"
## フロアがなければ不正
#[ -z "${Floor}" -o "${Floor}" = "_" ] && error_exit "フロアが不正です。"
# ユニットがなければ不正
#[ -z "${Unit}" -o "${Unit}" = "_" ] && error_exit "ユニットが不正です。"
##[ -z "${Unit}" ] && error_exit "ユニットが不正です。"
# 居室がなければ不正
[ -z "${Kyoshitsu}" -o "${Kyoshitsu}" = "_" ] && error_exit "居室が不正です。"


[ "${KikanFrom}" -gt "${KikanTo}" ] && error_exit "期間(自)より期間(至)は後の日付を入力してください。"


if [ "${KesshyokuTouroku}" == "1" ] ; then
  [ -z "${ShokujiKikanFrom}" -o "${ShokujiKikanFrom}" = "_" ] && error_exit "欠食期間(自)を入力してください。"
  [ -z "${ShokujiFrom}" -o "${ShokujiFrom}" = "_" ] && error_exit "欠食期間(自)を入力してください。"
  [ -z "${ShokujiKikanTo}" -o "${ShokujiKikanTo}" = "_" ] && error_exit "欠食期間(至)を入力してください。"
  [ -z "${ShokujiTo}" -o "${ShokujiTo}" = "_" ] && error_exit "欠食期間(至)を入力してください。"

  echo "${ShokujiKikanFrom}" |
  awk '$1~/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/' > $tmp-shokujikikanfrom_ok
  [ -z "${ShokujiKikanFrom}" -o ! -s $tmp-shokujikikanfrom_ok ] && error_exit "欠食期間(自)を正しく入力してください。"

  isdate "${ShokujiKikanFrom}" 
  echo $? >$tmp-shokujikikan_from_check
  [ "$(cat $tmp-shokujikikan_from_check)" != "0" ] && error_exit "食事期間(自)に不正な日付が入力されています。"

  echo "${ShokujiKikanTo}" |
  awk '$1~/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/' > $tmp-shokujikikanto_ok
  [ -z "${ShokujiKikanFrom}" -o ! -s $tmp-shokujikikanto_ok ] && error_exit "欠食期間(至)を正しく入力してください。"

  if [ "${ShokujiKikanTo}" != "99999999" ] ; then
    isdate "${ShokujiKikanTo}"
    echo $?  > $tmp-shokujikikan_to_check
    [ "$(cat $tmp-shokujikikan_to_check)" != "0" ] && error_exit "欠食期間(至)に不正な日付が入力されています。"
  fi

  [ "${ShokujiKikanFrom}" -gt "${ShokujiKikanTo}" ] && error_exit "欠食期間が不正です。"
  [ "${ShokujiKikanFrom}" -eq "${ShokujiKikanTo}" -a "${ShokujiFrom}" -gt "${ShokujiTo}" ] && error_exit "欠食期間が不正です。"
fi

#---------
# 確定月の判定

if [ "${KesshyokuTouroku}" == "1" -a -s "/DATA/E-LIFE/SEIKYU/SHISETSU/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${Shisetsu}" ] ; then
  # 請求確定後のデータかどうか
  kakutei_nengetsu="$(LANG=C sort -k1,1 /DATA/E-LIFE/SEIKYU/SHISETSU/SEIKYU_KAKUTEI/SEIKYU_KAKUTEI.${Shisetsu} | awk '$(NF-2)!="9"' | getlast 1 1 | self 2)"
  kakunin_nengetsu_1="$(echo "${ShokujiKikanFrom}" | awk '{print substr($1,1,6)}')"
  kakunin_nengetsu_2="$(echo "${ShokujiKikanTo}" | awk '{print substr($1,1,6)}')"

  kakutei_next_nengetsu="$(mdate "$kakutei_nengetsu"m/+1)"
  kakutei_next_nengetsuhi="$(echo "${kakutei_next_nengetsu}""01")"

  # 食事期間スタート日が確定月より前だったら
  if [ "${ShokujiKikanFrom}" -lt "${kakutei_next_nengetsuhi}" ] ; then
     ShokujiKikanFromTouroku="${kakutei_next_nengetsuhi}"
  else
     ShokujiKikanFromTouroku="${ShokujiKikanFrom}"
  fi
#  [ "${kakutei_nengetsu}" -lt "${kakunin_nengetsu_1}" ] || error_exit "欠食登録では請求確定月以前のデータを入力することができません"
  [ "${kakutei_nengetsu}" -lt "${kakunin_nengetsu_2}" ] || error_exit "欠食登録では請求確定月以前のデータを入力することができません"
  [ "${kakutei_next_nengetsuhi}" -le "${ShokujiKikanTo}" ] || error_exit "欠食登録では請求確定月以前のデータを入力することができま
せん"

fi

## 入居期間チェック
#awk '$1=="'${Shisetsu}'"&&$2=="'${Tateya}'"&&$5=="'${Kyoshitsu}'"&&$6=="'${RIYOUSHAID}'"&&$(NF-2)!="9"{print $7,$8}' /DATA/E-LIFE/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS > $tmp-shisetsu_riyousha_status
## 1:入居日 2:退去日
#
#cat $tmp-shisetsu_riyousha_status    |
#awk '{if($1<="'${KikanFrom}'"){print $0}
#      else if($2>="'${KikanTo}'"){print $0}
#     }' > $tmp-nyuukyo_check_error
#
#[ ! -s $tmp-nyuukyo_check_error ] && error_exit "入居期間外の入院外泊登録はできません。"
#
#if [ "${KesshyokuTouroku}" == "1" ] ; then
#  cat $tmp-shisetsu_riyousha_status |
#  awk '{if($1<="'${ShokujiKikanFrom}'"){print $0}
#      else if($2>="'${ShokujiKikanTo}'"){print $0}
#     }' > $tmp-nyuukyo_check_error2
#
#  [ ! -s $tmp-nyuukyo_check_error2 ] && error_exit "入居期間外の欠食登録はできません。"
#fi

if [ "${KesshyokuTouroku}" == "1" ] ; then
# 欠食期間チェック
awk '$1=="'${RIYOUSHAID}'"&&$3=="'${Shisetsu}'"&&$4=="'${Tateya}'"&&$(NF-2)!="9"' /home/hands/E-LIFE/UNEI/POMPA/NYUUINGAIHAKU/${Shisetsu}/${Tateya}/RIYOUSHA_NYUUINGAIHAKU_KESSHOKU |
# 1:利用者(入居者)ID 2:入院外泊ID   3:施設ID       4:建屋       5:居室
# 6:欠食登録         7:欠食期間FROM 8:欠食食事FROM 9:欠食期間TO 10:欠食食事TO
awk '$2!="'${NYUUINGAIHAKUID}'"{print $7$8,$9$10}'       |
# 1:欠食期間FROM(日付＋食事NO) 2:欠食期間TO(日付＋食事NO)

#awk '$1=="'${RIYOUSHAID}'"&&$2=="'${Shisetsu}'"&&$3=="'${Tateya}'"&&$(NF-2)!="9"' |
#awk '$5>="'${ShokujiKikanFrom}'"&&$5<="'${ShokujiKikanTo}'"'                      |
awk '{if($1<="'${ShokujiKikanFrom}'""'${ShokujiFrom}'"&&$2>="'${ShokujiKikanTo}'""'${ShokujiTo}'"){print $0}
      else if($1>="'${ShokujiKikanFrom}'""'${ShokujiFrom}'"&&$1<="'${ShokujiKikanTo}'""'${ShokujiTo}'"){print $0}
      else if($2<="'${ShokujiKikanFrom}'""'${ShokujiFrom}'"&&$2>="'${ShokujiKikanTo}'""'${ShokujiTo}'"){print $0}
      else if($1>="'${ShokujiKikanFrom}'""'${ShokujiFrom}'"&&$2<="'${ShokujiKikanTo}'""'${ShokujiTo}'"){print $0}
     }' > $tmp-shokuji_kikan_error

  [ -s $tmp-shokuji_kikan_error ] && error_exit "欠食期間に重複データがあります。"
else
 :
fi

#--------------------------------------------------------------
# 更新テーブル一覧
#
# 入院外泊情報
# 入院外泊欠食登録テーブル
# 欠食テーブル
# 食事実績テーブル
#--------------------------------------------------------------
#####################
# 1:入院外泊情報
#####################
# 入院外泊
NYUUINGAIHAKUID="$(nameread "NYUUINGAIHAKUID" ${namedata})"

if [ -n "${NYUUINGAIHAKUID}" -a "${NYUUINGAIHAKUID}" != "_" ] ; then
  nyuuingaihaku_id="$(echo "${NYUUINGAIHAKUID}")"
else
  # 新規データならばIDをふる(利用者ID)
  ### 管理IDの発番
  # 今回取得するID数
  last_no="1"

  mkdir -p ${kanri_dir}
  [ -e ${kanri_dir}/NYUUINGAIHAKU_ID ] || echo "00001" > ${kanri_dir}/NYUUINGAIHAKU_ID
  # 現状の最終番号
  now_last_no=$(cat ${kanri_dir}/NYUUINGAIHAKU_ID)
  # 今回の発番後に、数字が限度を超えないかチェック
  new_last_no=$(expr ${now_last_no} + ${last_no})

  # 超えてたらリセット
  [ ${new_last_no} -gt 99999 ] && echo "00001" > ${kanri_dir}/NYUUINGAIHAKU_ID

  get_no ${last_no} ${kanri_dir}/NYUUINGAIHAKU_ID > $tmp-id_all

  # この場合取得するのは一つなのでそのまま変数に
  nyuuingaihaku_id="$(cat $tmp-id_all)"

  # 新規の際は利用者IDは"riyousha_i"の方
  RIYOUSHAID=$(nameread "riyousha_i"  $namedata)
fi

# 仮INPUTの作成
echo "${RIYOUSHAID}" "${nyuuingaihaku_id}" "${Shisetsu}" "${Tateya}" "${Kyoshitsu}" "${Shubetsu}" "${KikanFrom}" "${KikanTo}" "${TimeFrom}" "${TimeTo}" "${NyuuinGaihakusaki}" "${NyuuinGaihakubikou}" "${KesshyokuTouroku}" "${KikanFromZaiseki}" "${KikanToZaiseki}" "_" "1" "${cur_time}" "${USERID}">  $tmp-riyousha_nyuuingaihaku_input
[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit
# 1:利用者(入居者)ID 2:入院外泊ID  3:施設      4:建屋        5:居室
# 6:種別             7:期間FROM    8:期間TO    9:出発地      10:帰宅先
# 11:入院外泊先      12:備考       13:欠食登録 14:出発時在籍      15:帰宅時在籍
# 16:予備1           17:削除フラグ 18:更新日時 19:ユーザーID


#######################
# 2:入院外泊欠食テーブル
#######################
cat $tmp-riyousha_nyuuingaihaku_input |
self 1/5 |
# 1:利用者(入居者)ID 2:入院外泊ID 3:施設 4:建屋 5:居室
awk '{print $0,"'${KesshyokuTouroku}'","'${ShokujiKikanFrom}'","'${ShokujiFrom}'","'${ShokujiKikanTo}'","'${ShokujiTo}'","1","'${cur_time}'","'${USERID}'"}' > $tmp-riyousha_nyuuingaihaku_kesshoku_input
[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit
# 1:利用者(入居者)ID 2:入院外泊ID   3:施設ID       4:建屋       5:居室
# 6:欠食登録         7:欠食期間FROM 8:欠食食事FROM 9:欠食期間TO 10:欠食食事TO
# 11:削除フラグ      12:更新日時    13:UserID

#######################
# 3:欠食テーブル
#######################
# 欠食登録があった場合
: > $tmp-shokuji_kikan

if [ "${KesshyokuTouroku}" == "1" ]; then

#ShokujiKikanFromTouroku
# 登録用の食事期間From日(確定月の翌月1日以降のFrom日)

  if [ "${ShokujiKikanFromTouroku}" -ne "${ShokujiKikanTo}" ] ; then

    # 食事期間Fromの食事情報
    # 朝食(食事期間FromTourokuが確定月の翌月の場合も)
    if [ "${ShokujiFrom}" == "1" -o "${ShokujiKikanFromTouroku}" -ne "${ShokujiKikanFrom}" ] ;then
      echo "${ShokujiKikanFromTouroku} 1" >>  $tmp-shokuji_kikan
      echo "${ShokujiKikanFromTouroku} 2" >>  $tmp-shokuji_kikan
      echo "${ShokujiKikanFromTouroku} 3" >>  $tmp-shokuji_kikan
    # 昼食
    elif [ "${ShokujiFrom}" == "2" ] ;then
      echo "${ShokujiKikanFrom} 2" >>  $tmp-shokuji_kikan
      echo "${ShokujiKikanFrom} 3" >>  $tmp-shokuji_kikan
    # 夕食
    elif [ "${ShokujiFrom}" == "3" ] ;then
      echo "${ShokujiKikanFrom} 3" >>  $tmp-shokuji_kikan
    fi
    
    # 初日を除いた実績の開始日
    ShokujiKikan=$(mdate "${ShokujiKikanFromTouroku}"/+1)

   # 初日と最終日を除いた期間
    ShokujiSeq=$(mdate "${ShokujiKikanTo}" "${ShokujiKikanFromTouroku}" | awk '{print $1-1}')
    if [ "${ShokujiSeq}" -le "0" ] ; then
      :
    else
      mdate -e "${ShokujiKikanFromTouroku}"/+"${ShokujiSeq}" |
      tarr                                                   |
      awk '$1!="'${ShokujiKikanFromTouroku}'"'               |
      awk '$1!="'${ShokujiKikanTo}'"'                        > $tmp-shokuji_kikan_aida
#    tail -n +2                                      > $tmp-shokuji_kikan_aida
    # 1:年月日
      awk '{print $1,"1"}' $tmp-shokuji_kikan_aida  >> $tmp-shokuji_kikan
      awk '{print $1,"2"}' $tmp-shokuji_kikan_aida  >> $tmp-shokuji_kikan
      awk '{print $1,"3"}' $tmp-shokuji_kikan_aida  >> $tmp-shokuji_kikan
    fi

    # 食事期間Toの食事情報
    # 朝食
    if [ "${ShokujiTo}" == "1" ] ;then
      echo "${ShokujiKikanTo} 1" >>  $tmp-shokuji_kikan
    # 昼食
    elif [ "${ShokujiTo}" == "2" ] ;then
      echo "${ShokujiKikanTo} 1" >>  $tmp-shokuji_kikan
      echo "${ShokujiKikanTo} 2" >>  $tmp-shokuji_kikan
    # 夕食
    elif [ "${ShokujiTo}" == "3" ] ;then
      echo "${ShokujiKikanTo} 1" >>  $tmp-shokuji_kikan
      echo "${ShokujiKikanTo} 2" >>  $tmp-shokuji_kikan
      echo "${ShokujiKikanTo} 3" >>  $tmp-shokuji_kikan
    fi
    # 1:欠食年月日 2:欠食食事

  else
    # 欠食年月日FromとToが同じ日だった場合
    # 欠食内容も一緒だった場合
    if [ "${ShokujiFrom}" -eq "${ShokujiTo}" ] ;then
      echo "${ShokujiKikanTo} ${ShokujiFrom}"  > $tmp-shokuji_kikan
   
    # 欠食内容が朝食と夕食だった場合
    elif [ "${ShokujiFrom}" == "1" -a "${ShokujiTo}" == "3" ] ;then
      echo "${ShokujiKikanTo} 1"  >> $tmp-shokuji_kikan
      echo "${ShokujiKikanTo} 2"  >> $tmp-shokuji_kikan
      echo "${ShokujiKikanTo} 3"  >> $tmp-shokuji_kikan
   
    # 欠食内容が朝食と昼食、昼食と夜食だった場合
    else
      echo "${ShokujiKikanTo} ${ShokujiFrom}"  >> $tmp-shokuji_kikan
      echo "${ShokujiKikanTo} ${ShokujiTo}"  >> $tmp-shokuji_kikan
    fi
  fi
  # 仮INPUTの作成
  cat $tmp-shokuji_kikan |
  awk '{print "'${RIYOUSHAID}'","'${Shisetsu}'","'${Tateya}'","'${Kyoshitsu}'",$0,"'${nyuuingaihaku_id}'","'${cur_time}'","1","'${USERID}'"}'        |
  LANG=C sort > $tmp-riyousha_kesshoku_input_jyunbi
  # 1:利用者(入居者)ID 2:施設ID     3:建屋       4:居室     5:欠食年月日
  # 6:欠食食事         7:入院外泊ID 8:更新日時   9:削除フラグ 10:UserID

 if [ -s $tmp-riyousha_kesshoku_input_jyunbi ] ; then
    # 変更があった場合、期間から外れたものは欠食削除
    cat ${pompa_dir}/RIYOUSHA_KESSHOKU                                     |
    awk '$1=="'${RIYOUSHAID}'"&&$7=="'${nyuuingaihaku_id}'"&&$(NF-2)!="9"' |
    # 確定月対象日以降のもの
    awk '$5>="'${kakutei_next_nengetsuhi}'"'                               > $tmp-kesshoku_jyunbi

    if [ -s $tmp-kesshoku_jyunbi ] ; then
      cat $tmp-kesshoku_jyunbi |
      cjoin1 +ng key=1/7 $tmp-riyousha_kesshoku_input_jyunbi -  >$tmp-kesshoku_ok 2>$tmp-kesshoku_ng

      cat $tmp-kesshoku_ng |
      awk '{print $0,"9",$(NF-1),$NF}' > $tmp-kesshoku_data
    else
     :
    fi

  else
    cat ${pompa_dir}/RIYOUSHA_KESSHOKU |
    cat awk '$1=="'${RIYOUSHAID}'"&&$7=="'${nyuuingaihaku_id}'"&&$5>="'${kakutei_next_nengetsuhi}'"&&$(NF-2)!="9"{print $0,"9",$(NF-1),$NF}'  > $tmp-kesshoku_data
 fi

  if [ -s $tmp-kesshoku_data ] ; then
    cat $tmp-kesshoku_data   |
    self 1/7 NF-1 NF-2 NF    |
    # 1:利用者(入居者)ID 2:施設ID     3:建屋       4:居室     5:欠食年月日
    # 6:欠食食事         7:入院外泊ID 8:更新日時   9:削除フラグ 10:UserID
    cat - $tmp-riyousha_kesshoku_input_jyunbi |
    LANG=C sort -k1,8                         |
    getlast 1 7                               |
    self 1/7 NF-1 NF-2 NF                     > $tmp-riyousha_kesshoku_input
  else
    # 新規
    cat $tmp-riyousha_kesshoku_input_jyunbi   |
    self 1/7 NF-1 NF-2 NF                     > $tmp-riyousha_kesshoku_input
  fi

# 欠食登録がなかった場合
else

  cat ${pompa_dir}/RIYOUSHA_KESSHOKU            |
  awk '$1=="'${RIYOUSHAID}'"&&$7=="'${nyuuingaihaku_id}'"&&$5>="'${kakutei_next_nengetsuhi}'"&&$(NF-2)!="9"{print $0,"9","'${cur_time}'","'${USERID}'"}' > $tmp-kesshoku_data

  if [ -s $tmp-kesshoku_data ] ; then
    cat $tmp-kesshoku_data   |
    self 1/7 NF-2 NF-1 NF    > $tmp-riyousha_kesshoku_input
  else
    # 新規
    : > $tmp-kesshoku_data
  fi
  # 1:利用者(入居者)ID 2:施設ID     3:建屋       4:居室     5:欠食年月日
  # 6:欠食食事         7:入院外泊ID 8:削除フラグ 9:更新日時 10:UserID
fi

 # 請求ディレクトリへコピー用月の準備
 if [ -s $tmp-riyousha_kesshoku_input ] ; then
   cat $tmp-riyousha_kesshoku_input |
   awk '{print substr($5,1,6)}'     |
   LANG=C sort -u                   > $tmp-kesshoku_month
 else
   :
 fi

[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit


#cp $tmp-* /home/hands/work/okuda
###########################
# 4:食事実績テーブル
###########################

# 欠食データがあった場合、実績データの方にも上書き
#if [ -s $tmp-riyousha_kesshoku_input ] ; then
#  cat  $tmp-riyousha_kesshoku_input |
# 1:利用者(入居者)ID 2:施設ID     3:建屋       4:居室     5:欠食年月日
# 6:欠食食事         7:入院外泊ID 8:削除フラグ 9:更新日時 10:UserID

  # 列合わせ
#  awk '{print $1,$2,$3,$4,$5,"000",$6,"000","0","0",$(NF-2),$(NF-1),$NF}' > $tmp-riyousha_shokuji_jisseki_input

#else
#  : > $tmp-riyousha_shokuji_jisseki_input
#fi

#[ $(plus ${PIPESTATUS[@]}) -eq 0 ] || error_exit

### INPUTデータの作成
### 後で見てわかりやすいように書く
#echo "${INPUT_TEXT1} _"           |
### 加工済みのデータだけを元にして一旦selfする
#self NF 1  NF NF NF NF            |
# 1:ID         2:入力内容 3:入力者 4:入力者名 5:最終更新日時
# 6:最終更新者
# 最終的に更新情報を代入
#awk '{$1="'${data_id}'";
#      $3="'${USER_ID}'";
#      $4="'${USER_NAME}'";
#      $5="'${cur_time}'";
#      $6="'${USER_ID}'";
#      print}'                     > $tmp-sample_input
### ここでのtmpファイル名は更新時に使うので注意すること
#--------------------------------------------------------------
#--------------------------------------------------------------
# 更新対象ファイルのリスト化

# 1:ファイルのパス 2:ファイル名
## ロックファイル作成用テーブル
## POMPAファイルがPOMPA直下でなく、店などのサブディレクトリ配下にいる場合には
## 1フィールド目が「${TEN_CODE}/SAMPLE_DATA」などになる
cat <<- FIN | LANG=C sort -u > $tmp-target-table
RIYOUSHA_NYUUINGAIHAKU RIYOUSHA_NYUUINGAIHAKU
RIYOUSHA_NYUUINGAIHAKU_KESSHOKU RIYOUSHA_NYUUINGAIHAKU_KESSHOKU
FIN

[ -s $tmp-riyousha_kesshoku_input ] && echo "RIYOUSHA_KESSHOKU RIYOUSHA_KESSHOKU" >> $tmp-target-table

# 1:tmpファイル名 2:更新ファイル名 3:キーフィールド 4:更新時間フィールド 5:全体列数
# 6:POMPA場所     7:INPUT場所

# 更新ファイルの作成とチェック用のテーブル
# 6/7フィールド目は、アプリ間連携で別アプリの配下にあるINPUTを更新する場合用
cat <<- FIN > $tmp-koushin_pompa
riyousha_nyuuingaihaku RIYOUSHA_NYUUINGAIHAKU 2 18 19 ${pompa_dir} ${input_dir}
riyousha_nyuuingaihaku_kesshoku RIYOUSHA_NYUUINGAIHAKU_KESSHOKU 2 12 13 ${pompa_dir} ${input_dir}
FIN

[ -s $tmp-riyousha_kesshoku_input ] && echo "riyousha_kesshoku RIYOUSHA_KESSHOKU 6 9 10 ${pompa_dir} ${input_dir}" >> $tmp-koushin_pompa

#--------------------------------------------------------------
# データロック
$function_dir/FUNCTION.LOCK_CHECK $tmp-target-table
if [ $? -ne 0 ]; then
# エラー（ロックに失敗）
#  error_unlock "ロック処理失敗"
# 20150910mod
# ロック処理で失敗したときにアンロック（ロックファイルを削除）すると、他ユーザによるロックを解除してしまうのでerror_exitに変更。
# ロック成功後、ロック解除までの間にエラーが起きてシェルをexitする場合はerror_unlockで確実にロックファイルを削除する。
  error_exit "ロック処理失敗"
fi
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新版作成
# POMPAと指定されたキー項目をつかってマージする
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  cat $tmp-${input_name}_input |
  if [ -e ${pompa_dir_name}/${file_name} ] ; then
    cat ${pompa_dir_name}/${file_name} -
  else
    cat -
  fi |
  LANG=C sort -k1,${sort_key} -k${time_key},${time_key} |
  getlast 1 ${sort_key}        > $tmp-${input_name}_new
done
#--------------------------------------------------------------
#--------------------------------------------------------------
# 列数チェック
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  [ "$(retu $tmp-${input_name}_new)" != "${retu_no}" ] && : > $tmp-err
  [ "$(retu $tmp-${input_name}_new | gyo)" != "1" ] && : > $tmp-err
  [ "$(awk 'NF!="'${retu_no}'"' $tmp-${input_name}_new | gyo)" != "0" ] && : > $tmp-err
done
[ -e $tmp-err ] && error_unlock "列数エラー"
## error_exit ではなく error_unlock である点に注意！
#--------------------------------------------------------------

#--------------------------------------------------------------
# 更新
cat $tmp-koushin_pompa         |
while read input_name file_name sort_key time_key retu_no pompa_dir_name input_dir_name ; do
  mkdir -p ${pompa_dir_name}
  mkdir -p ${input_dir_name}
  mkdir -p ${input_dir_name}/${today}/NYUUINGAIHAKU/${Shisetsu}/${Tateya}

  mv -f $tmp-${input_name}_input ${input_dir_name}/${today}/NYUUINGAIHAKU/${Shisetsu}/${Tateya}/${file_name}.${cur_time}.$(basename $0).$$
  mv -f $tmp-${input_name}_new ${pompa_dir_name}/${file_name}
done
#--------------------------------------------------------------


cp -p ${pompa_dir}/RIYOUSHA_NYUUINGAIHAKU ${data_dir}/RIYOUSHA_NYUUINGAIHAKU
cp -p ${pompa_dir}/RIYOUSHA_NYUUINGAIHAKU_KESSHOKU ${data_dir}/RIYOUSHA_NYUUINGAIHAKU_KESSHOKU
[ -s ${pompa_dir}/RIYOUSHA_KESSHOKU ] && cp -p ${pompa_dir}/RIYOUSHA_KESSHOKU ${data_dir}/RIYOUSHA_KESSHOKU

if [ -s ${pompa_dir}/RIYOUSHA_KESSHOKU ] ; then
  cat $tmp-kesshoku_month |
  while read MONTH ;do
    mkdir -p ${seikyuu_dir}/${MONTH}
    awk 'substr($5,1,6)=="'${MONTH}'"{print $0}' ${pompa_dir}/RIYOUSHA_KESSHOKU > $tmp-month_riyousha_kesshoku

    [ -s $tmp-month_riyousha_kesshoku ] && cp -p $tmp-month_riyousha_kesshoku  ${seikyuu_dir}/${MONTH}/RIYOUSHA_KESSHOKU
  done
fi




#--------------------------------------------------------------
# ロックの解除
cat $tmp-target-table |
while read table base ;do
  rm -f $tmplock_dir/$base.lock
done
#--------------------------------------------------------------
#20150915mod ロック範囲外のためロック解放前に移動　↑
#cp -p ${pompa_dir}/RIYOUSHA_NYUUINGAIHAKU ${data_dir}/RIYOUSHA_NYUUINGAIHAKU
#cp -p ${pompa_dir}/RIYOUSHA_NYUUINGAIHAKU_KESSHOKU ${data_dir}/RIYOUSHA_NYUUINGAIHAKU_KESSHOKU
#[ -s ${pompa_dir}/RIYOUSHA_KESSHOKU ] && cp -p ${pompa_dir}/RIYOUSHA_KESSHOKU ${data_dir}/RIYOUSHA_KESSHOKU
#
#if [ -s ${pompa_dir}/RIYOUSHA_KESSHOKU ] ; then
#  cat $tmp-kesshoku_month |
#  while read MONTH ;do
#    mkdir -p ${seikyuu_dir}/${MONTH}
#    awk 'substr($5,1,6)=="'${MONTH}'"{print $0}' ${pompa_dir}/RIYOUSHA_KESSHOKU > $tmp-month_riyousha_kesshoku
#
#    [ -s $tmp-month_riyousha_kesshoku ] && cp -p $tmp-month_riyousha_kesshoku  ${seikyuu_dir}/${MONTH}/RIYOUSHA_KESSHOKU
#  done
#fi

echo "result ok" "${nyuuingaihaku_id}"

## 終了
rm -f $tmp-*
exit 0
