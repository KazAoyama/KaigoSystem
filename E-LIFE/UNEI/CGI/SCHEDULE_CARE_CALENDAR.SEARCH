#!/bin/bash
#
# SCHEDULE_CARE_CALENDAR.SEARCH
# スケジュールカレンダー表示　検索用CGI
#
# Written by K.Aoyama :20131229

#--------------------------------------------------------------
# ログ
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null
mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).$HOSTNAME.$(date +%Y%m%d) ; set -xv
#--------------------------------------------------------------

#--------------------------------------------------------------
rm -f $tmp-*
#--------------------------------------------------------------

#--------------------------------------------------------------
function error_exit {
  rm -f $tmp-*
  exit 0
}
#--------------------------------------------------------------

#--------------------------------------------------------------
# 変数の定義
namedata=$1

# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------------

# テスト

#--------------------------------------------------------------
# 入力データのチェック
# ユーザＩＤ
[ -z "${userid}" -o "${userid}" = "_" ] && error_exit "ログインユーザが不明です"
# 施設
[ -z "${shisetsu}" -o "${shisetsu}" = "_" ] && error_exit "施設が不明です"

[ -z "${displayShisetsu}" -o "${displayShisetsu}" = "_" ] && displayShisetsu=$shisetsu

echo ${displayShisetsu} > $tmp-displayShisetsu

#--------------------------------------------------------------
# ヘッダー部分生成
#--------------------------------------------------------------
cat <<- FIN > $tmp-header
FIN

cat ${tmp}-header   |
yarr                > ${tmp}-header_yoko

###################################
# スケジュール種類
###################################
CGI_NAME="SCHEDULE_CARE"
schedule_code=$(awk '$(NF-2)!="9"&&$3=="'$CGI_NAME'"{print $1}' ${home_dir}/TBL/CONFIG/SCHEDULE_SHURUI | tail -1)


###################################
# スケジュールタイプマスタ
###################################

cat ${home_dir}/TBL/SCHEDULE_MASTER/SCEDULE_TYPE_MASTER |
awk '$(NF-2)!="9"&&$4=="'$schedule_code'"&&$5=="'$displayShisetsu'"'       |
# 1:集計グループID 2:集計グループ
#--------------------------------------------------------------
self 1 3  > ${tmp}-schedule_color

cp $tmp-schedule_color $work_dir/color

#--------------------------------------------------------------
# スケジュール詳細基本ファイルの取得
cat ${apdata_dir}/SCHEDULE/SCHEDULE_SHOUSAI |
awk '$(NF-2)!="9"'                          |
# ケア施設絞込み
LANG=C sort -k3,3                           |
join0 key=3 ${tmp}-schedule_color           |
# 1:施設      2:スケジュールID 3:スケジュールタイプ 4:スケジュール名 5:開催日
# 6:開始時刻  7:終了時刻       8:予約状況           9:開催場所       10:費用
# 11:担当者1  12:担当者2       13:追記              14:建屋          15:有効フラグ
# 16:処理時間 17:ユーザID
#--------------------------------------------------------------
###############################
# 検索
##############################
# 施設
LANG=C sort -k1,1             |
tee $work_dir/schedule_work1  |
join0 key=1 $tmp-displayShisetsu        |
tee $work_dir/schedule_work2  |
# 建屋
if [ -z "$EventTateya" -o "$EventTateya" = "_" ] ; then
   cat -
else
   awk '$14=="'$EventTateya'"'
fi |
tee $work_dir/schedule_work3  |
# スケジュールタイプ
if [ -z "$ScheduleKubun" -o "$ScheduleKubun" = "_" ] ; then
   cat -
else
   awk '$3=="'$ScheduleKubun'"'
fi |
tee $work_dir/schedule_work4  |
delf NF-2/NF  |
# 1:スケジュールID 2:スケジュールタイプ 3:スケジュール名 4:開催日 5:開始時刻
# 6:終了時刻       7:開催場所
self 2/7 9     |
LANG=C sort -k2,2    |
tee $work_dir/before_color |
join1 key=2 $tmp-schedule_color - |
# 1:スケジュールID 2:スケジュールタイプ 3:色       4:スケジュール名 5:開催日
# 6:開始時刻       7:終了時刻           8:開催場所
# 1:スケジュールID 2:タイトル   3:開始日 4:開始時間 5:終了日
# 6:終了時間       7:全日(固定) 8:色
awk '{print $1,$4,$5,$6,$5,$7,"_",$3}' > ${tmp}-schedule_list
[ $(plus ${PIPESTATUS[@]}) -ne 0 ] && error_exit "スケジュールリスト取得エラー"

cp ${tmp}-schedule_list $work_dir/schedule_list

#--------------------------------------------------------------
# 出力
cat ${tmp}-schedule_list


## 終了
rm -f $tmp-*
exit 0
