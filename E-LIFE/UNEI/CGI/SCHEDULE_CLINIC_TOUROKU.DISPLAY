#!/bin/bash
#
# SCHEDULE_CLINIC_TOUROKU.DISPLAY : スケジュールマスタ表示
#
# Usage : SCHEDULE_CLINIC_TOUROKU.DISPLAY
#
# Written by aoyagi

# ログ
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*

# ディレクトリ設定
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

# 変数の定義
namedata=$1
checkfile=$2
result_data=$3
#koushin_data=$4
today="$(date +%Y%m%d)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu

# ケアのみのため
EventTateya="1"



# ユーザ退去制御
awk '$(NF-2)!=9' ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_KIHON     |
awk '$6!~/^3/'                                       |
awk '$4<="'$today'"&&"'$today'"<=$5{print $1}'  |
LANG=C sort -k1,1                                    > $tmp-yuko-jyugyoin

# ログインUSER名と施設の取得（仮）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
tee $tmp-user_mst_tmp                                  |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

# 該当の施設、建屋のみのスタッフ
cat $home_dir/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU $home_dir/TBL/JYUUGYOUIN_MASTER/EXTRA_USER_SHISETSU  |
LANG=C sort -k2,2                                  |
join0 key=2 ${tmp}-shisetsu                        |
if [ "$EventTateya" = "1" ] ; then
  awk '$3!="02"'
else
  awk '{print $0}'
fi |
self 1 |
LANG=C sort -k1,1                                  > $tmp-shisetsu_user

cat $tmp-user_mst_tmp                              |
LANG=C sort -k1,1                                  |
join0 key=1 $tmp-shisetsu_user                     |
join0 key=1 $tmp-yuko-jyugyoin                     > $tmp-user_mst


self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst

cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou

echo "SCHEDULE_ICHIRAN.CGI" > $tmp-cgi
# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
awk '$2=="0000"||$2=="'$shisetsu'"'         |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -k7,7                                          |
join0 key=7 $tmp-cgi                                       > ${tmp}-kengenlist

[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------

#--------------------------------------------------------------
### モードによる表示の分岐
case "${MODE}" in

  # 初期表示
  init | to_reset) 
    : > $tmp-listdata
  ;;


  # 検索
  search) 
    if [ "$(gyo ${result_data})" != 0 ] ; then
      cat ${result_data}        > $tmp-listdata
    else
    : > $tmp-listdata
    fi
  ;;


  # 更新
  regist)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
      ScheduleID=$(awk '$1=="SID"{print $2}' ${result_data})
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
#    if [ "$(gyo ${result_data})" != 0 ] ; then
#      cat ${result_data}        > $tmp-listdata
#    else
#    : > $tmp-listdata
#    fi
    : > $tmp-listdata

  ;;

  # 更新
  update)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
      ScheduleID=$(awk '$1=="SID"{print $2}' ${result_data})
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
#    if [ "$(gyo ${result_data})" != 0 ] ; then
#      cat ${result_data}        > $tmp-listdata
#    else
#    : > $tmp-listdata
#    fi
    : > $tmp-listdata

  ;;

esac


#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
##else
##cat << FIN > $tmp-html2
##    <script type="text/javascript" language="javascript">
##      window.close();
##    </script>
##FIN
fi
#--------------------------------------------------------------

cp $tmp-listdata $work_dir/listdata

# データ取得
# 基本データ
cat $tmp-listdata |
awk '$1=="k"'     |
delf 1            > $tmp-listdata_kihon


: > $tmp-sankasha
cat $tmp-listdata |
awk '$1=="s"'     |
delf 1            > $tmp-sankasha


: > $tmp-guest
cat $tmp-listdata |
awk '$1=="g"'     |
delf 1            > $tmp-guest


#--------------------------------------------------------
# 基本データのネーム変換
eval $(name-source ${tmp}-listdata_kihon)
#--------------------------------------------------------


###################################
# スケジュールタイプマスタ
###################################

cat ${home_dir}/TBL/SCHEDULE_MASTER/SCEDULE_TYPE_MASTER |
# 施設ケアの項目のみ取得する
awk '$4=="04" && $5=="'${shisetsu}'" && $(NF-2)!="9"'   |
# 1:集計グループID 2:集計グループ
#--------------------------------------------------------------
delf NF-2/NF                                            |
LANG=C sort                                             > ${tmp}-scheduletype_master

###################################
# スケジュール表示順
###################################
if [ -s ${home_dir}/TBL/SCHEDULE_MASTER/SCHEDULE_MASTER_ADD ] ; then
  awk '$1=="'$shisetsu'"' ${home_dir}/TBL/SCHEDULE_MASTER/SCHEDULE_MASTER_ADD |
  self 2 3 |
  LANG=C sort -k1,1 > $tmp-schedule_sort
fi

[ "$(gyo $tmp-schedule_sort)" = "0" ] && echo "_" "_" > $tmp-schedule_sort


###################################
# スケジュールマスタ
###################################
# 1:施設       2:スケジュールID 3:スケジュール 4:スケジュールタイプ 5:費用
# 6:課税区分 7:有効フラグ 8:処理時間       9:ユーザID
cat ${home_dir}/TBL/SCHEDULE_MASTER/SCHEDULE_MASTER |
#--------------------------------------------------------------
# 1:スケジュールID 2:スケジュール 3:費用 4:スケジュールタイプ 5:課税区分
self 2 3 5 4 6                                      |
LANG=C sort -k4,4                                   |
join0 key=4 $tmp-scheduletype_master                |
LANG=C sort -k1,1   |
join2 +"99" key=1 $tmp-schedule_sort |
LANG=C sort -k2n,2n |
delf 2                                   > ${tmp}-schedule_master

# 階数
[ -z "$floor" -o "$floor" = "_" ] && floor="0"

##################################
# 入居者マスタ
##################################

cat ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
awk '$(NF-2)!="9"&&$7<="'$today'"&&"'$today'"<=$8'  |
# 1:建屋 2:利用者ID
awk '$1=="'$shisetsu'"{print int($2),$3,$5,$6}'              |
awk '$1=="'$EventTateya'"{print $2,$3,$4}'                   |
if [ "$floor" = "0" ] ; then
  awk '{print $3,$2}'
else
  awk '$1=="'$floor'"{print $3,$2}'
fi |
LANG=C sort -k1,1 > $tmp-sanka_riyousha

cp $tmp-sanka_riyousha $work_dir/shousai_sanka_riyousha

#cat ${home_dir}/TBL/RIYOUSHA/RIYOUSHA_MASTER          |
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER          |
awk '$5!="9"'             |
join1 key=1 $tmp-sanka_riyousha  |
self 1 3 2                  |
LANG=C sort -k3n,3n         |
# 施設紐付け要
# 1:利用者ID 2:利用者名 3:部屋番号
awk '{print $1,$2,$3}'     > $tmp-riyousha_master

cp $tmp-riyousha_master $work_dir/shousai_riyousha_master

cp ${tmp}-listdata_kihon $work_dir/listdata_kihon

# 施設階数
cat ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_TATEYA_FLOOR |
awk '$1=="'$shisetsu'"{print int($2),$3}'              |
awk '$1=="'$EventTateya'"{print $2}'                   |
LANG=C sort -k1,1 > $tmp-floor_mst

# 日にちはデフォルト今日
if [ -z "$EventDate" -o "$EventDate" = "_" ];then
   EventDate=$(echo $today | awk '{print substr($1,1,4)"-"substr($1,5,2)"-"substr($1,7,2)}')
else
  EventDate=$(echo ${EventDate} | sed 's/\//-/g')
fi

# 建屋表示
echo "1" "シニア" > $tmp-tateya_mst
echo "2" "ケア" >> $tmp-tateya_mst

awk '$1=="'$EventTateya'"{print $2}' $tmp-tateya_mst > $tmp-disp_tateya

tateya=$(self 1 $tmp-disp_tateya)

cat << FIN | sed 's/ _$/ @/g' >> $tmp-calsed
###SCHEDULEID### $ScheduleID
###EVENTTYPE### $EventType
###EVENTNAME### $EventName
###EVENTDATE### $EventDate
###EVENTSTART### $EventStart
###EVENTEND### $EventEnd
###EVENTYOYAKU### $EventYoyaku
###EVENTPLACE### $EventPlace
###EVENTFEE### $EventFee
###EVENTTANTOUSHA1### $EventTantousha1
###EVENTTANTOUSHA2### $EventTantousha2
###EVENTSUPPLEMENT### $EventSupplement
###EVENTTATEYA### $EventTateya
###TATEYA### $tateya
###BACKCGI### $fromScreen
###FLOOR### $floor
###KAISAIBI### $dispKaisaiDate
###EVENTKAZEIKBN### $EventKazeiKbn
###USERID### $userid
###PASSWORD### $password
###SHISETSUID### $shisetsu
###DROPDOWN_ACTIVE1### active
###LI_UNEI3### active
###SELECT_SHISETSU### $select_shisetsu
FIN

cat $checkfile >> $tmp-calsed

if [ "${MODE}" = "regist" -o "${MODE}" = "update" ] ; then

# 利用者データ
# 入居者ID
echo ${dataCsvEventRiyoushaId}           |
sed 's/,/ /g'      > $tmp-riyoushaid

# 利用者チェック
echo ${dataCsvEventRiyoushaCheck}           |
sed 's/,/ /g'      > $tmp-riyoushacheck

# 利用者備考
echo ${dataCsvEventRiyoushaBiko}           |
sed 's/,/ /g'      > $tmp-riyoushabiko

# 利用者費用
echo ${dataCsvEventRiyoushaFee}           |
sed 's/,/ /g'      > $tmp-riyoushafee

cat $tmp-riyoushaid $tmp-riyoushabiko $tmp-riyoushacheck $tmp-riyoushafee |
tateyoko > ${tmp}-sankasha

# ゲスト参加者データ
seq $GaibuNum  |
while read gaibunum ; do
    gnum=$((gaibunum-1))
    guestname=$(nameread GuestName$gnum $namedata | head -1)
    guestkankeisha=$(nameread KankeiRiyoushamei$gnum $namedata | head -1)
    guestkankeishaid=$(nameread KankeiRiyoushaid$gnum $namedata | head -1)
    guestbiko=$(nameread GuestBiko$gnum $namedata | head -1)
    guestfee=$(nameread GuestFee$gnum $namedata | head -1)
    guestseibetsu=$(nameread slGuestSeibetsu$gnum $namedata | head -1)
# 1:ゲスト名 2:関係入居者 3:関係入居者ID 4:備考 5:費用
# 6:性別
    echo "$guestname" "$guestkankeisha" "$guestkankeishaid" "$guestbiko" "$guestfee" "$guestseibetsu" >> $tmp-guest
done

fi

if [ "${MODE}" = "init" ] ; then
# 利用者データ
# 1:入居者ID 2:利用者備考 3:利用者チェック 4:利用者費用
[ -z ${Riyoushaid} -o ${Riyoushaid} = "_" ] || echo "${Riyoushaid}" "###SPACE###" "1" "0" > ${tmp}-sankasha 

fi

: > $tmp-ajaxriyousha


#-----------------------------------------------------------
# 登録・印刷ボタンの表示
# 施設名はログインユーザーの権限のある施設を取得
self 9 $tmp-kengenlist |
LANG=C sort -k1,1      |
tail -1                > $tmp-dispkengen

# 権限がない人は新規登録や出力が出来ない
if [ $(cat $tmp-dispkengen) = "3" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### @"   >> $tmp-calsed
elif [ $(cat $tmp-dispkengen) = "2" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
else
  echo "###SHINKITOUROKUDISP### none" >> $tmp-calsed
  echo "###TOUROKUDISP### none" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
fi

# 日誌からの画面遷移の場合、リンクできるボタンは消す
if [ "$fromScreen" = "NISSHI_SENIOR" ] ; then
  echo "###NISSHINONE### none"   >> $tmp-calsed
  echo "###NISSHIDISP### @"   >> $tmp-calsed
else
  echo "###NISSHINONE### @"   >> $tmp-calsed
  echo "###NISSHIDISP### none"   >> $tmp-calsed
fi

cat $tmp-calsed      |
sed 's/\\n/###KAIGYO###/g'     >  $tmp-calsed_kaigyozumi

# HTMLの作成
#cat ${html_dir}/SCHEDULE_CARE_TOUROKU1.html ${home_dir}/KYOUTSU/HTML/MENUBAR.html ${html_dir}/SCHEDULE_CARE_TOUROKU2.html |
if [ "$fromScreen" = "NISSHI_SENIOR" ] ; then
  cat ${html_dir}/SCHEDULE_CLINIC_TOUROKU1.html ${html_dir}/SCHEDULE_CLINIC_TOUROKU2.html
else
  cat ${html_dir}/SCHEDULE_CLINIC_TOUROKU1.html ${home_dir}/KYOUTSU/HTML/MENUBAR.html ${html_dir}/SCHEDULE_CLINIC_TOUROKU2.html
fi |
calsed -f $tmp-calsed_kaigyozumi - |
mojihame -l###USER__NAME### - ${tmp}-usermei |
mojihame -l###SHISETSU_TAISHOU### - ${tmp}-shisetsu_taishou |
mojihame -l###TANTOUSHA1### - $tmp-user_mst      |
mojihame -l###TANTOUSHA2### - $tmp-user_mst      |
mojihame -l###RIYOUSHA### - $tmp-riyousha_master |
mojihame -l###SANKASHA### - ${tmp}-sankasha |
mojihame -l###AJAXRIYOUSHA### - ${tmp}-ajaxriyousha |
mojihame -l###GUEST### - ${tmp}-guest     |
mojihame -l###SCHEDULE### - $tmp-schedule_master |
mojihame -l###SCHEDULETYPE### - $tmp-scheduletype_master |
mojihame -l###SHISETSUFLOOR### - $tmp-floor_mst |
sed 's/###KAIGYO###/\n/g'     |
sed 's/###SPACE###/ /g'       |
sed 's/"_"/""/g'              |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
#formhame -d"_" - ${namedata}  |
cat -
#--------------------------------------------------------------

rm -f ${tmp}-*
exit 0
