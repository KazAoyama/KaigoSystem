#!/bin/bash
#
# SCHEDULE_NYUKYOSHA_TOUROKU.DISPLAY : スケジュールマスタ表示
#
# Usage : SCHEDULE_NYUKYOSHA_TOUROKU.DISPLAY
#
# Written by K.Aoyama(HANDS.LAB)

# ログ
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv

rm -f $tmp-*

# ディレクトリ設定
test_tbl_dir="${home_dir}/TEST/TBL"
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

# 変数の定義
namedata=$1
checkfile=$2
result_data=$3
#koushin_data=$4
today="$(date +%Y%m%d)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------


echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu

# ユーザ退去制御
awk '$(NF-2)!=9' ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_KIHON     |
awk '$6!~/^3/'                                       |
awk '$4<="'$today'"&&"'$today'"<=$5{print $1}'  |
LANG=C sort -k1,1                                    > $tmp-yuko-jyugyoin

# ログインUSER名と施設の取得（仮）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
tee $tmp-user_mst_tmp                                  |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

# 該当の施設、建屋のみのスタッフ
cat $home_dir/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU $home_dir/TBL/JYUUGYOUIN_MASTER/EXTRA_USER_SHISETSU  |
LANG=C sort -k2,2                                  |
join0 key=2 ${tmp}-shisetsu                        |
if [ "$EventTateya" = "1" ] ; then
  awk '$3!="02"'
else
  awk '{print $0}'
fi |
self 1 |
LANG=C sort -k1,1                                  > $tmp-shisetsu_user

cat $tmp-user_mst_tmp                              |
LANG=C sort -k1,1                                  |
join0 key=1 $tmp-shisetsu_user                     |
join0 key=1 $tmp-yuko-jyugyoin                     > $tmp-user_mst


self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst

cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou

echo "GONYUKYOSHA_SCHEDULE.CGI" > $tmp-cgi
# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
awk '$2=="0000"||$2=="'$shisetsu'"'         |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -k7,7                                          |
join0 key=7 $tmp-cgi                                       > ${tmp}-kengenlist

[ -z "${MODE}" ] && MODE="init"
#--------------------------------------------------------------

#--------------------------------------------------------------
### モードによる表示の分岐
case "${MODE}" in

  # 初期表示
  init | to_reset) 
    : > $tmp-listdata
  ;;


  # 検索
  search) 
    if [ "$(gyo ${result_data})" != 0 ] ; then
      cat ${result_data}        > $tmp-listdata
    else
    : > $tmp-listdata
    fi
  ;;


  # 更新
  regist)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
      ScheduleID=$(awk '$1=="SID"{print $2}' ${result_data})
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
#    if [ "$(gyo ${result_data})" != 0 ] ; then
#      cat ${result_data}        > $tmp-listdata
#    else
#    : > $tmp-listdata
#    fi
    : > $tmp-listdata

  ;;

  # 更新
  update)
    # 結果判定
    result=$(awk '$1=="result"{print $2}' ${result_data})
#    result_all="$(gyo ${listdata})"
    if [ "${result}" = "ok" ] ; then
      message="更新完了"
      ScheduleID=$(awk '$1=="SID"{print $2}' ${result_data})
    else
      message=$(awk '$1=="message"{print $2}' ${result_data})
      [ -z "${message}" ] && message="処理エラー"
    fi
#    if [ "$(gyo ${result_data})" != 0 ] ; then
#      cat ${result_data}        > $tmp-listdata
#    else
#    : > $tmp-listdata
#    fi
    : > $tmp-listdata

  ;;

esac


#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
##else
##cat << FIN > $tmp-html2
##    <script type="text/javascript" language="javascript">
##      window.close();
##    </script>
##FIN
fi
#--------------------------------------------------------------

cp $tmp-listdata $work_dir/listdata

# データ取得
# 基本データ
cat $tmp-listdata |
awk '$1=="k"'     |
delf 1            > $tmp-listdata_kihon

# 日付(至)データ
cat $tmp-listdata |
awk '$1=="f"'     |
delf 1            > $tmp-listdata_enddate


: > $tmp-sankasha
cat $tmp-listdata |
awk '$1=="s"'     |
delf 1            > $tmp-sankasha


: > $tmp-guest
cat $tmp-listdata |
awk '$1=="g"'     |
delf 1            > $tmp-guest

: > $tmp-reserve
cat $tmp-listdata |
awk '$1=="r"'     |
self 2            > $tmp-reserve

if [ "$(gyo $tmp-reserve)" != "0" ] ; then
EventReserve=$(tail -1 $tmp-reserve)
fi

# レストラン予約注文
:> $tmp-listdata_restaurant
cat $tmp-listdata |
awk '$1=="y"'     |
delf 1            > $tmp-listdata_restaurant

# ケータリング
:> $tmp-listdata_catering
cat $tmp-listdata |
awk '$1=="c"'     |
delf 1            > $tmp-listdata_catering

#--------------------------------------------------------
# 基本データのネーム変換
eval $(name-source ${tmp}-listdata_kihon)
#--------------------------------------------------------

###################################
# スケジュール種類
###################################
CGI_NAME="SCHEDULE_NYUKYOSHA"
schedule_code=$(awk '$(NF-2)!="9"&&$3=="'$CGI_NAME'"{print $1}' ${home_dir}/TBL/CONFIG/SCHEDULE_SHURUI | tail -1)


###################################
# スケジュールタイプマスタ
###################################

cat ${home_dir}/TBL/SCHEDULE_MASTER/SCEDULE_TYPE_MASTER |
awk '$(NF-2)!="9"&&$4=="'$schedule_code'"&&$5=="'$shisetsu'"'       |
# 1:集計グループID 2:集計グループ
#--------------------------------------------------------------
delf NF-2/NF  > ${tmp}-scheduletype_master

###################################
# スケジュール表示順
###################################
if [ -s ${home_dir}/TBL/SCHEDULE_MASTER/SCHEDULE_MASTER_ADD ] ; then
  awk '$1=="'$shisetsu'"' ${home_dir}/TBL/SCHEDULE_MASTER/SCHEDULE_MASTER_ADD |
  self 2 3 |
  LANG=C sort -k1,1 > $tmp-schedule_sort
fi

[ "$(gyo $tmp-schedule_sort)" = "0" ] && echo "_" "_" > $tmp-schedule_sort

###################################
# スケジュールマスタ
###################################
# 1:施設       2:スケジュールID 3:スケジュール 4:スケジュールタイプ 5:費用
# 6:有効フラグ 7:処理時間       8:ユーザID
cat ${home_dir}/TBL/SCHEDULE_MASTER/SCHEDULE_MASTER |
awk '$(NF-2)!="9"&&$1=="'$shisetsu'"' |
LANG=C sort -k4,4                            |
join0 key=4 ${tmp}-scheduletype_master       |
#--------------------------------------------------------------
# 1:スケジュールID 2:スケジュール 3:費用 4:スケジュールタイプ 5:課税区分
self 2 3 5 4 6  |
LANG=C sort -k1,1  |
join2 +"99" key=1 $tmp-schedule_sort |
LANG=C sort -k2n,2n |
delf 2 > ${tmp}-schedule_master

# 階数
[ -z "$floor" -o "$floor" = "_" ] && floor="0"


###################################
# 部屋マスタ
###################################

cat ${home_dir}/TBL/FACILITY_MASTER/FACILITY_MASTER |
# 施設ケアの項目のみ取得する
awk '$1=="'${shisetsu}'" && $(NF-2)!="9"'           |
self 2 3                                            |
LANG=C sort                                         > ${tmp}-facility_master

[ -z "${EventReserve}" -o "${EventReserve}" = "_" ] && EventReserve="00000"


##################################
# 入居者マスタ
##################################

cat ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
awk '$(NF-2)!="9"&&$7<="'$today'"&&"'$today'"<=$8'  |
# 1:建屋 2:利用者ID
awk '$1=="'$shisetsu'"{print int($2),$3,$5,$6}'              |
awk '$1=="'$EventTateya'"{print $2,$3,$4}'                   |
if [ "$floor" = "0" ] ; then
  awk '{print $3,$2}'
else
  awk '$1=="'$floor'"{print $3,$2}'
fi |
LANG=C sort -k1,1 > $tmp-sanka_riyousha

cp $tmp-sanka_riyousha $work_dir/shousai_sanka_riyousha

#cat ${home_dir}/TBL/RIYOUSHA/RIYOUSHA_MASTER          |
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER          |
awk '$(NF-2)!="9"'             |
tee $tmp-riyousha_basic_master |
join1 key=1 $tmp-sanka_riyousha  |
self 1 3 2                  |
LANG=C sort -k3n,3n         |
# 施設紐付け要
# 1:利用者ID 2:利用者名 3:部屋番号
awk '{print $1,$2,$3}'     > $tmp-riyousha_master

cp $tmp-riyousha_master $work_dir/shousai_riyousha_master

cp ${tmp}-listdata_kihon $work_dir/listdata_kihon

# 施設階数
cat ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_TATEYA_FLOOR |
awk '$1=="'$shisetsu'"{print int($2),$3}'              |
awk '$1=="'$EventTateya'"{print $2}'                   |
LANG=C sort -k1,1 > $tmp-floor_mst

#--------------------------------------------------------
# 日付(至)データのネーム変換
eval $(name-source ${tmp}-listdata_enddate)
#--------------------------------------------------------

# 日にちはデフォルト今日
[ -z "$EventDate" -o "$EventDate" = "_" ] && EventDate=$(mdate today | self 1 | awk '{print substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2)}')
[ -z "$EventEndDate" -o "$EventEndDate" = "_" ] && EventEndDate=${EventDate}
#[ -z "$EventEndDate" -o "$EventEndDate" = "_" ] && EventEndDate=$(mdate today/+1 | self 1 | awk '{print substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2)}')

# 建屋表示
echo "1" "シニア" > $tmp-tateya_mst
echo "2" "ケア" >> $tmp-tateya_mst

awk '$1=="'$EventTateya'"{print $2}' $tmp-tateya_mst > $tmp-disp_tateya

tateya=$(self 1 $tmp-disp_tateya)

cat ${home_dir}/TBL/CONFIG/SCHEDULE_NISSHI_NOTE > $tmp-nisshi_note

# 入居者から入れた参加者は１名
if [ $(gyo $tmp-sankasha) -gt 0 ] ; then
  self 1 $tmp-sankasha |
  tail -1 > $tmp-sanka-riyoushaid
  Riyoushaid=$(cat $tmp-sanka-riyoushaid) 
fi

if [ -z "$Riyoushamei" -o "$Riyoushamei" = "_" ]; then
  if [ -z "$Riyoushaid" -o "$Riyoushaid" = "_" ]; then
    :
  else
    Riyoushamei=$(awk '$1=="'$Riyoushaid'"{print $2}' $tmp-riyousha_basic_master | tail -1)
  fi
fi

# ケータリングタイプ
if [ "$CateringTypeMorning" = "1" ] ; then
   CateringType1="checked"
fi
if [ "$CateringTypeNoon" = "2" ] ; then
   CateringType2="checked"
fi
if [ "$CateringTypeNight" = "3" ] ; then
   CateringType3="checked"
fi

# レストラン予約注文
eval $(name-source ${tmp}-listdata_restaurant)

:> $tmp-restaurant_menu
if [ -s ${home_dir}/SHOKUJI/POMPA/${shisetsu}/SHOKUJI_RESTAURANT_MENU ] ; then
  self 1 2 ${home_dir}/SHOKUJI/POMPA/${shisetsu}/SHOKUJI_RESTAURANT_MENU |
  LANG=C sort -k1,1 > $tmp-restaurant_menu
fi

[ $(gyo $tmp-restaurant_menu) -eq 0 ] && echo "_" "_" > $tmp-restaurant_menu

# レストランメニュー
cat ${home_dir}/SHOKUJI/POMPA/${shisetsu}/SHOKUJI_MENU |
tee $tmp-full-menu |
# レストラン非表示の処理
join2 +"_" key=1 $tmp-restaurant_menu |
awk '$2!="1"' |
delf 2        |
# その他メニューより抽出
# 1:メニューID 2:メニュー名 3:朝食フラグ 4:昼食フラグ 5:夕食フラグ
# 6:有効開始   7:有効終了
LANG=C sort -k17n,17n                                 |
awk '$(NF-2)!="9"&&$3=="04"{print $1,$2,$10,$11,$12,$14,$15}' > $tmp-restaurant-menu

# ケータリング
eval $(name-source ${tmp}-listdata_catering)

# ケータリングメニュー
# 1:メニューID 2:メニュー名 3:朝食フラグ 4:昼食フラグ 5:夕食フラグ
# 6:有効開始   7:有効終了 8:食種
LANG=C sort -k17n,17n $tmp-full-menu |
awk '$(NF-2)!="9"{print $1,$2,$10,$11,$12,$14,$15,$3}' > $tmp-catering-menu

# 食種
cat ${home_dir}/TBL/CONFIG/SHOKUJI_SHURUI > $tmp-shokuji_shurui

awk '{if($1=="'$cateringShokushu1'"){print $1,$2,"selected"}else{print $1,$2,""};}' $tmp-shokuji_shurui > $tmp-catering_shokushu1
awk '{if($1=="'$cateringShokushu2'"){print $1,$2,"selected"}else{print $1,$2,""};}' $tmp-shokuji_shurui > $tmp-catering_shokushu2
awk '{if($1=="'$cateringShokushu3'"){print $1,$2,"selected"}else{print $1,$2,""};}' $tmp-shokuji_shurui > $tmp-catering_shokushu3
awk '{if($1=="'$cateringShokushu4'"){print $1,$2,"selected"}else{print $1,$2,""};}' $tmp-shokuji_shurui > $tmp-catering_shokushu4
awk '{if($1=="'$cateringShokushu5'"){print $1,$2,"selected"}else{print $1,$2,""};}' $tmp-shokuji_shurui > $tmp-catering_shokushu5


if [ "$rd_catering_roomservice" = "1" ] ; then
   rd_catering=""
   rd_roomservice="checked"
else
   rd_catering="checked"
   rd_roomservice=""
fi

# レストラン対象施設かどうか
cat ${home_dir}/TBL/CONFIG/RESTAURANT_SHISETSU_LIST |
while read res_shisetsuid ;do
    if [ "${res_shisetsuid}" = "${shisetsu}" ] ; then
       echo "1" > $tmp-disp_restaurant
       break
    else
       echo "0" > $tmp-disp_restaurant
    fi
: ; done

checkRestaurant=$(cat $tmp-disp_restaurant)

# ルームサービス対象施設かどうか
cat ${home_dir}/TBL/CONFIG/ROOMSERVICE_SHISETSU_LIST |
while read room_shisetsuid ;do
    if [ "${room_shisetsuid}" = "${shisetsu}" ] ; then
        echo "1" > $tmp-disp_catering
        break
    else
        echo "0" > $tmp-disp_catering
    fi
: ;done

checkRoomService=$(cat $tmp-disp_catering)

cat $checkfile > $tmp-calsed
cat << FIN | sed 's/ _$/ @/g' >> $tmp-calsed
###SCHEDULEID### $ScheduleID
###RIYOUSHAMEI### $Riyoushamei
###RIYOUSHAID### $Riyoushaid
###EVENTTYPE### $EventType
###EVENTNAME### $EventName
###EVENTDATE### $EventDate
###EVENTENDDATE### $EventEndDate
###EVENTSTART### $EventStart
###EVENTEND### $EventEnd
###EVENTYOYAKU### $EventYoyaku
###EVENTPLACE### $EventPlace
###EVENTFEE### $EventFee
###EVENTTANTOUSHA1### $EventTantousha1
###EVENTTANTOUSHA2### $EventTantousha2
###EVENTSUPPLEMENT### $EventSupplement
###EVENTTATEYA### $EventTateya
###TATEYA### $tateya
###BACKCGI### $fromScreen
###FLOOR### $floor
###KAISAIBI### $dispKaisaiDate
###EVENTKAZEIKBN### $EventKazeiKbn
###CATERINGTYPE1### $CateringType1
###CATERINGTYPE2### $CateringType2
###CATERINGTYPE3### $CateringType3
###ORDERMENUID### $restaurantMenu
###USERID### $userid
###PASSWORD### $password
###SHISETSUID### $shisetsu
###DROPDOWN_ACTIVE1### active
###LI_UNEI4#### active
###SELECT_SHISETSU### $select_shisetsu
###EVENTRESERVE### $EventReserve
###ORDERCANCEL### $OrderCancel
###NYUKYOSHAORDERNUM### $NyukyoshaOrderNum
###GUESTORDERNUM### $GuestOrderNum
###CATERINGCANCEL### $CateringCancel
###CATERINGMENUID1### $cateringMenu1
###NYUKYOSHACATERINGNUM1### $NyukyoshaCateringNum1
###GUESTCATERINGNUM1### $GuestCateringNum1
###CATERINGMENUID2### $cateringMenu2
###NYUKYOSHACATERINGNUM2### $NyukyoshaCateringNum2
###GUESTCATERINGNUM2### $GuestCateringNum2
###CATERINGMENUID3### $cateringMenu3
###NYUKYOSHACATERINGNUM3### $NyukyoshaCateringNum3
###GUESTCATERINGNUM3### $GuestCateringNum3
###CATERINGMENUID4### $cateringMenu4
###NYUKYOSHACATERINGNUM4### $NyukyoshaCateringNum4
###GUESTCATERINGNUM4### $GuestCateringNum4
###CATERINGMENUID5### $cateringMenu5
###NYUKYOSHACATERINGNUM5### $NyukyoshaCateringNum5
###GUESTCATERINGNUM5### $GuestCateringNum5
###RD_CATERING### $rd_catering
###RD_ROOMSERVICE### $rd_roomservice
###RESTAURANTCHECK### $checkRestaurant
###ROOMSERVICECHECK### $checkRoomService
FIN

if [ "${MODE}" = "regist" -o "${MODE}" = "update" ] ; then

# 利用者データ
# 入居者ID
echo ${dataCsvEventRiyoushaId}           |
sed 's/,/ /g'      > $tmp-riyoushaid

# 利用者チェック
echo ${dataCsvEventRiyoushaCheck}           |
sed 's/,/ /g'      > $tmp-riyoushacheck

# 利用者備考
echo ${dataCsvEventRiyoushaBiko}           |
sed 's/,/ /g'      > $tmp-riyoushabiko

# 利用者費用
echo ${dataCsvEventRiyoushaFee}           |
sed 's/,/ /g'      > $tmp-riyoushafee

cat $tmp-riyoushaid $tmp-riyoushabiko $tmp-riyoushacheck $tmp-riyoushafee |
tateyoko > ${tmp}-sankasha

# ゲスト参加者データ
seq $GaibuNum  |
while read gaibunum ; do
    gnum=$((gaibunum-1))
    guestname=$(nameread GuestName$gnum $namedata | head -1)
    guestkankeisha=$(nameread KankeiRiyoushamei$gnum $namedata | head -1)
    guestkankeishaid=$(nameread KankeiRiyoushaid$gnum $namedata | head -1)
    guestbiko=$(nameread GuestBiko$gnum $namedata | head -1)
    guestfee=$(nameread GuestFee$gnum $namedata | head -1)
    guestseibetsu=$(nameread slGuestSeibetsu$gnum $namedata | head -1)
# 1:ゲスト名 2:関係入居者 3:関係入居者ID 4:備考 5:費用
# 6:性別
    echo "$guestname" "$guestkankeisha" "$guestkankeishaid" "$guestbiko" "$guestfee" "$guestseibetsu" >> $tmp-guest
done

fi

if [ "${MODE}" = "init" ] ; then
# 利用者データ
# 1:入居者ID 2:利用者備考 3:利用者チェック 4:利用者費用
[ -z "${Riyoushaid}" -o "${Riyoushaid}" = "_" ] || echo "${Riyoushaid}" "###SPACE###" "1" "0" > ${tmp}-sankasha 

fi

# 入力制御用データ
: > $tmp-schedule_ctrl
if [ -s ${home_dir}/TBL/CONFIG/SCHEDULE_CTRL ] ; then
   cat ${home_dir}/TBL/CONFIG/SCHEDULE_CTRL > $tmp-schedule_ctrl
fi


: > $tmp-ajaxriyousha


#-----------------------------------------------------------
# 登録・印刷ボタンの表示
# 施設名はログインユーザーの権限のある施設を取得
self 9 $tmp-kengenlist |
LANG=C sort -k1,1      |
tail -1                > $tmp-dispkengen

# 権限がない人は新規登録や出力が出来ない
if [ $(cat $tmp-dispkengen) = "3" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### @"   >> $tmp-calsed
elif [ $(cat $tmp-dispkengen) = "2" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
else
  echo "###SHINKITOUROKUDISP### none" >> $tmp-calsed
  echo "###TOUROKUDISP### none" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
fi

# 日誌からの画面遷移の場合、リンクできるボタンは消す
if [ "$fromScreen" = "NISSHI_SENIOR" ] ; then
  echo "###NISSHINONE### none"   >> $tmp-calsed
  echo "###NISSHIDISP### @"   >> $tmp-calsed
else
  echo "###NISSHINONE### @"   >> $tmp-calsed
  echo "###NISSHIDISP### none"   >> $tmp-calsed
fi

cat $tmp-calsed      |
sed 's/\\n/###KAIGYO###/g'     >  $tmp-calsed_kaigyozumi

# HTMLの作成
if [ "$fromScreen" = "NISSHI_SENIOR" ] ; then
   cat ${html_dir}/SCHEDULE_NYUKYOSHA_TOUROKU1.html ${html_dir}/SCHEDULE_NYUKYOSHA_TOUROKU2.html
else
   cat ${html_dir}/SCHEDULE_NYUKYOSHA_TOUROKU1.html ${home_dir}/KYOUTSU/HTML/MENUBAR.html ${html_dir}/SCHEDULE_NYUKYOSHA_TOUROKU2.html
fi |
calsed -f $tmp-calsed_kaigyozumi - |
mojihame -l###USER__NAME### - ${tmp}-usermei |
mojihame -l###SHISETSU_TAISHOU### - ${tmp}-shisetsu_taishou |
mojihame -l###TANTOUSHA1### - $tmp-user_mst      |
mojihame -l###TANTOUSHA2### - $tmp-user_mst      |
mojihame -l###RIYOUSHA### - $tmp-riyousha_master |
mojihame -l###SANKASHA### - ${tmp}-sankasha |
mojihame -l###AJAXRIYOUSHA### - ${tmp}-ajaxriyousha |
mojihame -l###GUEST### - ${tmp}-guest     |
mojihame -l###SCHEDULE### - $tmp-schedule_master |
mojihame -l###SCHEDULETYPE### - $tmp-scheduletype_master |
mojihame -l###SHISETSUFLOOR### - $tmp-floor_mst |
mojihame -l###RESTAURANTMENU### - $tmp-restaurant-menu |
mojihame -l###CATERINGMENU### - $tmp-catering-menu |
mojihame -l###CATERINGSHOKUSHU1### - $tmp-catering_shokushu1 |
mojihame -l###CATERINGSHOKUSHU2### - $tmp-catering_shokushu2 |
mojihame -l###CATERINGSHOKUSHU3### - $tmp-catering_shokushu3 |
mojihame -l###CATERINGSHOKUSHU4### - $tmp-catering_shokushu4 |
mojihame -l###CATERINGSHOKUSHU5### - $tmp-catering_shokushu5 |
mojihame -l###RESERVE### - $tmp-facility_master |
mojihame -l###NISSHI_NOTE### - $tmp-nisshi_note |
mojihame -l###SCHEDULE_CTRL### - $tmp-schedule_ctrl |
sed 's/###KAIGYO###/\n/g'     |
sed 's/###SPACE###/ /g'       |
sed 's/"_"/""/g'              |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
#formhame -d"_" - ${namedata}  |
cat -
#--------------------------------------------------------------

rm -f ${tmp}-*
exit 0
