#!/bin/bash
#
# NISSHI_CARE.DISPLAY : 日誌（ケア表示)
#
# Usage : NISSHI_CARE.DISPLAY
#
# Written by K.Aoyama(HANDS.LAB)

# ログ
source /home/hands/E-LIFE/UNEI/CGI/UNEI.INI &> /dev/null
source /home/hands/.bashrc &> /dev/null

mkdir -p ${log_dir}/$(date +%Y%m%d)
exec 2> ${log_dir}/$(date +%Y%m%d)/LOG.$(basename ${0}).${HOSTNAME}.$(date +%Y%m%d) ; set -xv

# ディレクトリ設定
test_tbl_dir="${home_dir}/TEST/TBL"
uneitbl_dir="${home_dir}/UNEI/TBL"
uneitmp_dir="${home_dir}/SHISETSU_KAIGOKIROKU/POMPA/KAIGOJISSEKI"
kengen_dir="${home_dir}/TBL/KENGEN_KANRI"

#ゴミtmpの消去
rm -f $tmp-*

# 変数の定義
namedata=$1
checkfile=$2
today="$(date +%Y%m%d)"

#--------------------------------------------------------
# 必要な値の取得
eval $(name-source ${namedata})
#--------------------------------------------------------

echo ${userid}  > ${tmp}-user
echo ${password} > ${tmp}-pass
echo ${shisetsu} > ${tmp}-shisetsu

# ログインUSER名と施設の取得（仮）
cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_MASTER  |
tee ${tmp}-jugyoin                                 |
# 1:USER_ID 2:ユーザー名
join1 key=1 ${tmp}-user                            |
# 1:USER_ID 2:ユーザー名
self 2                                             > ${tmp}-usermei

self 1 2 ${tmp}-jugyoin                            |
LANG=C sort -k1,1                                  > $tmp-jugyoin_name_mst

self 1 2 ${home_dir}/TBL/JIGYOUSHO_MASTER/JIGYOUSHO_GROUP_MASTER > $tmp-jigyousho_group_mst
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON > $tmp-shisetsu_mst

cat $tmp-shisetsu_mst $tmp-jigyousho_group_mst > $tmp-disp_shisetsu_mst

cat $tmp-disp_shisetsu_mst |
# 1:施設コード 2:施設名
join1 key=1 ${tmp}-shisetsu                        |
self 2                                             > ${tmp}-user_shisetsu

[ -z "${displayShisetsu}" -o "${displayShisetsu}" = "_" ] && displayShisetsu=$shisetsu

echo ${displayShisetsu} > $tmp-displayShisetsu

if [ -z "${Floor}" -o "${Floor}" = "_" ] ; then
   cat ${home_dir}/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU   |
   LANG=C sort -k1,1                                  |
   join1 key=1 ${tmp}-user                            |
   self 4                                             > $tmp-default_floor
   Floor=$(self 1 $tmp-default_floor)
fi


# フロア
echo ${Floor}  > ${tmp}-floor

[ -z "$hdKijunDate" -o "$hdKijunDate" = "_" ] && hdKijunDate=$(mdate today | self 1)

# 本日の日付を取得
taishoutoday=$(mdate $hdKijunDate | awk '{print substr($1,1,4)"/"substr($1,5,2)"/"substr($1,7,2)}')
echo "${taishoutoday}" > $tmp-today

# 施設利用者テーブルより取得
# 1:利用者ID 2:施設ID   3:建屋ID 4:フロアID 5:ユニットID
# 6:部屋番号 7:from日付 8:to日付
awk '$(NF-2)!="9"' $data_dir/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
self 6 1/5 7 8 |
awk '$7<="'$hdKijunDate'"&&"'$hdKijunDate'"<=$8'  |
LANG=C sort -k1,1                                  > $tmp-shisetsu_riyousha


##############################################################
# 利用者基本情報
##############################################################
: > $tmp-riyousha_master
if [ -s ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER ] ; then
# 1:利用者ID 2:利用者名
  self 1 2 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_MASTER |
  tee $tmp-riyoushamei_mst                           |
# 1:利用者ID 2:施設ID   3:建屋ID 4:フロアID 5:ユニットID
# 6:居室ID   7:from日付 8:to日付 9:利用者名
  join1 key=1 $tmp-shisetsu_riyousha |
  LANG=C sort -k2,2                               |
# 施設絞込み
  join0 key=2 $tmp-displayShisetsu                |
# 建屋絞込み
  awk '$3=="02"'                                 |
  LANG=C sort -k4,4                               |
  if [ -z "${Floor}" -o "${Floor}" = "0" -o "${Floor}" = "_" ] ; then
     cat - 
  else
# 居室番号をつける
     join0 key=4 ${tmp}-floor
  fi |
# 1:利用者ID 2:利用者名 3:居室ID
  self 1 9 6 |
  LANG=C sort -k1,1           > $tmp-riyousha_master
else
  message="利用者基本情報がありません"
fi


cp $tmp-shisetsu_riyousha $work_dir/shisetsu_riyousha_list
cp $tmp-riyousha_master $work_dir/riyousha_master


##############################################################
# スケジュールより取得
############################################################
# スケジュールタイプ
# 1:ID 2:色
self 1 3 ${home_dir}/TBL/SCHEDULE/SCEDULE_TYPE_MASTER   > $tmp-schedule_type_master

# スケジュール詳細
: > $tmp-schedule_data
if [ -s ${apdata_dir}/SCHEDULE/SCHEDULE_SHOUSAI ] ; then
   cat ${apdata_dir}/SCHEDULE/SCHEDULE_SHOUSAI  |
   awk '$(NF-2)!="9"'                           |
   LANG=C sort -k1,1                            |
# 該当施設のみ
   join0 key=1 $tmp-displayShisetsu                    |
# 該当建屋のみ
   awk '$14=="2"'                               > $tmp-schedule_data
fi


: > $tmp-schedule_guest
if [ -s ${apdata_dir}/SCHEDULE/SCHEDULE_GUEST ] ; then
   # スケジュールタイプマスタを取得
# 1:ID 2:色
   self 1 3 ${home_dir}/TBL/SCHEDULE/SCEDULE_TYPE_MASTER   > $tmp-schedule_type_master
   cp $tmp-schedule_type_master $work_dir/type_master

# 1:施設ID 2:スケジュールID 3:ゲスト名 4:関係入居者 5:備考
# 6:金額
   cat ${apdata_dir}/SCHEDULE/SCHEDULE_GUEST |
# 1:施設ID 2:スケジュールID 3:利用者ID
   self 1 2 3                                |
   LANG=C sort -k1,2                         > $tmp-guest_schedule

   cp $tmp-guest_schedule $work_dir/guest_schedule

   cat $tmp-schedule_data                    |
# 1:施設ID     2:スケジュールID 3:ゲスト名  4:スケジュールタイプ 5:スケジュール名
# 6:開催年月日 7:開始時刻       8:終了時刻  9:予約状況           10:開催場所
# 11:費用      12:担当者１      13:担当者２ 14:追記              15:建屋
   join1 key=1/2 $tmp-guest_schedule         |
   delf NF-2/NF                                |
   LANG=C sort -k4,4                           |
# 1:施設ID         2:スケジュールID 3:ゲスト名  4:スケジュールタイプ 5:色
# 6:スケジュール名 7:開催年月日     8:開始時刻  9:終了時刻           10:予約状況
# 11:開催場所      12:費用          13:担当者１ 14:担当者２          15:追記
# 16:建屋
   join1 key=4 $tmp-schedule_type_master      |
   LANG=C sort -k2,2            > $tmp-schedule_guest
fi


: > $tmp-schedule_sanka
if [ -s ${apdata_dir}/SCHEDULE/SCHEDULE_SANKASHA ] ; then
   cat ${apdata_dir}/SCHEDULE/SCHEDULE_SANKASHA |
   tee $tmp-sanka_work                          |
# 1:施設ID 2:スケジュールID 3:利用者ID 4:出席フラグ 5:備考
# 6:金額
   awk '$4=="1"'                               |
# 1:施設ID 2:スケジュールID 3:利用者ID
   self 1 2 3                                   |
   LANG=C sort -k1,2                           |
   uniq                  > $tmp-taishou_schedule

   cp $tmp-taishou_schedule $work_dir/taishou_schedule

   cat $tmp-schedule_data                      |
# 1:施設ID     2:スケジュールID 3:利用者ID  4:スケジュールタイプ 5:スケジュール名
# 6:開催年月日 7:開始時刻       8:終了時刻  9:予約状況           10:開催場所
# 11:費用      12:担当者１      13:担当者２ 14:追記              15:建屋
   join1 key=1/2 $tmp-taishou_schedule         |
   delf NF-2/NF                                |
   LANG=C sort -k4,4                           |
# 1:施設ID         2:スケジュールID 3:利用者ID  4:スケジュールタイプ 5:色
# 6:スケジュール名 7:開催年月日     8:開始時刻  9:終了時刻           10:予約状況
# 11:開催場所      12:費用          13:担当者１ 14:担当者２          15:追記
# 16:建屋
   join1 key=4 $tmp-schedule_type_master      |
   LANG=C sort -k2,2            > $tmp-schedule_sanka

   cp $tmp-schedule_sanka $work_dir/schedule_sanka
fi

# 利用者契約情報より部屋番号を取得する必要あり
cat $tmp-schedule_sanka                       |
LANG=C sort -k3,3                             |
# 1:施設ID             2:スケジュールID 3:利用者ID       4:利用者名   5:部屋番号
# 6:スケジュールタイプ 7:色             8:スケジュール名 9:開催年月日 10:開始時刻
# 11:終了時刻          12:予約状況      13:開催場所      14:費用      15:担当者１
# 16:担当者２          17:追記          18:建屋
join1 key=3 $tmp-riyousha_master              |
# 1:施設ID    2:スケジュールID 3:利用者名   4:部屋番号  5:スケジュールタイプ
# 6:色        7:スケジュール名 8:開催年月日 9:開始時刻  10:終了時刻
# 11:予約状況 12:開催場所      13:費用      14:担当者１ 15:担当者２
# 16:追記     17:建屋
self 1 2 4/NF                                 > $tmp-schedule_info

cp $tmp-schedule_info $work_dir/schedule_info


# スケジュールファイルの取得
cat $tmp-schedule_data |
awk '$(NF-2)!="9"'     |
# 日誌上の他の項目に表示されているものは省く
awk '$3!="00008"&&$3!="00015"&&$3!="00010"&&$3!="00009"&&$3!="00014"'  |
delf NF-2/NF                                |
# 1:施設      2:スケジュールID 3:スケジュールタイプ 4:スケジュール名 5:開催日
# 6:開始時刻  7:終了時刻       8:予約状況           9:開催場所       10:費用
# 11:担当者1  12:担当者2       13:追記              14:建屋
LANG=C sort -k1,2                         |
join1 key=1/2 - $tmp-sanka_work           |
delf NF-2/NF                              |
# 1:施設            2:スケジュールID 3:スケジュールタイプ 4:スケジュール名 5:開催日
# 6:開始時刻        7:終了時刻       8:予約状況           9:開催場所       10:費用
# 11:担当者1        12:担当者2       13:追記              14:建屋     ?     15:利用者ID
# 16:利用者チェック 17:備考          18:費用
#--------------------------------------------------------------
# 検索
# --------------------------
# 開催開始日
# --------------------------
LANG=C sort -k5,5                         |
join0 key=5 $tmp-today                    |
LANG=C sort -k6,6 |
# 1:スケジュールID 2:スケジュール名 3:開催日 4:開始時刻 5:終了時刻
# 6:開催場所       7:備考 8:利用チェック
self 2 4 5 6 7 9 13 17       |
# 1:スケジュールID 2:スケジュール名 3:開催日       4:開始時刻 5:終了時刻
# 6:開催場所       7:備考        8:利用チェック 9:参加人数
count 1 8               |
# 利用チェックが入っていないのは
awk '{if($8=="_"){$9="0"};print $0}'  |
LANG=C sort -k1,4 -k9,9               |
getlast 1 4             |
# 1:スケジュールID 2:スケジュール名 3:開催日       4:開始時刻 5:終了時刻
# 6:開催場所       7:備考        8:参加人数
delf 8                  |
LANG=C sort -k3,3 -k4,4 |
# 1:スケジュールID 2:スケジュール名 3:開始時刻 4:参加人数 5:備考
self 1 2 4 8 7  > $tmp-schedule_list

# スケジュールよりスケジュールタイプ：業者関連(00008)を抽出
echo "00008" > $tmp-schedule_gyousha
# 1:施設ID    2:スケジュールID 3:スケジュールタイプ 4:スケジュール名 5:開催年月日
# 6:開始時刻  7:終了時刻       8:予約状況           9:開催場所       10:費用
# 11:担当者１ 12:担当者２      13:追記              14:建屋
cat $tmp-schedule_data                        |
LANG=C sort -k3,3                             |
join0 key=3 $tmp-schedule_gyousha             |
LANG=C sort -k11,11                           |
join1 key=11 $tmp-jugyoin_name_mst            |
delf 11                                       |
LANG=C sort -k5,5                             |
join0 key=5 $tmp-today                        |
# 1:施設ID   2:スケジュールID 3:スケジュール名 4:開始時刻 5:追記
# 6:担当者１
self 1 2 4 6 13 11                            > $tmp-gyousha

# スケジュールよりスケジュールタイプ：ゲスト宿泊(00015)を抽出
echo "00015" > $tmp-schedule_guestshukuhaku
: > $tmp-guest_shukuhakulist
if [ -s ${apdata_dir}/SCHEDULE/SCHEDULE_GUEST ] ; then
   cat ${apdata_dir}/SCHEDULE/SCHEDULE_GUEST  |
# 1:施設ID 2:スケジュールID 3:参加者名 4:性別
   self 1 2 3 8                                 |
   LANG=C sort -k1,2                          > $tmp-guest_work
   cp $tmp-guest_work $work_dir/guest_work

   cp $tmp-schedule_data $work_dir/schedule_data_guest

# 1:施設ID    2:スケジュールID 3:スケジュールタイプ 4:スケジュール名 5:開催年月日
# 6:開始時刻  7:終了時刻       8:予約状況           9:開催場所       10:費用
# 11:担当者１ 12:担当者２      13:追記              14:建屋
   cat $tmp-schedule_data                        |
   LANG=C sort -k3,3                             |
   join0 key=3 $tmp-schedule_guestshukuhaku             |
   LANG=C sort -k5,5                             |
   join0 key=5 $tmp-today                        |
# 1:施設ID   2:スケジュールID 3:スケジュール名 4:開始時刻 5:追記
# 6:担当者１
   self 1 2 4 6 9 11                            |
   tee $work_dir/guest_shukuhaku                 |
   LANG=C sort -k1,2                             |
# 1:施設ID   2:スケジュールID 3:スケジュール名 4:開始時刻 5:場所
# 6:担当者１ 7:ゲスト参加者名 8:性別
   join1 key=1/2 - $tmp-guest_work          |
   self 5 7 8 > $tmp-guest_shukuhakulist
fi
guest_shukuhaku_male=$(awk '$3=="0"' $tmp-guest_shukuhakulist | gyo)
guest_shukuhaku_female=$(awk '$3=="1"' $tmp-guest_shukuhakulist | gyo)

# スケジュールよりスケジュールタイプ：内覧(00010)を抽出
echo "00010" > $tmp-schedule_nairan
# 1:施設ID         2:スケジュールID 3:ゲスト名  4:スケジュールタイプ 5:色
# 6:スケジュール名 7:開催年月日     8:開始時刻  9:終了時刻           10:予約状況
# 11:開催場所      12:費用          13:担当者１ 14:担当者２          15:追記
# 16:建屋
cat $tmp-schedule_guest                       |
LANG=C sort -k4,4                             |
join0 key=4 $tmp-schedule_nairan             |
LANG=C sort -k7,7                             |
join0 key=7 $tmp-today                        |
# 1:施設ID   2:スケジュールID 3:予約状況 4:ゲスト名 5:スケジュール名
# 6:開始時刻 7:追記           8:担当者１ 9:担当者２
self 1 2 10 3 6 8 15 13 14                    |
awk '{if($3=="0"){$3="無"}else{$3="有"};print $0}'> $tmp-nairan

# スケジュールよりスケジュールタイプ：引越し関連(00009)を抽出
echo "00009" > $tmp-schedule_hikkoshi
cat $tmp-schedule_info                       |
LANG=C sort -k5,5                            |
join0 key=5 $tmp-schedule_hikkoshi           |
awk '$8>="'${taishoutoday}'"'                |
# 1:施設ID     2:スケジュールID 3:部屋番号 4:利用者名 5:追記
# 6:開催年月日 7:開始時刻       8:担当者１ 9:担当者２
self 1 2 4 3 16 8 9 14 15                    > $tmp-hikkoshi

# スケジュールよりスケジュールタイプ：受診関連(00014)を抽出
echo "00014" > $tmp-schedule_jushin
cat $tmp-schedule_info                       |
LANG=C sort -k5,5                            |
join0 key=5 $tmp-schedule_jushin             |
LANG=C sort -k8,8                            |
join0 key=8 $tmp-today                       |
# 1:施設ID   2:スケジュールID 3:部屋番号 4:利用者名 5:スケジュール名
# 6:開始時刻 7:担当者１       8:追記
self 1 2 4 3 7 9 14 16                       |
LANG=C sort -k7,7                            |
join1 key=7 $tmp-jugyoin_name_mst            |
delf 7                                       |
LANG=C sort -k6n,6n                          > $tmp-jushin

# 表示内容をセットするため、簡易マスタ生成
echo "0" "介護" > $tmp-shokusyu_master
echo "1" "看護" >> $tmp-shokusyu_master

echo "0" "日勤" > $tmp-shift_master
echo "1" "夜勤" >> $tmp-shift_master
echo "2" "早出" >> $tmp-shift_master
echo "3" "遅番" >> $tmp-shift_master

###########################################################
# 日誌登録情報
###########################################################
nisshiday=$(mdate $hdKijunDate | self 1)
lastday=$(mdate -e $nisshiday/-1 | self 1)
if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   tee $tmp-nisshi_care_yesterday        |
   awk '$3=="'${nisshiday}'"'            |
   tee $tmp-nisshi_care_work             |
#   if [ -z "$Floor" -o "$Floor" = "_" -o "$Floor" = "0" ] ; then
#       awk '$2!="0"'
#   else
       awk '$2=="'$Floor'"'                |
#   fi |
# 1:施設            2:フロア          3:登録日付     4:フロア職種0   5:シフト0
# 6:担当者0         7:フロア職種1     8:シフト1      9:担当者1       10:フロア職種2
# 11:シフト2        12:担当者2        13:フロア職種3 14:シフト3      15:担当者3
# 16:フロア職種4    17:シフト4        18:担当者4     19:フロア職種5  20:シフト5
# 21:担当者5        22:フロア職種6    23:シフト6     24:担当者6      25:フロア職種7
# 26:シフト7        27:担当者7        28:フロア職種8 29:シフト8      30:担当者8
# 31:フロア職種9    32:シフト9        33:担当者9     34:フロア職種10 35:シフト10
# 36:担当者10       37:フロア職種11   38:シフト11    39:担当者11     40:入浴備考
# 41:日勤業務引継ぎ 42:夜勤業務引継ぎ 43:有効フラグ  44:処理時間     45:ユーザID
   delf NF-2/NF                          > $tmp-nisshi_care_base
   cp $tmp-nisshi_care_base $work_dir/nisshi_care_base
   FloorShokusyu0=$(self 4 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift0=$(self 5 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha0=$(self 6 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu1=$(self 7 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift1=$(self 8 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha1=$(self 9 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu2=$(self 10 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift2=$(self 11 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha2=$(self 12 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu3=$(self 13 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift3=$(self 14 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha3=$(self 15 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu4=$(self 16 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift4=$(self 17 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha4=$(self 18 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu5=$(self 19 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift5=$(self 20 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha5=$(self 21 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu6=$(self 22 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift6=$(self 23 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha6=$(self 24 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu7=$(self 25 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift7=$(self 26 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha7=$(self 27 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu8=$(self 28 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift8=$(self 29 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha8=$(self 30 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu9=$(self 31 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift9=$(self 32 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha9=$(self 33 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu10=$(self 34 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift10=$(self 35 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha10=$(self 36 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   FloorShokusyu11=$(self 37 $tmp-nisshi_care_base | join1 key=1 $tmp-shokusyu_master | self 2)
   Shift11=$(self 38 $tmp-nisshi_care_base | join1 key=1 $tmp-shift_master | self 2)
   Tantousha11=$(self 39 $tmp-nisshi_care_base | join1 key=1 ${tmp}-jugyoin | self 2 )
   NyuyokuBiko=$(self 40 $tmp-nisshi_care_base)
#  初期画面などでFLoor設定がなかったら、全フロアをデフォルトで表示させる。  
   if [ -z "$Floor" -o "$Floor" = "_" ] ; then
     NikkinHikitsugi=$(awk '$2=="0"{print $41}' $tmp-nisshi_care_work | sed 's/\\n/<br>/g')
     YakinHikitsugi=$(awk '$2=="0"{print $42}' $tmp-nisshi_care_work | sed 's/\\n/<br>/g')
#  前日のデータより夜勤データを取得
     LastYakinHikitsugi=$(cat $tmp-nisshi_care_yesterday | awk '$2=="0"&&$3=="'${lastday}'"{print $42}' | sed 's/\\n/<br>/g')
   else
     NikkinHikitsugi=$(awk '$2=="'$Floor'"{print $41}' $tmp-nisshi_care_work | sed 's/\\n/<br>/g')
     YakinHikitsugi=$(awk '$2=="'$Floor'"{print $42}' $tmp-nisshi_care_work | sed 's/\\n/<br>/g')
#  前日のデータより夜勤データを取得
     LastYakinHikitsugi=$(cat $tmp-nisshi_care_yesterday | awk '$2=="'$Floor'"&&$3=="'${lastday}'"{print $42}' | sed 's/\\n/<br>/g')
   fi
fi

#####################################
# PHS早見表
#####################################

# フロア全体の場合は全てのフロア集計
if [ -z "$Floor" -o "$Floor" = "_" -o "$Floor" = "0" ] ; then
   if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS -a -s ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS         |
   awk '$2!="0"'                                             |
   delf NF-2/NF                                              > $tmp-care_phs
   self 3 $tmp-care_phs | awk '{print $0,"@","@"}'  > $tmp-phs0
   self 4 $tmp-care_phs | awk '{print $0,"@","@"}'  > $tmp-phs1
   self 5 $tmp-care_phs | awk '{print $0,"@","@"}'  > $tmp-phs2
   self 6 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs3
   self 7 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs4
   self 8 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs5
   self 9 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs6
   self 10 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs7
   self 11 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs8
   self 12 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs9
   self 13 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs10
   self 14 $tmp-care_phs | awk '{print $0,"@","@"}' > $tmp-phs11

   cat ${pompa_dir}/NISSHI/$displayShisetsu/NISSHI_CARE |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   awk '$3=="'${nisshiday}'"'            |
   awk '$2!="0"'                         |
# 1:施設            2:フロア          3:登録日付     4:フロア職種0   5:シフト0
# 6:担当者0         7:フロア職種1     8:シフト1      9:担当者1       10:フロア職種2
# 11:シフト2        12:担当者2        13:フロア職種3 14:シフト3      15:担当者3
# 16:フロア職種4    17:シフト4        18:担当者4     19:フロア職種5  20:シフト5
# 21:担当者5        22:フロア職種6    23:シフト6     24:担当者6      25:フロア職種7
# 26:シフト7        27:担当者7        28:フロア職種8 29:シフト8      30:担当者8
# 31:フロア職種9    32:シフト9        33:担当者9     34:フロア職種10 35:シフト10
# 36:担当者10       37:フロア職種11   38:シフト11    39:担当者11     40:入浴備考
# 41:日勤業務引継ぎ 42:夜勤業務引継ぎ 43:有効フラグ  44:処理時間     45:ユーザID
   delf NF-2/NF                          > $tmp-nisshi_care_base
   self 4 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2  $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu0
   self 5 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift0
   self 6 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha0
   self 7 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu1
   self 8 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift1
   self 9 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha1
   self 10 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu2
   self 11 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift2
   self 12 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha2
   self 13 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu3
   self 14 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift3
   self 15 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha3
   self 16 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu4
   self 17 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift4
   self 18 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha4
   self 19 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu5
   self 20 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift5
   self 21 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha5
   self 22 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu6
   self 23 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift6
   self 24 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha6
   self 25 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu7
   self 26 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift7
   self 27 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha7
   self 28 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu8
   self 29 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift8
   self 30 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha8
   self 31 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu9
   self 32 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift9
   self 33 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha9
   self 34 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu10
   self 35 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift10
   self 36 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha10
   self 37 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shokusyu_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-floor_shokushu11
   self 38 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 $tmp-shift_master | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-shift11
   self 39 $tmp-nisshi_care_base | rank | LANG=C sort -k2,2 | join2 +@ key=2 ${tmp}-jugyoin | LANG=C sort -k1,1 | delf 1 | self 2 > $tmp-tantousha11

   cp $tmp-shift_master $work_dir/shift_master
   cp $tmp-nisshi_care_base $work_dir/nisshi_care_base
   cp $tmp-phs2 $work_dir/phs2
   cp $tmp-floor_shokushu3 $work_dir/shokushu3
   cp $tmp-shift2 $work_dir/shift2
   cp $tmp-tantousha2 $work_dir/tantousha2

   ycat $tmp-phs0 $tmp-floor_shokushu0 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift0 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha0 > $tmp-all0
   ycat $tmp-phs1 $tmp-floor_shokushu1 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift1 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha1 > $tmp-all1
   ycat $tmp-phs2 $tmp-floor_shokushu2 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift2 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha2 > $tmp-all2
   ycat $tmp-phs3 $tmp-floor_shokushu3 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift3 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha3 > $tmp-all3
   ycat $tmp-phs4 $tmp-floor_shokushu4 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift4 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha4 > $tmp-all4
   ycat $tmp-phs5 $tmp-floor_shokushu5 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift5 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha5 > $tmp-all5
   ycat $tmp-phs6 $tmp-floor_shokushu6 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift6 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha6 > $tmp-all6
   ycat $tmp-phs7 $tmp-floor_shokushu7 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift7 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha7 > $tmp-all7
   ycat $tmp-phs8 $tmp-floor_shokushu8 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift8 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha8 > $tmp-all8
   ycat $tmp-phs9 $tmp-floor_shokushu9 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift9 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha9 > $tmp-all9
   ycat $tmp-phs10 $tmp-floor_shokushu10 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift10 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha10 > $tmp-all10
   ycat $tmp-phs11 $tmp-floor_shokushu11 | awk '{if($4!=""){$2=$4};print $1,$2,$3}' |
   ycat - $tmp-shift11 | awk '{if($4!=""){$3=$4};print $1,$2,$3}' |
   ycat - $tmp-tantousha11 > $tmp-all11

   cat $tmp-all0 $tmp-all1 $tmp-all2 $tmp-all3 $tmp-all4 $tmp-all5 > $tmp-phs_list
   cat $tmp-all6 $tmp-all7 $tmp-all8 $tmp-all9 $tmp-all10 $tmp-all11 > $tmp-phs_list2
   fi

else

if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/CARE_PHS         |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   awk '$2=="'$Floor'"'                  |
   delf NF-2/NF                          > $tmp-care_phs
# 1:施設      2:フロア    3:PHS0   4:PHS1   5:PHS2
# 6:PHS3      7:PHS4      8:PHS5   9:PHS6   10:PHS7
# 11:PHS8     12:PHS9     13:PHS10 14:PHS11
   phs0=$(self 3 $tmp-care_phs)
   phs1=$(self 4 $tmp-care_phs)
   phs2=$(self 5 $tmp-care_phs)
   phs3=$(self 6 $tmp-care_phs)
   phs4=$(self 7 $tmp-care_phs)
   phs5=$(self 8 $tmp-care_phs)
   phs6=$(self 9 $tmp-care_phs)
   phs7=$(self 10 $tmp-care_phs)
   phs8=$(self 11 $tmp-care_phs)
   phs9=$(self 12 $tmp-care_phs)
   phs10=$(self 13 $tmp-care_phs)
   phs11=$(self 14 $tmp-care_phs)
fi

if [ "$(gyo $tmp-care_phs)" != "0" ] ; then 
# PHSリスト表を生成
[ -z "$FloorShokusyu0" ] && FloorShokusyu0="@"
[ -z "$FloorShokusyu1" ] && FloorShokusyu1="@"
[ -z "$FloorShokusyu2" ] && FloorShokusyu2="@"
[ -z "$FloorShokusyu3" ] && FloorShokusyu3="@"
[ -z "$FloorShokusyu4" ] && FloorShokusyu4="@"
[ -z "$FloorShokusyu5" ] && FloorShokusyu5="@"
[ -z "$FloorShokusyu6" ] && FloorShokusyu6="@"
[ -z "$FloorShokusyu7" ] && FloorShokusyu7="@"
[ -z "$FloorShokusyu8" ] && FloorShokusyu8="@"
[ -z "$FloorShokusyu9" ] && FloorShokusyu9="@"
[ -z "$FloorShokusyu10" ] && FloorShokusyu10="@"
[ -z "$FloorShokusyu11" ] && FloorShokusyu11="@"
[ -z "$Shift0" ] && Shift0="@"
[ -z "$Shift1" ] && Shift1="@"
[ -z "$Shift2" ] && Shift2="@"
[ -z "$Shift3" ] && Shift3="@"
[ -z "$Shift4" ] && Shift4="@"
[ -z "$Shift5" ] && Shift5="@"
[ -z "$Shift6" ] && Shift6="@"
[ -z "$Shift7" ] && Shift7="@"
[ -z "$Shift8" ] && Shift8="@"
[ -z "$Shift9" ] && Shift9="@"
[ -z "$Shift10" ] && Shift10="@"
[ -z "$Shift11" ] && Shift11="@"
echo "$phs0" "$FloorShokusyu0" "$Shift0" "$Tantousha0" > $tmp-phs_list
echo "$phs1" "$FloorShokusyu1" "$Shift1" "$Tantousha1" >> $tmp-phs_list
echo "$phs2" "$FloorShokusyu2" "$Shift2" "$Tantousha2" >> $tmp-phs_list
echo "$phs3" "$FloorShokusyu3" "$Shift3" "$Tantousha3" >> $tmp-phs_list
echo "$phs4" "$FloorShokusyu4" "$Shift4" "$Tantousha4" >> $tmp-phs_list
echo "$phs5" "$FloorShokusyu5" "$Shift5" "$Tantousha5" >> $tmp-phs_list
echo "$phs6" "$FloorShokusyu6" "$Shift6" "$Tantousha6" > $tmp-phs_list2
echo "$phs7" "$FloorShokusyu7" "$Shift7" "$Tantousha7" >> $tmp-phs_list2
echo "$phs8" "$FloorShokusyu8" "$Shift8" "$Tantousha8" >> $tmp-phs_list2
echo "$phs9" "$FloorShokusyu9" "$Shift9" "$Tantousha9" >> $tmp-phs_list2
echo "$phs10" "$FloorShokusyu10" "$Shift10" "$Tantousha10" >> $tmp-phs_list2
echo "$phs11" "$FloorShokusyu11" "$Shift11" "$Tantousha11" >> $tmp-phs_list2
fi

fi

# PHS情報がないものは省く
cat $tmp-phs_list |
awk '$1!="_"'     > $tmp-phs_list_output

cp $tmp-phs_list_output $work_dir/phs_list

cat $tmp-phs_list2 |
awk '$1!="_"'     > $tmp-phs_list2_output
cp $tmp-phs_list2_output $work_dir/phs_list2

###################################
# 連絡情報
###################################
: > $tmp-renraku_list_tmp
if [ -s ${pompa_dir}/RENRAKU/$displayShisetsu/RENRAKU_JIKOU ] ; then
   cat ${pompa_dir}/RENRAKU/$displayShisetsu/RENRAKU_JIKOU    |
   awk '$(NF-2)!="9"'                                         |
   LANG=C sort -k1,1                                          |
   join0 key=1 $tmp-displayShisetsu                           |
   awk '$3=="'${nisshiday}'"'                                 |
# 1:施設         2:ID   3:登録日付   4:登録時間 5:連絡事項ヘッダ
# 6:連絡事項詳細 7:建屋 8:有効フラグ 9:処理時間 10:ユーザID
   LANG=C sort -k10,10                                          |
# 1:施設         2:ID   3:登録日付   4:登録時間 5:連絡事項ヘッダ
# 6:連絡事項詳細 7:建屋 8:有効フラグ 9:処理時間 10:ユーザID
# 11:ユーザ名
   join1 key=10 ${tmp}-jugyoin                                 |
   awk '{if($7=="2"){$7="green"}else{$7="chocolate"};print $0}'       |
# 1:ID 2:登録時間 3:連絡事項ヘッダ 4:ユーザ名 5:色
   self 2 4 5 11 7                                        > $tmp-renraku_list_tmp
fi

# 申し送り事項なども反映
echo "$hdKijunDate" | awk '{print substr($1,1,6)}' > $tmp-kijunmonth
kijunmonth=$(self 1 $tmp-kijunmonth)

: > $tmp-moushiokuri_care
if [ -s ${home_dir}/SHISETSU_KAIGOKIROKU/POMPA/KAIGOJISSEKI/$displayShisetsu/$kijunmonth/$kijunmonth.KAIGOJISSEKI_IKKATSU_MOUSHIOKURI ] ; then
  cat ${home_dir}/SHISETSU_KAIGOKIROKU/POMPA/KAIGOJISSEKI/$displayShisetsu/$kijunmonth/$kijunmonth.KAIGOJISSEKI_IKKATSU_MOUSHIOKURI > $tmp-moushiokuri_care
fi

: > $tmp-moushiokuri_senior
if [ -s ${home_dir}/SHISETSU_KAIGOKIROKU/POMPA/KAIGOJISSEKI/$displayShisetsu/$kijunmonth/$kijunmonth.KAIGOJISSEKI_IKKATSU_MOUSHIOKURI_SENIOR ] ; then
  cat ${home_dir}/SHISETSU_KAIGOKIROKU/POMPA/KAIGOJISSEKI/$displayShisetsu/$kijunmonth/$kijunmonth.KAIGOJISSEKI_IKKATSU_MOUSHIOKURI_SENIOR > $tmp-moushiokuri_senior
fi

# 利用者以外レコードを追加
echo "99999999" "利用者以外"     |
cat $tmp-riyoushamei_mst -       > $tmp-riyoushamei_mst_rev

cat $tmp-moushiokuri_care $tmp-moushiokuri_senior  |
LANG=C sort -k1,1                |
join1 key=1 $tmp-riyoushamei_mst_rev |
delf 1                           |
awk '$2=="'$hdKijunDate'"&&$8=="on"{gsub(/[0-9]/,"",$7);gsub(/+*/,"",$7);print "_",$4,"("$1")"$10,$7,"black"}' >> $tmp-renraku_list_tmp


cat $tmp-renraku_list_tmp | LANG=C sort -k2r,2r > $tmp-renraku_list

###################################
# 入浴居室
###################################
: > $tmp-nyuyoku_kyoshitsu
if [ -s ${pompa_dir}/NISSHI/$displayShisetsu/NYUYOKU_KYOSHITSU ] ; then
   cat ${pompa_dir}/NISSHI/$displayShisetsu/NYUYOKU_KYOSHITSU |
   LANG=C sort -k1,1                     |
   join0 key=1 $tmp-displayShisetsu      |
   if [ -z "$Floor" -o "$Floor" = "_" -o "$Floor" = "0" ] ; then
       awk '$2!="'$Floor'"'
   else
       awk '$2=="'$Floor'"'
   fi |
   awk '$3=="'${nisshiday}'"{print $4}'  |
   LANG=C sort -k1,1                     |
   tateyoko                              |
   sed 's/ /、/g'     > $tmp-nyuyoku_kyoshitsu
   nyuyoku=$(cat $tmp-nyuyoku_kyoshitsu)
fi

###################################
# 入浴、排泄無し日数
###################################
: > $tmp-haisetsu_data
nisshimonth=$(echo $nisshiday | awk '{print substr($1,1,6)}')
lastmonth=$(mdate ${nisshimonth}m/-1)
last2month=$(mdate ${nisshimonth}m/-2)
# データがない場合のデフォルト日付（対象日付より60日前）
defaultday=$(mdate ${nisshiday}/-61)
if [ -s ${uneitmp_dir}/${shisetsu}/$nisshimonth/$nisshimonth.KAIGOJISSEKI_IKKATSU ] ; then
   cat ${uneitmp_dir}/${shisetsu}/$nisshimonth/$nisshimonth.KAIGOJISSEKI_IKKATSU > $tmp-haisetsu_data
fi
if [ -s ${uneitmp_dir}/${shisetsu}/$lastmonth/$lastmonth.KAIGOJISSEKI_IKKATSU ] ; then
   cat ${uneitmp_dir}/${shisetsu}/$lastmonth/$lastmonth.KAIGOJISSEKI_IKKATSU >> $tmp-haisetsu_data
fi
if [ -s ${uneitmp_dir}/${shisetsu}/$last2month/$last2month.KAIGOJISSEKI_IKKATSU ] ; then
   cat ${uneitmp_dir}/${shisetsu}/$last2month/$last2month.KAIGOJISSEKI_IKKATSU >> $tmp-haisetsu_data
fi
cp $tmp-haisetsu_data $work_dir/haisetsu_data
cat $tmp-haisetsu_data           |
# 1:利用者ID 2:実施日付 3:作業内容 4:作業時間 5:作業詳細
self 1 2 5 6 7 | awk '$3=="排便介助"||($3=="医療"&&$5~/ストマ/)'      |
LANG=C sort -k1,1 -k2r,2r                                                     |
# 1:利用者ID 2:実施日付 3:作業内容 4:作業時間 5:作業詳細
# 6:利用者名 7:部屋番号
join2 key=1 - $tmp-riyousha_master                                    |
# 1:利用者ID 2:実施日付 3:作業内容 4:作業時間 5:作業詳細
# 6:利用者名 7:部屋番号 8:表示内容 9:対象日付
awk '{if($2=="_"){$2="'$defaultday'"};if($3=="排便介助"){$8="排便"}else if($3=="医療"){$8="ストマ"}else{$8="排便データ無し"};$9="'$nisshiday'";print $0}'      |
# 1:利用者ID 2:実施日付 3:作業時間 4:作業内容 5:作業詳細
# 6:利用者名 7:部屋番号 8:表示内容 9:対象日付
self 1 2 4 3 5 6 7 8 9                                    |
LANG=C sort -k1,3                                         |
getlast 1 3                                               |
# 1:部屋番号 2:利用者名 3:作業時間 4:表示内容 5:対象日付
# 6:実施日付
self 7 6 3 8 9 2                                          |
# 1:部屋番号 2:利用者名 3:作業時間 4:表示内容 5:対象日付
# 6:日数     7:実施日付
mdate 5 6                                                 |
awk '{if($4=="排便データ無し"){$7="_";$6="_"};print $1,$2,$7,$3,$4,$6}' > $tmp-haisetsulist

# 入浴データ
cat $tmp-haisetsu_data           |
self 1 2 5 6 7 | awk '$3=="入浴"'          |
LANG=C sort -k1,1 -k2r,2r                                                 |
# 1:利用者ID 2:実施日付 3:作業内容 4:作業時間 5:作業詳細
# 6:利用者名 7:部屋番号 8:表示内容 9:対象日付
join2 key=1 - $tmp-riyousha_master                                    |
awk '{if($2=="_"){$2="'$defaultday'"};if($3=="入浴"){$8="入浴"}else{$8="入浴データ無し"};$9="'$nisshiday'";print $0}'      |
# 1:利用者ID 2:実施日付 3:作業時間 4:作業内容 5:作業詳細
# 6:利用者名 7:部屋番号 8:表示内容 9:対象日付
self 1 2 4 3 5 6 7 8 9   |
# 1:部屋番号 2:利用者名 3:作業時間 4:表示内容 5:対象日付
# 6:実施日付
self 7 6 3 8 9 2                                                      |
# 1:部屋番号 2:利用者名 3:作業時間 4:表示内容 5:対象日付
# 6:日数     7:実施日付
mdate 5 6                                                             |
awk '{if($4=="入浴データ無し"){$7="_";$6="_"};print $1,$2,$7,$3,$4,$6}'   > $tmp-nyuyokulist

cat $tmp-haisetsulist $tmp-nyuyokulist |
awk '$6>"0"'                          |
LANG=C sort -k1,2                                        > $tmp-haibennyuyokulist


curdate=$(mdate $hdKijunDate | self 1)

# 体験入居者のIDを出す。
shortcode="001"
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KEIYAKU |
awk '$(NF-2)!="9"'                             |
# 1:利用者ID   2:施設ID     3:建屋ID 4:フロアID 5:契約種類ID
# 6:契約開始日 7:契約終了日
self 1 3 4 5 9 12 13                                 |
#awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$shortcode'"&&$6<="'$taishoutoday2'"&&"'$taishoutoday2'"<=$7'   |
awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$shortcode'"&&$6<="'$curdate'"&&"'$curdate'"<=$7'   |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$4=="'$Floor'"{print $0}'
fi |
self 1  |
LANG=C sort -k1,1  > $tmp-taiken_riyoushaid

# 入居者統計情報
# 1:施設ID   2:シニアケア区分 3:フロア 4:ユニット 5:居室番号
# 6:利用者ID 7:有効From       8:有効To
cat ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS |
# 有効なデータのみに絞る
awk '$7<="'$curdate'"&&"'$curdate'"<$8'                |
awk '$1=="'$shisetsu'"&&$2=="02"&&$(NF-2)!="9"'        |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$3=="'$Floor'"{print $0}'
fi |
LANG=C sort -k6,6                                      |
join0 +ng key=6 $tmp-taiken_riyoushaid > /dev/null 2> $tmp-honnyukyosha_riyoushainfo
cat $tmp-honnyukyosha_riyoushainfo                     |
self 6                                                 |
LANG=C sort -k1,1          > $tmp-honnyukyosha-riyoushaid

cp $tmp-honnyukyosha_riyoushainfo $work_dir/honnnyukyosha_riyoushainfo
cp $tmp-honnyukyosha-riyoushaid $work_dir/honnnyukyosha_riyoushaid

# 入居戸数
cat $tmp-honnyukyosha_riyoushainfo                     |
self 5                                                 |
# 1:居室番号
getlast 1 1                                            > $tmp-nyukyo_room
nyukyokosu=$(gyo $tmp-nyukyo_room)

# 施設部屋数
cat ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_TATEYA_FLOOR_UNIT_ROOM   |
awk '$9!="9"'                                          |
awk '$1=="'$shisetsu'"&&$2=="02"'                      |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$3=="'$Floor'"{print $0}'
fi |
LANG=C sort -k1,1                                      > $tmp-room_info
roomkosu=$(gyo $tmp-room_info)

# 入居率
echo "$nyukyokosu" "$roomkosu"    |
lcalc '$1/$2*100'                 |
marume 1.0                        > $tmp-nyukyoritsu

nyukyoritsu=$(self 1 $tmp-nyukyoritsu)

# 2人入居率
cat $tmp-honnyukyosha_riyoushainfo                     |
self 5                                                 |
LANG=C sort -k1,1                                      |
count 1 1                                              > $tmp-nyukyo_status
cp $tmp-nyukyo_status $work_dir/nyukyo_status
# 全体の入居戸数
all_nyukyo=$(gyo $tmp-nyukyo_status)
# 複数人の入居戸数
awk '$2>1{print $0}' $tmp-nyukyo_status                > $tmp-fukusu_nyukyo
fukusu_nyukyo=$(gyo $tmp-fukusu_nyukyo)
echo "$all_nyukyo" "$fukusu_nyukyo"                    |
lcalc '$2/$1*100'                                      |
marume 1.0                                             > $tmp-fukusu_nyukyoritsu

fukusu_nyukyoritsu=$(self 1 $tmp-fukusu_nyukyoritsu)




# 1:利用者ID   2:利用者名   3:利用者名カナ 4:性別         5:生年月日和暦区分
# 6:生年月日年 7:生年月日月 8:生年月日日   9:生年月日西暦
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KIHON           |
tee $tmp-riyousha_mst                                  |
LANG=C sort -k1,1                                      |
join0 key=1 $tmp-honnyukyosha-riyoushaid               |
self 1 2 4                                               |
tee $tmp-taishou_riyoushaid                            |
self 3                                                 |
LANG=C sort -k1,1                                      |
count 1 1                  > $tmp-honnyukyosha_shoukei_count

honnyukyosha_shoukei_male_count=$(awk '$1=="1"{print $2}' $tmp-honnyukyosha_shoukei_count)
honnyukyosha_shoukei_female_count=$(awk '$1=="2"{print $2}' $tmp-honnyukyosha_shoukei_count)
[ -z "$honnyukyosha_shoukei_male_count" -o "$honnyukyosha_shoukei_male_count" = "_" ] && honnyukyosha_shoukei_male_count=0
[ -z "$honnyukyosha_shoukei_female_count" -o "$honnyukyosha_shoukei_female_count" = "_" ] && honnyukyosha_shoukei_female_count=0

# 建屋コード作成
#TATEYA=$(echo $Tateya | awk '{print "0"$1}')
TATEYA="02"

# 入院外泊
# 1:利用者ID     2:？       3:施設ID 4:建屋ID 5:居室
# 6:入院外泊区分 7:外泊FROM 8:外泊TO
cat ${data_dir}/UNEI/NYUUINGAIHAKU/${shisetsu}/${TATEYA}/RIYOUSHA_NYUUINGAIHAKU |
awk '$(NF-2)!="9"&&$3=="'${shisetsu}'"&&$4=="02"&&$7<="'$curdate'"&&"'$curdate'"<=$8{print $1,$5,$6}'        |
# 1:利用者ID 2:居室 3:入院外泊
LANG=C sort -k1,2 |
getlast 1 2       > $tmp-nyuingaihaku_list

# 1:利用者ID 2:居室 3:入院外泊
cat $tmp-nyuingaihaku_list                    |
# 1:利用者ID 2:利用者名 3:性別 4:居室 5:入院外泊
join1 key=1 $tmp-taishou_riyoushaid           |
tee $tmp-nyuingaihaku_name_list               |
# 1:性別 2:入院外泊
self 3 5                                      |
LANG=C sort -k1,2                             |
count 1 2                                     > $tmp-nyuingaihaku_count

gaihaku_male_count=$(awk '$1=="1"&&$2=="2"{print $3}' $tmp-nyuingaihaku_count)
gaihaku_female_count=$(awk '$1=="2"&&$2=="2"{print $3}' $tmp-nyuingaihaku_count)
nyuin_male_count=$(awk '$1=="1"&&$2=="1"{print $3}' $tmp-nyuingaihaku_count)
nyuin_female_count=$(awk '$1=="2"&&$2=="1"{print $3}' $tmp-nyuingaihaku_count)

[ -z "$gaihaku_male_count" -o "$gaihaku_male_count" = "_" ] && gaihaku_male_count=0
[ -z "$gaihaku_female_count" -o "$gaihaku_female_count" = "_" ] && gaihaku_female_count=0
[ -z "$nyuin_male_count" -o "$nyuin_male_count" = "_" ] && nyuin_male_count=0
[ -z "$nyuin_female_count" -o "$nyuin_female_count" = "_" ] && nyuin_female_count=0

nyuingaihaku_male_kei_count=`expr $gaihaku_male_count + $nyuin_male_count`
nyuingaihaku_female_kei_count=`expr $gaihaku_female_count + $nyuin_female_count`


# ショートステイ
shortcode="002"
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KEIYAKU |
# 1:利用者ID   2:施設ID     3:建屋ID 4:フロアID 5:契約種類ID
# 6:契約開始日 7:契約終了日
self 1 3 4 5 9 12 13                                 |
#awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$shortcode'"&&$6<="'$taishoutoday2'"&&"'$taishoutoday2'"<=$7'   |
awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$shortcode'"&&$6<="'$curdate'"&&"'$curdate'"<=$7'   |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$4=="'$Floor'"{print $0}'
fi |
self 1                                       |
LANG=C sort -k1,1                            |
join1 key=1 $tmp-riyousha_mst                |
tee $tmp-shortstay_riyousha                  |
self 4                                       |
LANG=C sort -k1,1                            |
count 1 1                                    > $tmp-short_count

# ショートステイ
shortstay_male_count=$(awk '$1=="1"{print $2}' $tmp-short_count)
shortstay_female_count=$(awk '$1=="2"{print $2}' $tmp-short_count)

[ -z "$shortstay_male_count" ] && shortstay_male_count=0
[ -z "$shortstay_female_count" ] && shortstay_female_count=0

# 体験入居
shortcode="001"
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KEIYAKU |
# 1:利用者ID   2:施設ID     3:建屋ID 4:フロアID 5:契約種類ID
# 6:契約開始日 7:契約終了日
self 1 3 4 5 9 12 13                                 |
#awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$shortcode'"&&$6<="'$taishoutoday2'"&&"'$taishoutoday2'"<=$7'   |
awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$shortcode'"&&$6<="'$curdate'"&&"'$curdate'"<=$7'   |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$4=="'$Floor'"{print $0}'
fi |
self 1                                       |
LANG=C sort -k1,1                            |
join1 key=1 $tmp-riyousha_mst                |
tee $tmp-taiken_riyousha                  |
self 4                                       |
LANG=C sort -k1,1                            |
count 1 1                                    > $tmp-taiken_count

# 体験入居
taiken_male_count=$(awk '$1=="1"{print $2}' $tmp-taiken_count)
taiken_female_count=$(awk '$1=="2"{print $2}' $tmp-taiken_count)

[ -z "$taiken_male_count" ] && taiken_male_count=0
[ -z "$taiken_female_count" ] && taiken_female_count=0

#honnyukyosha_shoukei_male_count=`expr $honnyukyosha_shoukei_male_count - $taiken_male_count`
#honnyukyosha_shoukei_female_count=`expr $honnyukyosha_shoukei_female_count - $taiken_female_count`

honnyukyosha_male_count=`expr $honnyukyosha_shoukei_male_count - $nyuingaihaku_male_kei_count`
honnyukyosha_female_count=`expr $honnyukyosha_shoukei_female_count - $nyuingaihaku_female_kei_count`

# 総計
floor_full_count=`expr $honnyukyosha_shoukei_male_count + $honnyukyosha_shoukei_female_count + $shortstay_male_count + $shortstay_female_count + $guest_shukuhaku_male + $guest_shukuhaku_female + $taiken_male_count + $taiken_female_count`

# ショートステイ入居者リスト
# 1:施設ID   2:シニアケア区分 3:フロア 4:ユニット 5:居室番号
# 6:利用者ID 7:有効From       8:有効To  9:氏名
cat ${data_dir}/UNEI/RIYOUSHA/SHISETSU_RIYOUSHA_STATUS     |
awk '$7<="'$curdate'"&&"'$curdate'"<$8'                |
LANG=C sort -k6,6                            |
# 1:施設ID   2:シニアケア区分 3:フロア   4:ユニット 5:居室番号
# 6:利用者ID 7:氏名           8:有効From 9:有効To
join1 key=6 $tmp-shortstay_riyousha             |
self 5 7                                     > $tmp-shortstay_list

# 入院リスト
cat $tmp-nyuingaihaku_name_list |
awk '$5=="1"{print $4,$2}'      |
LANG=C sort -k1,1               > $tmp-nyuin_name_list

# 外泊リスト
cat $tmp-nyuingaihaku_name_list |
awk '$5=="2"{print $4,$2}'      |
LANG=C sort -k1,1               > $tmp-gaihaku_name_list


# 介護度
# 1:利用者ID 2:介護度 3:介護認定開始 4:介護認定終了
self 1 3 23 28 ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KAIGOHOKEN |
tee $tmp-kaigohoken_ml |
awk '$3<="'$curdate'"&&"'$curdate'"<$4{print $1,$2}'      |
LANG=C sort -k1,1                      > $tmp-riyousha_kaigodo

#cp $tmp-riyousha_kaigodo $work_dir/tmp-riyousha_kaigodo

#cp $tmp-honnyukyosha-riyoushaid $work_dir/tmp-honnyukyosha-riyoushaid

cat $tmp-honnyukyosha-riyoushaid |
LANG=C sort -k1,1 -u             |
join2 +_ key=1 $tmp-riyousha_kaigodo |
# 1:利用者ID 2:介護度
self 2                           |
LANG=C sort -k1,1                |
count 1 1                        > $tmp-riyousha_kaigodo_count

nyukyosha_kaigo1_count=$(awk '$1=="3"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo2_count=$(awk '$1=="4"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo3_count=$(awk '$1=="5"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo4_count=$(awk '$1=="6"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo5_count=$(awk '$1=="7"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo6_count=$(awk '$1=="1"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo7_count=$(awk '$1=="2"{print $2}' $tmp-riyousha_kaigodo_count)
nyukyosha_kaigo0_count=$(awk '$1=="_"{print $2}' $tmp-riyousha_kaigodo_count)
[ -z "$nyukyosha_kaigo1_count" -o "$nyukyosha_kaigo1_count" = "_" ] && nyukyosha_kaigo1_count=0
[ -z "$nyukyosha_kaigo2_count" -o "$nyukyosha_kaigo2_count" = "_" ] && nyukyosha_kaigo2_count=0
[ -z "$nyukyosha_kaigo3_count" -o "$nyukyosha_kaigo3_count" = "_" ] && nyukyosha_kaigo3_count=0
[ -z "$nyukyosha_kaigo4_count" -o "$nyukyosha_kaigo4_count" = "_" ] && nyukyosha_kaigo4_count=0
[ -z "$nyukyosha_kaigo5_count" -o "$nyukyosha_kaigo5_count" = "_" ] && nyukyosha_kaigo5_count=0
[ -z "$nyukyosha_kaigo6_count" -o "$nyukyosha_kaigo6_count" = "_" ] && nyukyosha_kaigo6_count=0
[ -z "$nyukyosha_kaigo7_count" -o "$nyukyosha_kaigo7_count" = "_" ] && nyukyosha_kaigo7_count=0
[ -z "$nyukyosha_kaigo0_count" -o "$nyukyosha_kaigo0_count" = "_" ] && nyukyosha_kaigo0_count=0

nyukyosha_full_count=`expr $nyukyosha_kaigo1_count + $nyukyosha_kaigo2_count + $nyukyosha_kaigo3_count + $nyukyosha_kaigo4_count + $nyukyosha_kaigo5_count + $nyukyosha_kaigo6_count + $nyukyosha_kaigo7_count + $nyukyosha_kaigo0_count`

# 2か月前（60日換算）
twomonthafter=$(mdate $hdKijunDate/+60)
cat $tmp-kaigohoken_ml         |
awk '$3<="'$curdate'"&&"'$curdate'"<$4&&$4<"'$twomonthafter'"{print $1}' |
LANG=C sort -k1,1              > $tmp-twomonthkigenlist

cat $tmp-honnyukyosha-riyoushaid |
LANG=C sort -k1,1                |
join0 key=1 $tmp-twomonthkigenlist |
uniq                             > $tmp-twomonthnyukyoshalist

twomonthkigencount=$(gyo $tmp-twomonthnyukyoshalist)


# 一括契約
ikkatsucode="003"
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KEIYAKU |
# 1:利用者ID   2:施設ID     3:建屋ID 4:フロアID 5:契約種類ID
# 6:契約開始日 7:契約終了日
self 1 3 4 5 9 12 13                                 |
awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$ikkatsucode'"&&$6<="'$curdate'"&&"'$curdate'"<=$7'   |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$4=="'$Floor'"{print $0}'
fi |
self 1                                       |
LANG=C sort -k1,1                            |
count 1 1                                    |
self 2 > $tmp-ikkatsu_count
[ "$(gyo $tmp-ikkatsu_count)" = "0" ] && : > $tmp-ikkatsu_count


# 月払契約
tsukibaraicode="004"
cat ${data_dir}/UNEI/RIYOUSHA/RIYOUSHA_KEIYAKU |
# 1:施設ID 2:契約種類ID 3:契約開始日 4:契約終了日
self 1 3 4 5 9 12 13                                 |
awk '$2=="'$shisetsu'"&&$3=="02"&&$5=="'$tsukibaraicode'"&&$6<="'$curdate'"&&"'$curdate'"<=$7'   |
if [ -z "$Floor" -o "$Floor" = "0" -o "$Floor" = "_" ] ; then
awk '{print $0}'
else
awk '$4=="'$Floor'"{print $0}'
fi |
self 1                                       |
LANG=C sort -k1,1                            |
count 1 1                                    |
self 2 > $tmp-tsukibarai_count
[ "$(gyo $tmp-tsukibarai_count)" = "0" ] && : > $tmp-tsukibarai_count


ikkatsu_goukei=$(gyo $tmp-ikkatsu_count)
tsukibarai_goukei=$(gyo $tmp-tsukibarai_count)


#ycat $tmp-ikkatsu_count $tmp-tsukibarai_count |
echo $ikkatsu_goukei $tsukibarai_goukei       |
# 1:一括支払い数 2:月払い支払い数
lcalc '$1/($1+$2)*100,$2/($1+$2)*100'         |
marume 1.0 2.0                                > $tmp-shiharai_percent

ikkatsupercent=$(self 1 $tmp-shiharai_percent)
tsukipercent=$(self 2 $tmp-shiharai_percent)

# 建屋設定
self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_TATEYA_FLOOR   |
awk '$1=="'$shisetsu'"{print $2}'                                |
LANG=C sort -k1,1                                                |
getlast 1 1                                                      |    
join1 key=1 <(self 1 3 ${home_dir}/TBL/SHISETSU_MASTER/TATEYA_NAME)  |
awk '{if($1=="02"){$3="selected"}else{$3=""};print int($1),$2,$3}'      > $tmp-select_tateya



# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -u -k2,2n                                      |
self 1 2                                                   > ${tmp}-kengen
# 1:userid 2:SHISETSU_ID
if [ "$(cat ${tmp}-kengen | getfirst 1 1 | self 2)" = "0000" ];then
  awk '$1!="0000"{print $1,$2}' $tmp-disp_shisetsu_mst      |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
# 1:SHISESTU_ID 2:施設名
else
  cat ${tmp}-kengen                        |
  # 1:userid 2:SHISETSU_ID
  join1 key=2 $tmp-disp_shisetsu_mst |
# 1:userid 2:SHISETSU_ID 3:施設名
  awk '$2!=0{print $2,$3}'                 |
  awk '{print $0,"'${shisetsu}'"}'              |
  awk '{if($1==$3){print $1,$2,"selected"}else{print $1,$2,""}}'  > ${tmp}-shisetsu_kengen
fi

select_shisetsu=$(awk '$3=="selected"{print $2}' ${tmp}-shisetsu_kengen)
awk '$3!="selected"{print $1,$2}' ${tmp}-shisetsu_kengen > $tmp-shisetsu_taishou

echo "NISSHI.CGI" > $tmp-cgi
# 施設名はログインユーザーの権限のある施設を取得
cat ${kengen_dir}/USER_KENGEN/${userid}.USER_KENGEN    |
awk '$2=="0000"||$2=="'$shisetsu'"'         |
# 1:userid 2:SHISETSU_ID 3:KENGEN_GROUP 4:appID 5:MENU_NAME 6:DROPDOWN_STATUS 7:CGI_NAME 8:RINK_STATUS 9:CGI_STATUS 10:登録日時
LANG=C sort -k7,7                                          |
join0 key=7 $tmp-cgi                                       > ${tmp}-kengenlist

self 1 2 ${home_dir}/TBL/SHISETSU_MASTER/SHISETSU_KIHON |
join0 key=1 $tmp-shisetsu > $tmp-shisetsu_list


# 所属建屋によって登録可否を判定
self 1 3 $home_dir/TBL/JYUUGYOUIN_MASTER/USER_SHISETSU |
awk '$1=="'$userid'"' > $tmp-user_tateya

user_tateya=$(self 2 $tmp-user_tateya)

disabled_touroku=""
#if [ "$user_tateya" != "02" ] ; then
#   disabled_touroku="disabled"
#fi

# 施設フロア表示
cat $home_dir/TBL/SHISETSU_MASTER/SHISETSU_TATEYA_FLOOR     |
awk '$1=="'$shisetsu'"&&$2=="02"&&$4!="9"{print $3,$3"F","'$Floor'"}' |
awk '{if($1==$3){$3="selected"}else{$3=""};print $0}' |
LANG=C sort -k1,1n > $tmp-display_floor


#--------------------------------------------------------------
# メッセージがあればalertで表示させる
if [ ! -z "${message}" ] ; then
cat << FIN > $tmp-html2
    <script type="text/javascript" language="javascript">
      alert('${message}');
    </script>
FIN
##else
##cat << FIN > $tmp-html2
##    <script type="text/javascript" language="javascript">
##      window.close();
##    </script>
##FIN
fi
#-------------------------------------------------------------

[ "$Floor" = "0" -o -z "$Floor" -o "$Floor" = "_" ] && displayFloor="全" || displayFloor=$Floor

cat $checkfile > $tmp-calsed
cat << FIN | sed 's/ _$/ @/g' >> $tmp-calsed
###USERID### $userid
###PASSWORD### $password
###SHISETSUID### $shisetsu
###DROPDOWN_ACTIVE1### active
###LI_UNEI1### active
###FLOOR### $Floor
###DISPLAYFLOOR### $displayFloor
###NYUYOKUKYOSHITSU### $nyuyoku
###NYUYOKUBIKO### $NyuyokuBiko
###NIKKINHIKITSUGI### $NikkinHikitsugi
###YAKINHIKITSUGI### $YakinHikitsugi
###LASTYAKINHIKITSUGI### $LastYakinHikitsugi
###GUESTSYUKUHAKU_MALE### $guest_shukuhaku_male
###GUESTSYUKUHAKU_FEMALE### $guest_shukuhaku_female
###HMC### $honnyukyosha_male_count
###GMC### $gaihaku_male_count
###NMC### $nyuin_male_count
###NMKC### $nyuingaihaku_male_kei_count
###HSMC### $honnyukyosha_shoukei_male_count
###HFC### $honnyukyosha_female_count
###GFC### $gaihaku_female_count
###NFC### $nyuin_female_count
###NFKC### $nyuingaihaku_female_kei_count
###HSFC### $honnyukyosha_shoukei_female_count
###NK1C### $nyukyosha_kaigo1_count
###NK2C### $nyukyosha_kaigo2_count
###NK3C### $nyukyosha_kaigo3_count
###NK4C### $nyukyosha_kaigo4_count
###NK5C### $nyukyosha_kaigo5_count
###NK6C### $nyukyosha_kaigo6_count
###NK7C### $nyukyosha_kaigo7_count
###NK0C### $nyukyosha_kaigo0_count
###NKFC### $nyukyosha_full_count
###SSMC### $shortstay_male_count
###SSFC### $shortstay_female_count
###TKMC### $taiken_male_count
###TKFC### $taiken_female_count
###ROOMKOSU### $all_nyukyo
###NYUKYORITSU### $nyukyoritsu
###FUKUSUNYUKYORITSU### $fukusu_nyukyoritsu
###FULLCOUNT### $floor_full_count
###IKKATSUSHIHARAI### $ikkatsupercent
###TSUKIHARAI### $tsukipercent
###KIGEN2MONTH### $twomonthkigencount
###SELECT_SHISETSU### $select_shisetsu
###DISABLED_TOUROKU### $disabled_touroku
###KIJUNDATE### $taishoutoday
###HDKIJUNDATE### $hdKijunDate
FIN

#-----------------------------------------------------------
# 登録・印刷ボタンの表示
# 施設名はログインユーザーの権限のある施設を取得
self 9 $tmp-kengenlist |
LANG=C sort -k1,1      |
tail -1                > $tmp-dispkengen

# 権限がない人は新規登録や出力が出来ない
if [ $(cat $tmp-dispkengen) = "3" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### @"   >> $tmp-calsed
elif [ $(cat $tmp-dispkengen) = "2" ] ;then
  echo "###SHINKITOUROKUDISP### @" >> $tmp-calsed
  echo "###TOUROKUDISP### @" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
else
  echo "###SHINKITOUROKUDISP### none" >> $tmp-calsed
  echo "###TOUROKUDISP### none" >> $tmp-calsed
  echo "###PRINTDISP### none"   >> $tmp-calsed
fi

cat $tmp-calsed      |
sed 's/\\n//g'     >  $tmp-calsed_kaigyozumi

#cat $tmp-calsed      > $tmp-calsed_kaigyozumi
# HTMLの作成
cat ${html_dir}/NISSHI_CARE1.html ${home_dir}/KYOUTSU/HTML/MENUBAR.html ${html_dir}/NISSHI_CARE2.html |
calsed -f $tmp-calsed_kaigyozumi - |
mojihame -l###USER__NAME### - ${tmp}-usermei |
mojihame -l###SHISETSU_TAISHOU### - ${tmp}-shisetsu_taishou |
mojihame -l###SHISETSU_NAME### - $tmp-shisetsu_list |
mojihame -l###SCHEDULELIST### - $tmp-schedule_list |
mojihame -l###GYOUSHA### - $tmp-gyousha |
mojihame -l###NAIRAN### - $tmp-nairan |
mojihame -l###HIKKOSHI### - $tmp-hikkoshi |
mojihame -l###JUSHINLIST### - $tmp-jushin |
mojihame -h###RENRAKULIST### - $tmp-renraku_list |
mojihame -l###PHSLIST1### - $tmp-phs_list_output |
mojihame -l###PHSLIST2### - $tmp-phs_list2_output |
mojihame -l###HAISETSUNYUYOKUNASHI### - $tmp-haibennyuyokulist |
mojihame -l###GUESTSHUKUHAKULIST### - $tmp-guest_shukuhakulist |
mojihame -l###TANKINYUKYOSHALIST### - $tmp-shortstay_list |
mojihame -l###GAIHAKULIST### - $tmp-gaihaku_name_list |
mojihame -l###NYUINLIST### - $tmp-nyuin_name_list |
mojihame -l###SHISETSUFLOOR### - $tmp-display_floor |
mojihame -l###SELECTTATEYA### - $tmp-select_tateya
sed 's/###KAIGYO###/\n/g'     |
sed 's/\\n//g'                |
sed 's/###SPACE###/ /g'       |
tee $tmp-html |
#--------------------------------------------------------------
#--------------------------------------------------------------
if [ -e $tmp-html2 ] ; then
  cat - $tmp-html2
else
  cat -
fi |
#formhame -d"_" - ${namedata}  |
cat -
#--------------------------------------------------------------

rm -f ${tmp}-*
exit 0
